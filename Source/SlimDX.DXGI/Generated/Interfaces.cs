// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Interfaces for SlimDX.DXGI namespace.
//     This code was generated by a tool.
//     Date : 11/16/2010 12:11:33
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX.DXGI {

    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIObject</unmanaged>
    [Guid("aec22fb8-76f3-4639-9be0-28eb43a67a2e")]
    public partial class DXGIObject : SlimDX.ComObject {
        public DXGIObject(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="name">No documentation.</param>
        /// <param name="dataSize">No documentation.</param>
        /// <param name="dataRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIObject::SetPrivateData([In] GUID* Name,[None] int DataSize,[In, Buffer] const void* pData)</unmanaged>
        public SlimDX.Result SetPrivateData(Guid name, int dataSize, IntPtr dataRef) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 3 * 4, &name, dataSize, (void*)dataRef);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="name">No documentation.</param>
        /// <param name="unknownRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIObject::SetPrivateDataInterface([In] GUID* Name,[In] const IUnknown* pUnknown)</unmanaged>
        public SlimDX.Result SetPrivateDataInterface(Guid name, SlimDX.ComObject unknownRef) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 4 * 4, &name, (void*)((unknownRef == null)?IntPtr.Zero:unknownRef.NativePointer));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="name">No documentation.</param>
        /// <param name="dataSizeRef">No documentation.</param>
        /// <param name="dataRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIObject::GetPrivateData([In] GUID* Name,[InOut] int* pDataSize,[Out, Buffer] void* pData)</unmanaged>
        public SlimDX.Result GetPrivateData(Guid name, ref int dataSizeRef, IntPtr dataRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* dataSizeRef_ = &dataSizeRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 5 * 4, &name, dataSizeRef_, (void*)dataRef);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="riid">No documentation.</param>
        /// <param name="parentRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIObject::GetParent([In] GUID* riid,[Out] void** ppParent)</unmanaged>
        public SlimDX.Result GetParent(Guid riid, out IntPtr parentRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* parentRef_ = &parentRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 6 * 4, &riid, parentRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIDeviceSubObject</unmanaged>
    [Guid("3d3e0379-f9de-4d58-bb6c-18d62992f1a6")]
    public partial class DeviceSubObject : SlimDX.DXGI.DXGIObject {
        public DeviceSubObject(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="riid">No documentation.</param>
        /// <param name="deviceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDeviceSubObject::GetDevice([In] GUID* riid,[Out] void** ppDevice)</unmanaged>
        public SlimDX.Result GetDevice(Guid riid, out IntPtr deviceRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* deviceRef_ = &deviceRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 7 * 4, &riid, deviceRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIResource</unmanaged>
    [Guid("035f3ab4-482e-4e50-b41f-8a7f8bd8960b")]
    public partial class Resource : SlimDX.DXGI.DeviceSubObject {
        public Resource(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>
        public IntPtr SharedHandle {
                get { IntPtr __output__; GetSharedHandle(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIResource::GetUsage([Out] DXGI_USAGE* pUsage)</unmanaged>
        public SlimDX.DXGI.Usage Usage {
                get { SlimDX.DXGI.Usage __output__; GetUsage(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] int* pEvictionPriority)</unmanaged>
        public int EvictionPriority {
                get { int __output__; GetEvictionPriority(out __output__); return __output__; }
                set { SetEvictionPriority(value); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="sharedHandleRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] void** pSharedHandle)</unmanaged>
        internal SlimDX.Result GetSharedHandle(out IntPtr sharedHandleRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* sharedHandleRef_ = &sharedHandleRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 8 * 4, sharedHandleRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="usageRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIResource::GetUsage([Out] DXGI_USAGE* pUsage)</unmanaged>
        internal SlimDX.Result GetUsage(out SlimDX.DXGI.Usage usageRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* usageRef_ = &usageRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 9 * 4, usageRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="evictionPriority">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIResource::SetEvictionPriority([None] int EvictionPriority)</unmanaged>
        internal SlimDX.Result SetEvictionPriority(int evictionPriority) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 10 * 4, evictionPriority);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="evictionPriorityRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] int* pEvictionPriority)</unmanaged>
        internal SlimDX.Result GetEvictionPriority(out int evictionPriorityRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* evictionPriorityRef_ = &evictionPriorityRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 11 * 4, evictionPriorityRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIKeyedMutex</unmanaged>
    [Guid("9d8e1289-d7b3-465f-8126-250e349af85d")]
    public partial class KeyedMutex : SlimDX.DXGI.DeviceSubObject {
        public KeyedMutex(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="key">No documentation.</param>
        /// <param name="dwMilliseconds">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIKeyedMutex::AcquireSync([None] __int64 Key,[None] int dwMilliseconds)</unmanaged>
        public SlimDX.Result AcquireSync(long key, int dwMilliseconds) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 8 * 4, key, dwMilliseconds);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="key">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIKeyedMutex::ReleaseSync([None] __int64 Key)</unmanaged>
        public SlimDX.Result ReleaseSync(long key) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 9 * 4, key);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGISurface</unmanaged>
    [Guid("cafcb56c-6ac3-4889-bf47-9e23bbd260ec")]
    public partial class Surface : SlimDX.DXGI.DeviceSubObject {
        public Surface(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>
        public SlimDX.DXGI.SurfaceDescription Description {
                get { SlimDX.DXGI.SurfaceDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>
        internal SlimDX.Result GetDescription(out SlimDX.DXGI.SurfaceDescription descRef) {
            unsafe {
                descRef = new SlimDX.DXGI.SurfaceDescription();
                SlimDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 8 * 4, descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="lockedRectRef">No documentation.</param>
        /// <param name="mapFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface::Map([Out] DXGI_MAPPED_RECT* pLockedRect,[None] int MapFlags)</unmanaged>
        public SlimDX.Result Map(out SlimDX.DXGI.MappedRect lockedRectRef, int mapFlags) {
            unsafe {
                lockedRectRef = new SlimDX.DXGI.MappedRect();
                SlimDX.Result __result__;
                fixed (void* lockedRectRef_ = &lockedRectRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 9 * 4, lockedRectRef_, mapFlags);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface::Unmap()</unmanaged>
        public SlimDX.Result Unmap() {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 10 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGISurface1</unmanaged>
    [Guid("4AE63092-6327-4c1b-80AE-BFE12EA32B86")]
    public partial class Surface1 : SlimDX.DXGI.Surface {
        public Surface1(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="discard">No documentation.</param>
        /// <param name="hdcRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface1::GetDC([None] BOOL Discard,[Out] void** phdc)</unmanaged>
        public SlimDX.Result GetDC(bool discard, out IntPtr hdcRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* hdcRef_ = &hdcRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 11 * 4, (discard?1:0), hdcRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="dirtyRectRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>
        public SlimDX.Result ReleaseDC(SlimDX.Rectangle? dirtyRectRef) {
            unsafe {
                SlimDX.Rectangle dirtyRectRef_;
                if (dirtyRectRef.HasValue)
                    dirtyRectRef_ = dirtyRectRef.Value;				
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 12 * 4, (dirtyRectRef.HasValue)?&dirtyRectRef_:(void*)IntPtr.Zero);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIAdapter</unmanaged>
    [Guid("2411e7e1-12ac-4ccf-bd14-9798e8534dc0")]
    public partial class Adapter : SlimDX.DXGI.DXGIObject {
        public Adapter(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>
        public SlimDX.DXGI.AdapterDescription Description {
                get { SlimDX.DXGI.AdapterDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="output">No documentation.</param>
        /// <param name="outputRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([None] int Output,[Out] IDXGIOutput** ppOutput)</unmanaged>
        public SlimDX.Result EnumOutputs(int output, out SlimDX.DXGI.Output outputRef) {
            unsafe {
                IntPtr outputRef_ = IntPtr.Zero;
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 7 * 4, output, &outputRef_);
                outputRef = (outputRef_ == IntPtr.Zero)?null:new SlimDX.DXGI.Output(outputRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>
        internal SlimDX.Result GetDescription(out SlimDX.DXGI.AdapterDescription descRef) {
            unsafe {
                SlimDX.DXGI.AdapterDescription.__Native descRef_ = new SlimDX.DXGI.AdapterDescription.__Native();
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 8 * 4, &descRef_);
                descRef = new SlimDX.DXGI.AdapterDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="interfaceName">No documentation.</param>
        /// <param name="uMDVersionRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] GUID* InterfaceName,[Out] __int64* pUMDVersion)</unmanaged>
        public SlimDX.Result CheckInterfaceSupport(Guid interfaceName, out long uMDVersionRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* uMDVersionRef_ = &uMDVersionRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 9 * 4, &interfaceName, uMDVersionRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIOutput</unmanaged>
    [Guid("ae02eedb-c735-4690-8d52-5a8dc20213aa")]
    public partial class Output : SlimDX.DXGI.DXGIObject {
        public Output(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>
        public SlimDX.DXGI.OutputDescription Description {
                get { SlimDX.DXGI.OutputDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>
        public SlimDX.DXGI.GammaControlCapabilities GammaControlCapabilities {
                get { SlimDX.DXGI.GammaControlCapabilities __output__; GetGammaControlCapabilities(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>
        public SlimDX.DXGI.GammaControl GammaControl {
                get { SlimDX.DXGI.GammaControl __output__; GetGammaControl(out __output__); return __output__; }
                set { SetGammaControl(ref value); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIOutput::SetDisplaySurface([In] IDXGISurface* pScanoutSurface)</unmanaged>
        public SlimDX.DXGI.Surface DisplaySurface {
                set { SetDisplaySurface(value); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        public SlimDX.DXGI.FrameStatistics FrameStatistics {
                get { SlimDX.DXGI.FrameStatistics __output__; GetFrameStatistics(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>
        internal SlimDX.Result GetDescription(out SlimDX.DXGI.OutputDescription descRef) {
            unsafe {
                SlimDX.DXGI.OutputDescription.__Native descRef_ = new SlimDX.DXGI.OutputDescription.__Native();
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 7 * 4, &descRef_);
                descRef = new SlimDX.DXGI.OutputDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="enumFormat">No documentation.</param>
        /// <param name="flags">No documentation.</param>
        /// <param name="numModesRef">No documentation.</param>
        /// <param name="descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetDisplayModeList([None] DXGI_FORMAT EnumFormat,[None] int Flags,[InOut] int* pNumModes,[Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)</unmanaged>
        public SlimDX.Result GetDisplayModeList(SlimDX.DXGI.Format enumFormat, int flags, ref int numModesRef, SlimDX.DXGI.ModeDescription[] descRef) {
            unsafe {
                SlimDX.DXGI.ModeDescription[] descRef__ = descRef ?? new SlimDX.DXGI.ModeDescription[1];
                SlimDX.Result __result__;
                fixed (void* numModesRef_ = &numModesRef)
                    fixed (void* descRef_ = &descRef__[0])
                        __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 8 * 4, unchecked((int)enumFormat), flags, numModesRef_, descRef==null?(void*)IntPtr.Zero:descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="modeToMatchRef">No documentation.</param>
        /// <param name="closestMatchRef">No documentation.</param>
        /// <param name="concernedDeviceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch,[Out] DXGI_MODE_DESC* pClosestMatch,[In, Optional] IUnknown* pConcernedDevice)</unmanaged>
        public SlimDX.Result FindClosestMatchingMode(ref SlimDX.DXGI.ModeDescription modeToMatchRef, out SlimDX.DXGI.ModeDescription closestMatchRef, SlimDX.ComObject concernedDeviceRef) {
            unsafe {
                closestMatchRef = new SlimDX.DXGI.ModeDescription();
                SlimDX.Result __result__;
                fixed (void* modeToMatchRef_ = &modeToMatchRef)
                    fixed (void* closestMatchRef_ = &closestMatchRef)
                        __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 9 * 4, modeToMatchRef_, closestMatchRef_, (void*)((concernedDeviceRef == null)?IntPtr.Zero:concernedDeviceRef.NativePointer));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::WaitForVBlank()</unmanaged>
        public SlimDX.Result WaitForVBlank() {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 10 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>
        /// <param name="exclusive">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::TakeOwnership([In] IUnknown* pDevice,[None] BOOL Exclusive)</unmanaged>
        public SlimDX.Result TakeOwnership(SlimDX.ComObject deviceRef, bool exclusive) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 11 * 4, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), (exclusive?1:0));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>void IDXGIOutput::ReleaseOwnership()</unmanaged>
        public void ReleaseOwnership() {
            unsafe {
                SlimDX.DXGI.LocalInterop.Callivoid(_nativePointer, 12 * 4);
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="gammaCapsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>
        internal SlimDX.Result GetGammaControlCapabilities(out SlimDX.DXGI.GammaControlCapabilities gammaCapsRef) {
            unsafe {
                SlimDX.DXGI.GammaControlCapabilities.__Native gammaCapsRef_ = new SlimDX.DXGI.GammaControlCapabilities.__Native();
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 13 * 4, &gammaCapsRef_);
                gammaCapsRef = new SlimDX.DXGI.GammaControlCapabilities();
                gammaCapsRef.__MarshalFrom(ref gammaCapsRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="arrayRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::SetGammaControl([In] const DXGI_GAMMA_CONTROL* pArray)</unmanaged>
        internal SlimDX.Result SetGammaControl(ref SlimDX.DXGI.GammaControl arrayRef) {
            unsafe {
                SlimDX.DXGI.GammaControl.__Native arrayRef_ = new SlimDX.DXGI.GammaControl.__Native();
                arrayRef.__MarshalTo(ref arrayRef_);
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 14 * 4, &arrayRef_);
                arrayRef_.__MarshalFree();
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="arrayRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>
        internal SlimDX.Result GetGammaControl(out SlimDX.DXGI.GammaControl arrayRef) {
            unsafe {
                SlimDX.DXGI.GammaControl.__Native arrayRef_ = new SlimDX.DXGI.GammaControl.__Native();
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 15 * 4, &arrayRef_);
                arrayRef = new SlimDX.DXGI.GammaControl();
                arrayRef.__MarshalFrom(ref arrayRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="scanoutSurfaceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::SetDisplaySurface([In] IDXGISurface* pScanoutSurface)</unmanaged>
        internal SlimDX.Result SetDisplaySurface(SlimDX.DXGI.Surface scanoutSurfaceRef) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 16 * 4, (void*)((scanoutSurfaceRef == null)?IntPtr.Zero:scanoutSurfaceRef.NativePointer));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="destinationRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetDisplaySurfaceData([In] IDXGISurface* pDestination)</unmanaged>
        public SlimDX.Result GetDisplaySurfaceData(SlimDX.DXGI.Surface destinationRef) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 17 * 4, (void*)((destinationRef == null)?IntPtr.Zero:destinationRef.NativePointer));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="statsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        internal SlimDX.Result GetFrameStatistics(out SlimDX.DXGI.FrameStatistics statsRef) {
            unsafe {
                statsRef = new SlimDX.DXGI.FrameStatistics();
                SlimDX.Result __result__;
                fixed (void* statsRef_ = &statsRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 18 * 4, statsRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGISwapChain</unmanaged>
    [Guid("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a")]
    public partial class SwapChain : SlimDX.DXGI.DeviceSubObject {
        public SwapChain(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>
        public SlimDX.DXGI.SwapChainDescription Description {
                get { SlimDX.DXGI.SwapChainDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>
        public SlimDX.DXGI.Output ContainingOutput {
                get { SlimDX.DXGI.Output __output__; GetContainingOutput(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        public SlimDX.DXGI.FrameStatistics FrameStatistics {
                get { SlimDX.DXGI.FrameStatistics __output__; GetFrameStatistics(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] int* pLastPresentCount)</unmanaged>
        public int LastPresentCount {
                get { int __output__; GetLastPresentCount(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="syncInterval">No documentation.</param>
        /// <param name="flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::Present([None] int SyncInterval,[None] int Flags)</unmanaged>
        public SlimDX.Result Present(int syncInterval, SlimDX.DXGI.PresentFlags flags) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 8 * 4, syncInterval, unchecked((int)flags));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="buffer">No documentation.</param>
        /// <param name="riid">No documentation.</param>
        /// <param name="surfaceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetBuffer([None] int Buffer,[In] GUID* riid,[Out] void** ppSurface)</unmanaged>
        public SlimDX.Result GetBuffer(int buffer, Guid riid, out IntPtr surfaceRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* surfaceRef_ = &surfaceRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 9 * 4, buffer, &riid, surfaceRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fullscreen">No documentation.</param>
        /// <param name="targetRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::SetFullscreenState([None] BOOL Fullscreen,[In, Optional] IDXGIOutput* pTarget)</unmanaged>
        public SlimDX.Result SetFullscreenState(bool fullscreen, SlimDX.DXGI.Output targetRef) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 10 * 4, (fullscreen?1:0), (void*)((targetRef == null)?IntPtr.Zero:targetRef.NativePointer));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="fullscreenRef">No documentation.</param>
        /// <param name="targetRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetFullscreenState([Out] BOOL* pFullscreen,[Out] IDXGIOutput** ppTarget)</unmanaged>
        public SlimDX.Result GetFullscreenState(out bool fullscreenRef, out SlimDX.DXGI.Output targetRef) {
            unsafe {
                IntPtr targetRef_ = IntPtr.Zero;
                SlimDX.Result __result__;
                fixed (void* fullscreenRef_ = &fullscreenRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 11 * 4, fullscreenRef_, &targetRef_);
                targetRef = (targetRef_ == IntPtr.Zero)?null:new SlimDX.DXGI.Output(targetRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>
        internal SlimDX.Result GetDescription(out SlimDX.DXGI.SwapChainDescription descRef) {
            unsafe {
                descRef = new SlimDX.DXGI.SwapChainDescription();
                SlimDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 12 * 4, descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="bufferCount">No documentation.</param>
        /// <param name="width">No documentation.</param>
        /// <param name="height">No documentation.</param>
        /// <param name="newFormat">No documentation.</param>
        /// <param name="swapChainFlags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::ResizeBuffers([None] int BufferCount,[None] int Width,[None] int Height,[None] DXGI_FORMAT NewFormat,[None] int SwapChainFlags)</unmanaged>
        public SlimDX.Result ResizeBuffers(int bufferCount, int width, int height, SlimDX.DXGI.Format newFormat, int swapChainFlags) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 13 * 4, bufferCount, width, height, unchecked((int)newFormat), swapChainFlags);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="newTargetParametersRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::ResizeTarget([In] const DXGI_MODE_DESC* pNewTargetParameters)</unmanaged>
        public SlimDX.Result ResizeTarget(ref SlimDX.DXGI.ModeDescription newTargetParametersRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* newTargetParametersRef_ = &newTargetParametersRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 14 * 4, newTargetParametersRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="outputRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>
        internal SlimDX.Result GetContainingOutput(out SlimDX.DXGI.Output outputRef) {
            unsafe {
                IntPtr outputRef_ = IntPtr.Zero;
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 15 * 4, &outputRef_);
                outputRef = (outputRef_ == IntPtr.Zero)?null:new SlimDX.DXGI.Output(outputRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="statsRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
        internal SlimDX.Result GetFrameStatistics(out SlimDX.DXGI.FrameStatistics statsRef) {
            unsafe {
                statsRef = new SlimDX.DXGI.FrameStatistics();
                SlimDX.Result __result__;
                fixed (void* statsRef_ = &statsRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 16 * 4, statsRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="lastPresentCountRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] int* pLastPresentCount)</unmanaged>
        internal SlimDX.Result GetLastPresentCount(out int lastPresentCountRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* lastPresentCountRef_ = &lastPresentCountRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 17 * 4, lastPresentCountRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIFactory</unmanaged>
    [Guid("7b7166ec-21c7-44ae-b21a-c9ae321ae369")]
    public partial class Factory : SlimDX.DXGI.DXGIObject {
        public Factory(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIFactory::GetWindowAssociation([Out] void** pWindowHandle)</unmanaged>
        public IntPtr WindowAssociation {
                get { IntPtr __output__; GetWindowAssociation(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="adapter">No documentation.</param>
        /// <param name="adapterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory::EnumAdapters([None] int Adapter,[Out] IDXGIAdapter** ppAdapter)</unmanaged>
        public SlimDX.Result EnumAdapters(int adapter, out SlimDX.DXGI.Adapter adapterRef) {
            unsafe {
                IntPtr adapterRef_ = IntPtr.Zero;
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 7 * 4, adapter, &adapterRef_);
                adapterRef = (adapterRef_ == IntPtr.Zero)?null:new SlimDX.DXGI.Adapter(adapterRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="windowHandle">No documentation.</param>
        /// <param name="flags">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory::MakeWindowAssociation([None] void* WindowHandle,[None] int Flags)</unmanaged>
        public SlimDX.Result MakeWindowAssociation(IntPtr windowHandle, SlimDX.DXGI.WindowAssociationFlags flags) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 8 * 4, (void*)windowHandle, unchecked((int)flags));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="windowHandleRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory::GetWindowAssociation([Out] void** pWindowHandle)</unmanaged>
        internal SlimDX.Result GetWindowAssociation(out IntPtr windowHandleRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* windowHandleRef_ = &windowHandleRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 9 * 4, windowHandleRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="deviceRef">No documentation.</param>
        /// <param name="descRef">No documentation.</param>
        /// <param name="swapChainRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice,[In] DXGI_SWAP_CHAIN_DESC* pDesc,[Out] IDXGISwapChain** ppSwapChain)</unmanaged>
        public SlimDX.Result CreateSwapChain(SlimDX.ComObject deviceRef, ref SlimDX.DXGI.SwapChainDescription descRef, out SlimDX.DXGI.SwapChain swapChainRef) {
            unsafe {
                IntPtr swapChainRef_ = IntPtr.Zero;
                SlimDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 10 * 4, (void*)((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer), descRef_, &swapChainRef_);
                swapChainRef = (swapChainRef_ == IntPtr.Zero)?null:new SlimDX.DXGI.SwapChain(swapChainRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="module">No documentation.</param>
        /// <param name="adapterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory::CreateSoftwareAdapter([None] void* Module,[Out] IDXGIAdapter** ppAdapter)</unmanaged>
        public SlimDX.Result CreateSoftwareAdapter(IntPtr module, out SlimDX.DXGI.Adapter adapterRef) {
            unsafe {
                IntPtr adapterRef_ = IntPtr.Zero;
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 11 * 4, (void*)module, &adapterRef_);
                adapterRef = (adapterRef_ == IntPtr.Zero)?null:new SlimDX.DXGI.Adapter(adapterRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIDevice</unmanaged>
    [Guid("54ec77fa-1377-44e6-8c32-88fd5f44c84c")]
    public partial class Device : SlimDX.DXGI.DXGIObject {
        public Device(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>
        public SlimDX.DXGI.Adapter Adapter {
                get { SlimDX.DXGI.Adapter __output__; GetAdapter(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>
        public int GPUThreadPriority {
                get { int __output__; GetGPUThreadPriority(out __output__); return __output__; }
                set { SetGPUThreadPriority(value); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="adapterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>
        internal SlimDX.Result GetAdapter(out SlimDX.DXGI.Adapter adapterRef) {
            unsafe {
                IntPtr adapterRef_ = IntPtr.Zero;
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 7 * 4, &adapterRef_);
                adapterRef = (adapterRef_ == IntPtr.Zero)?null:new SlimDX.DXGI.Adapter(adapterRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="descRef">No documentation.</param>
        /// <param name="numSurfaces">No documentation.</param>
        /// <param name="usage">No documentation.</param>
        /// <param name="sharedResourceRef">No documentation.</param>
        /// <param name="surfaceRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice::CreateSurface([In] const DXGI_SURFACE_DESC* pDesc,[None] int NumSurfaces,[None] DXGI_USAGE Usage,[In, Optional] const DXGI_SHARED_RESOURCE* pSharedResource,[Out] IDXGISurface** ppSurface)</unmanaged>
        public SlimDX.Result CreateSurface(ref SlimDX.DXGI.SurfaceDescription descRef, int numSurfaces, SlimDX.DXGI.Usage usage, SlimDX.DXGI.SharedResource? sharedResourceRef, out SlimDX.DXGI.Surface surfaceRef) {
            unsafe {
                SlimDX.DXGI.SharedResource sharedResourceRef_;
                if (sharedResourceRef.HasValue)
                    sharedResourceRef_ = sharedResourceRef.Value;				
                IntPtr surfaceRef_ = IntPtr.Zero;
                SlimDX.Result __result__;
                fixed (void* descRef_ = &descRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 8 * 4, descRef_, numSurfaces, unchecked((int)usage), (sharedResourceRef.HasValue)?&sharedResourceRef_:(void*)IntPtr.Zero, &surfaceRef_);
                surfaceRef = (surfaceRef_ == IntPtr.Zero)?null:new SlimDX.DXGI.Surface(surfaceRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="resourcesRef">No documentation.</param>
        /// <param name="residencyStatusRef">No documentation.</param>
        /// <param name="numResources">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources,[Out, Buffer] DXGI_RESIDENCY* pResidencyStatus,[None] int NumResources)</unmanaged>
        public SlimDX.Result QueryResourceResidency(SlimDX.ComObject[] resourcesRef, SlimDX.DXGI.Residency[] residencyStatusRef, int numResources) {
            unsafe {
                IntPtr* resourcesRef_ = (IntPtr*)0;
                if ( resourcesRef != null ) {
                    IntPtr* resourcesRef__ = stackalloc IntPtr[resourcesRef.Length];
                    resourcesRef_ = resourcesRef__;
                    for (int i = 0; i < resourcesRef.Length; i++)                        
                        resourcesRef_[i] =  resourcesRef[i].NativePointer;
                }
                SlimDX.Result __result__;
                fixed (void* residencyStatusRef_ = &residencyStatusRef[0])
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 9 * 4, resourcesRef_, residencyStatusRef_, numResources);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="priority">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice::SetGPUThreadPriority([None] int Priority)</unmanaged>
        internal SlimDX.Result SetGPUThreadPriority(int priority) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 10 * 4, priority);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="riorityRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>
        internal SlimDX.Result GetGPUThreadPriority(out int riorityRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* riorityRef_ = &riorityRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 11 * 4, riorityRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIFactory1</unmanaged>
    [Guid("770aae78-f26f-4dba-a829-253c83d1b387")]
    public partial class Factory1 : SlimDX.DXGI.Factory {
        public Factory1(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>
        public bool IsCurrent {
                get { return IsCurrent_(); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="adapter">No documentation.</param>
        /// <param name="adapterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([None] int Adapter,[Out] IDXGIAdapter1** ppAdapter)</unmanaged>
        public SlimDX.Result EnumAdapters1(int adapter, out SlimDX.DXGI.Adapter1 adapterRef) {
            unsafe {
                IntPtr adapterRef_ = IntPtr.Zero;
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 12 * 4, adapter, &adapterRef_);
                adapterRef = (adapterRef_ == IntPtr.Zero)?null:new SlimDX.DXGI.Adapter1(adapterRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>
        internal bool IsCurrent_() {
            unsafe {
                bool __result__;
                __result__= (bool)(0!=SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 13 * 4));
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIAdapter1</unmanaged>
    [Guid("29038f61-3839-4626-91fd-086879011a05")]
    public partial class Adapter1 : SlimDX.DXGI.Adapter {
        public Adapter1(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>
        public SlimDX.DXGI.AdapterDescription1 Description1 {
                get { SlimDX.DXGI.AdapterDescription1 __output__; GetDescription1(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="descRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>
        internal SlimDX.Result GetDescription1(out SlimDX.DXGI.AdapterDescription1 descRef) {
            unsafe {
                SlimDX.DXGI.AdapterDescription1.__Native descRef_ = new SlimDX.DXGI.AdapterDescription1.__Native();
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 10 * 4, &descRef_);
                descRef = new SlimDX.DXGI.AdapterDescription1();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDXGIDevice1</unmanaged>
    [Guid("77db970f-6276-48ba-ba28-070143b4392c")]
    public partial class Device1 : SlimDX.DXGI.Device {
        public Device1(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] int* pMaxLatency)</unmanaged>
        public int MaximumFrameLatency {
                get { int __output__; GetMaximumFrameLatency(out __output__); return __output__; }
                set { SetMaximumFrameLatency(value); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="maxLatency">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice1::SetMaximumFrameLatency([None] int MaxLatency)</unmanaged>
        internal SlimDX.Result SetMaximumFrameLatency(int maxLatency) {
            unsafe {
                SlimDX.Result __result__;
                __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 12 * 4, maxLatency);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="maxLatencyRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] int* pMaxLatency)</unmanaged>
        internal SlimDX.Result GetMaximumFrameLatency(out int maxLatencyRef) {
            unsafe {
                SlimDX.Result __result__;
                fixed (void* maxLatencyRef_ = &maxLatencyRef)
                    __result__= (SlimDX.Result)SlimDX.DXGI.LocalInterop.Calliint(_nativePointer, 13 * 4, maxLatencyRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
}
