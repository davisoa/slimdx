// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Structs for SlimDX.Windows namespace.
//     This code was generated by a tool.
//     Date : 11/16/2010 08:41:21
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX.Windows {

    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>Win32</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    internal  partial struct Win32 {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>TEXTMETRICW</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Textmetricw {	
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmHeight</unmanaged>
            public int TmHeight;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmAscent</unmanaged>
            public int TmAscent;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmDescent</unmanaged>
            public int TmDescent;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmInternalLeading</unmanaged>
            public int TmInternalLeading;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmExternalLeading</unmanaged>
            public int TmExternalLeading;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmAveCharWidth</unmanaged>
            public int TmAveCharWidth;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmMaxCharWidth</unmanaged>
            public int TmMaxCharWidth;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmWeight</unmanaged>
            public int TmWeight;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmOverhang</unmanaged>
            public int TmOverhang;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmDigitizedAspectX</unmanaged>
            public int TmDigitizedAspectX;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmDigitizedAspectY</unmanaged>
            public int TmDigitizedAspectY;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>wchar_t tmFirstChar</unmanaged>
            public char TmFirstChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>wchar_t tmLastChar</unmanaged>
            public char TmLastChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>wchar_t tmDefaultChar</unmanaged>
            public char TmDefaultChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>wchar_t tmBreakChar</unmanaged>
            public char TmBreakChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmItalic</unmanaged>
            public byte TmItalic;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmUnderlined</unmanaged>
            public byte TmUnderlined;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmStruckOut</unmanaged>
            public byte TmStruckOut;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmPitchAndFamily</unmanaged>
            public byte TmPitchAndFamily;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmCharSet</unmanaged>
            public byte TmCharSet;
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>TEXTMETRICA</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Textmetrica {	
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmHeight</unmanaged>
            public int TmHeight;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmAscent</unmanaged>
            public int TmAscent;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmDescent</unmanaged>
            public int TmDescent;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmInternalLeading</unmanaged>
            public int TmInternalLeading;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmExternalLeading</unmanaged>
            public int TmExternalLeading;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmAveCharWidth</unmanaged>
            public int TmAveCharWidth;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmMaxCharWidth</unmanaged>
            public int TmMaxCharWidth;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmWeight</unmanaged>
            public int TmWeight;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmOverhang</unmanaged>
            public int TmOverhang;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmDigitizedAspectX</unmanaged>
            public int TmDigitizedAspectX;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmDigitizedAspectY</unmanaged>
            public int TmDigitizedAspectY;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>char tmFirstChar</unmanaged>
            public byte TmFirstChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>char tmLastChar</unmanaged>
            public byte TmLastChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>char tmDefaultChar</unmanaged>
            public byte TmDefaultChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>char tmBreakChar</unmanaged>
            public byte TmBreakChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmItalic</unmanaged>
            public byte TmItalic;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmUnderlined</unmanaged>
            public byte TmUnderlined;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmStruckOut</unmanaged>
            public byte TmStruckOut;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmPitchAndFamily</unmanaged>
            public byte TmPitchAndFamily;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmCharSet</unmanaged>
            public byte TmCharSet;
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>LOGFONTW</unmanaged>
        public  partial struct Logfontw {	
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int lfHeight</unmanaged>
            public int LfHeight;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int lfWidth</unmanaged>
            public int LfWidth;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int lfEscapement</unmanaged>
            public int LfEscapement;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int lfOrientation</unmanaged>
            public int LfOrientation;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int lfWeight</unmanaged>
            public int LfWeight;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfItalic</unmanaged>
            public byte LfItalic;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfUnderline</unmanaged>
            public byte LfUnderline;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfStrikeOut</unmanaged>
            public byte LfStrikeOut;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfCharSet</unmanaged>
            public byte LfCharSet;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfOutPrecision</unmanaged>
            public byte LfOutPrecision;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfClipPrecision</unmanaged>
            public byte LfClipPrecision;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfQuality</unmanaged>
            public byte LfQuality;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfPitchAndFamily</unmanaged>
            public byte LfPitchAndFamily;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>wchar_t lfFaceName[32]</unmanaged>
            public string LfFaceName;
    
            // Internal native struct used for marshalling
            [StructLayout(LayoutKind.Sequential, Pack = 0 )]
            internal unsafe partial struct __Native {	
                public int LfHeight;
                public int LfWidth;
                public int LfEscapement;
                public int LfOrientation;
                public int LfWeight;
                public byte LfItalic;
                public byte LfUnderline;
                public byte LfStrikeOut;
                public byte LfCharSet;
                public byte LfOutPrecision;
                public byte LfClipPrecision;
                public byte LfQuality;
                public byte LfPitchAndFamily;
                public fixed char LfFaceName[32];
            }
    		// Method to marshal from native to managed struct
            internal unsafe void __MarshalFrom(ref __Native @ref)
            {            
                this.LfHeight = @ref.LfHeight;
                this.LfWidth = @ref.LfWidth;
                this.LfEscapement = @ref.LfEscapement;
                this.LfOrientation = @ref.LfOrientation;
                this.LfWeight = @ref.LfWeight;
                this.LfItalic = @ref.LfItalic;
                this.LfUnderline = @ref.LfUnderline;
                this.LfStrikeOut = @ref.LfStrikeOut;
                this.LfCharSet = @ref.LfCharSet;
                this.LfOutPrecision = @ref.LfOutPrecision;
                this.LfClipPrecision = @ref.LfClipPrecision;
                this.LfQuality = @ref.LfQuality;
                this.LfPitchAndFamily = @ref.LfPitchAndFamily;
                fixed (char* __ptr = @ref.LfFaceName) this.LfFaceName = new string(__ptr, 0, 32);
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>RGNDATAHEADER</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct Rgndataheader {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        public int DwSize;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int iType</unmanaged>
        public int IType;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int nCount</unmanaged>
        public int NCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int nRgnSize</unmanaged>
        public int NRgnSize;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>RECT rcBound</unmanaged>
        public SlimDX.Rectangle RcBound;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>PALETTEENTRY</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct Paletteentry {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>byte peRed</unmanaged>
        public byte PeRed;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>byte peGreen</unmanaged>
        public byte PeGreen;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>byte peBlue</unmanaged>
        public byte PeBlue;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>byte peFlags</unmanaged>
        public byte PeFlags;
    }
}
