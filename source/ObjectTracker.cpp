/*
* Copyright (c) 2007 SlimDX Group
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/

#include "ObjectTracker.h"

namespace SlimDX
{
	void ObjectTracker::OnExit( Object^ sender, EventArgs^ e )
	{
		ReportLeaks();
	}

	void ObjectTracker::ReportLeaks()
	{
		String^ output = "";

		for each( KeyValuePair<IDisposable^, StackTrace^> pair in m_TrackedObjects )
		{
			output += String::Format( CultureInfo::InvariantCulture, "Object of type {0} was not disposed. Stack trace of object creation:\n", pair.Key->GetType() );
			for each( StackFrame^ frame in pair.Value->GetFrames() )
			{
				if( frame->GetFileLineNumber() == 0 )
				{
					//compiler autogenerated functions and the like can cause stack frames with no info
					//that's the only time the line number is 0
					//since it's not a useful frame to see, we'll skip it
					continue;
				}

				output += String::Format( CultureInfo::InvariantCulture, "\t{0}({1},{2}): {3}\n", frame->GetFileName(),
					frame->GetFileLineNumber(), frame->GetFileColumnNumber(), frame->GetMethod() );
			}
		}

		output += String::Format( CultureInfo::InvariantCulture, "Total of {0} objects leaked.\n", m_TrackedObjects->Count );
		Debug::Write( output );
	}

	void ObjectTracker::Add( IDisposable^ obj )
	{
		StackTrace^ stack = gcnew StackTrace( 1, true );
		m_TrackedObjects->Add( obj, stack );
	}

	void ObjectTracker::Remove( IDisposable^ obj )
	{
		m_TrackedObjects->Remove( obj );
	}
}