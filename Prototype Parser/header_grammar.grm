! -----------------------------------------------------------------------
! C++ Header Language
! -----------------------------------------------------------------------

"Name"    = 'C++ Header Grammar' 
"Version" = '1'
"Author"  = 'SlimDX Group' 
"About"   = 'Implements a subset of the C++ language for parsing simple header files.'

"Case Sensitive" = True
"Start Symbol"   = <Decls>

{Hex Digit}      = {Digit} + [abcdefABCDEF]
{Oct Digit}      = [01234567]

{Id Head}        = {Letter} + [_]
{Id Tail}        = {Id Head} + {Digit}

{String Ch}      = {Printable} - ["]
{Char Ch}        = {Printable} - ['']

DecLiteral       = [123456789]{digit}*
OctLiteral       = 0{Oct Digit}*
HexLiteral       = 0x{Hex Digit}+

StringLiteral    = '"'( {String Ch} | '\'{Printable} )* '"'

Id               = {Id Head}{Id Tail}*

! ===================================================================
! Comments
! ===================================================================

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

! ===================================================================
! Root
! ===================================================================

<ID> ::= Id
       | align

<Decls> ::= <Decl> <Decls> 
          |

<Decl>  ::= <Function>
          | <Variable>    
          | <Typedef>
          | <Extern>
          | <Operator>
          | <Template>

<Extern> ::= extern '"C"' '{' <Decls> '}'
           | extern '"C++"' '{' <Decls> '}'
           | extern '"C"' <Decl>

<Template> ::= template '<' <Params> '>'
              
! ===================================================================
! Functions
! ===================================================================

<Operator> ::= <FuncModifierList> <Type> <FuncModifierList> operator <Symbol> '(' <Signature>
             | <FuncModifierList> <Type> operator <Symbol> '(' <Signature>
             | <Type> <FuncModifierList> operator <Symbol> '(' <Signature>
             | <Type> operator <Symbol> '(' <Signature>

<Function> ::= <FuncModifierList> <Type> <FuncModifierList> <ID> '(' <Signature>
             | <FuncModifierList> <Type> <ID> '(' <Signature>
             | <Type> <FuncModifierList> <ID> '(' <Signature>
             | <Type> <ID> '(' <Signature>

<Signature> ::= <Params> ')' <Throw> <Pure> <Body>

<Body> ::= '{' <BlockList> '}'
         | ';'

<Throw> ::= throw '(' ')' 
          | 

<Pure> ::= '=' <Numeric> 
         |

<Params> ::= <Param> ',' <Params>
           | <Param>
           | 
               
<Param> ::= <Type> <Var>
          | <Type>
          | '...'
          | <FunctionPtr>
          | <Type> '(' '&' <ID> ')' <Array>

<Block> ::= '{' <BlockList> '}'
          | <Anything>

<BlockList> ::= <Block> <BlockList>
              |

<Symbol> ::= '[' | ']' | '(' | ')' | ',' | ':' | ';' | '+' | '>' | '=' | '=='
           | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '!' | '~' | '<' | '?'
           | '&&' | '||' | '<<' | '>>' | '<=' | '!=' | '>=' | '&=' | '|='
           | '++' | '--' | '->' | '.'

! Bit of a hack to just eat up anything in a function body without really looking at it properly
<Anything> ::= <ID>
             | StringLiteral
             | <Symbol>
             | <Numeric>
             | <Mod>
             | <FuncModifier>
             | <Keywords>

<Keywords> ::= sizeof
             | char
             | int
             | short
             | long
             | short int
             | long int
             | float
             | double
             | void
             | __int64
             | __ptr64
             | unsigned
             | signed
             | struct
             | enum
             | union

<CallingConvention> ::= '__cdecl'
                      | '__stdcall'
                      | '__fastcall'

<FuncModifierList> ::= <FuncModifier> <FuncModifierList>
                     | <FuncModifier>

<FuncModifier> ::= <CallingConvention>
                 | '__inline'
                 | '__forceinline'
                 | inline
                 | virtual
                 | <DeclspecDef>

<DeclspecDef> ::= '__declspec' '(' <Declspec> ')'

<DeclspecOrEmpty> ::= <DeclspecDef> <DeclspecOrEmpty>
                    |

<StringLiteralList> ::= StringLiteral <StringLiteralList>
                      |

<Declspec> ::= noreturn
             | noalias
             | novtable
             | nothrow
             | restrict
             | dllimport
             | dllexport
             | deprecated
             | deprecated '(' StringLiteral <StringLiteralList> ')'
             | uuid '(' StringLiteral ')'
             | align '(' <Numeric> ')'

! ===================================================================
! Type Declaration
! ===================================================================

<Typedef> ::= typedef <Type> <Var> <VarList> ';'
            | typedef <Function>
            | typedef <FunctionPtr> ';'

<Object> ::= struct
           | class

<Struct> ::= <StructMember> <Struct>
           |

<StructMember> ::= <Variable>
                 | <Function>
                 | <Template>
                 | <Accessibility> ':'

<FunctionPtr> ::= <Type> '(' <CallingConvention> <Pointers> <ID> ')' '(' <Params> ')'
                | <Type> '(' <CallingConvention> <Pointers> ')' '(' <Params> ')'
                | <Type> '(' <Pointers> <ID> ')' '(' <Params> ')'

<Inheritance> ::= ':' <Accessibility> <ID>
                | ':' <ID>
                |

<Accessibility> ::= public
                  | private
                  | protected

! ===================================================================
! Variable Declaration
! ===================================================================

<Numeric> ::= DecLiteral
            | HexLiteral
            | OctLiteral

<Variable> ::= <Type> <Var> <VarList>  ';'
             | <Type> <Var> ':' <Numeric> <VarList>  ';'
             | <Type> ';'
             | <Type> ':' <Numeric> ';'
             | <FunctionPtr> ';'
             | '*' <Type> ';'
             
<Var> ::= <ID> <Array>

<Array> ::= '[' <Expr> ']' <Array>
          | '[' ']' <Array>
          |
             
<VarList> ::= ',' <VarItem> <VarList>
            | 

<VarItem> ::= <Pointers> <Var> ':' <Numeric>
            | <Pointers> <Var>

<Mod> ::= extern 
        | static
        | register
        | auto
        | volatile
        | const

<ModList> ::= <Mod> <ModList>
            | <Mod>

! ===================================================================
! Enumerations
! ===================================================================
 
<Enum> ::= <EnumVal> ',' <Enum>
         | <EnumVal> ','
         | <EnumVal>

<EnumVal> ::= <ID>
            | <ID> '=' <Op If>

! ===================================================================
! Types
! ===================================================================

<Type> ::= <W64> <Base> <Pointers> 
         | <ModList> <W64> <Base> <Pointers>
         | <DeclspecDef> <ModList> <W64> <Base> <Pointers>
         | <DeclspecDef> <Base> <Pointers>
            

<W64> ::= '__w64'
        |

<Base> ::= <Sign>
         | <Scalar>
         | <Sign> <Scalar>
         | <Object> <DeclspecOrEmpty> <ID> <Inheritance>
         | <Object> '{' <Struct> '}' 
         | <Object> <DeclspecOrEmpty> <ID> <Inheritance> '{' <Struct> '}'
         | union <ID>
         | union '{' <Struct> '}' 
         | union <ID> '{' <Struct> '}'
         | enum <ID>
         | enum <ID> '{' <Enum> '}'
         | enum '{' <Enum> '}'
         | <ID>

<Sign> ::= signed 
         | unsigned

<Scalar> ::= char
           | int
           | short
           | long
           | short int
           | long int
           | float
           | double
           | void    
           | __int64
           | long long
           | long double

<Pointers> ::= '*' <Pointers>
             | '*' <Pointers> '__ptr64'
             | '&' <Pointers>
             | <ModList> '*' <Pointers>
             | <ModList>
             |

! ===================================================================
! Expressions
! ===================================================================

<Expr> ::= <Expr> ',' <Op Assign>   
         | <Op Assign>

<Op Assign> ::= <Op If> '='   <Op Assign>
              | <Op If> '+='  <Op Assign>
              | <Op If> '-='  <Op Assign>
              | <Op If> '*='  <Op Assign>
              | <Op If> '/='  <Op Assign>
              | <Op If> '^='  <Op Assign>
              | <Op If> '&='  <Op Assign>
              | <Op If> '|='  <Op Assign>
              | <Op If> '>>=' <Op Assign>
              | <Op If> '<<=' <Op Assign>
              | <Op If>

<Op If> ::= <Op Or> '?' <Op If> ':' <Op If>
          | <Op Or>

<Op Or> ::= <Op Or> '||' <Op And>
          | <Op And>

<Op And> ::= <Op And> '&&' <Op BinOR>
           | <Op BinOR>

<Op BinOR> ::= <Op BinOr> '|' <Op BinXOR>
             | <Op BinXOR>

<Op BinXOR> ::= <Op BinXOR> '^' <Op BinAND>
              | <Op BinAND>

<Op BinAND> ::= <Op BinAND> '&' <Op Equate>
              | <Op Equate>

<Op Equate> ::= <Op Equate> '==' <Op Compare>
              | <Op Equate> '!=' <Op Compare>
              | <Op Compare>

<Op Compare> ::= <Op Compare> '<'  <Op Shift>
               | <Op Compare> '>'  <Op Shift>
               | <Op Compare> '<=' <Op Shift>
               | <Op Compare> '>=' <Op Shift>
               | <Op Shift>

<Op Shift> ::= <Op Shift> '<<' <Op Add>
             | <Op Shift> '>>' <Op Add>
             | <Op Add>

<Op Add> ::= <Op Add> '+' <Op Mult>
           | <Op Add> '-' <Op Mult>
           | <Op Mult>

<Op Mult> ::= <Op Mult> '*' <Op Unary>
            | <Op Mult> '/' <Op Unary>
            | <Op Mult> '%' <Op Unary>
            | <Op Unary>

<Op Unary> ::= '!' <Op Unary>
             | '~' <Op Unary>   
             | '-' <Op Unary>
             | '*' <Op Unary>
             | '&' <Op Unary>               
             | '++' <Op Unary>
             | '--' <Op Unary>
             | <Op Pointer> '++'
             | <Op Pointer> '--'
             | '(' <ID> ')' <Op Unary>   !CAST
             | '(' <ID> '*' ')' <Op Unary>   !CAST
             | '(' <Scalar> ')' <Op Unary>
             | sizeof '(' <Type> ')'
             | sizeof '(' <ID> <Pointers> ')'
             | <Op Pointer>

<Op Pointer> ::= <Op Pointer> '.' <ID>
               | <Op Pointer> '->' <ID>
               | <Op Pointer> '[' <Expr> ']'
               | <Value>

<Value> ::= OctLiteral
          | HexLiteral
          | DecLiteral  
          | StringLiteral
          | CharLiteral
          | FloatLiteral
          | <ID>
          | '(' <Expr> ')'
