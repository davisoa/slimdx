<?xml version="1.0" encoding="utf-8"?>
<topic id="443ed878-a18a-4ddc-ac88-c0f124ff0495" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        Applications that utilize Direct3D for rendering often wish to continuously draw frames as fast as possible. This is in direct conflict
        to the normal message passing method utilized by Windows to handing painting and updating. If the right procedure isn't followed,
        applications can end up with improperly behaving forms, suboptimal performance, or both.
      </para>
    </introduction>

    <section>
      <title>The Paint Loop</title>

      <content>
        <para>
          Running a message loop is required for any application that wishes to have windows that respond to user events. The typical Windows Forms
          application uses Application.Run to pump messages continuously for a given form, whereas the typical Direct3D application wants to have
          a continous loop to render frames. There are several methods that can be used to consolidate these two conflicting paradigms, some of which
          are more useful than others.
        </para>
        <para>
          One of the most naive ways that people tend to use to get a continous stream of render calls is to hijack the Windows paint messages
          and ensure that they are continously generated. This could look something like this:
          <code language="C#">
protected override void OnPaint(PaintEventArgs e)
{
    base.OnPaint(e);
    RenderFrame();    // do rendering
    Invalidate();     // ensure that OnPaint is called again right away
}
          </code>
          The problem with this is two fold. First, Invalidate ends up making several small allocations to handle the wiring of the events. Normally this
          isn't a problem for the .NET garbage collector, but when you're calling it continously throughout the life of your application, the little
          extra garbage can add extra strain that isn't needed. The second problem is that you're hijacking an operating system process that is designed
          to handle painting of windows only every once in a while. It simply isn't designed to handle continous painting and repainting, and you're going to see
          some overhead from redrawing the window at every possible opportunity. 
        </para>
      </content>
    </section>

    <section>
      <title>Application.DoEvents</title>

      <content>
        <para>
          The second method often employed to pump messages is the Application.DoEvents method. This method, when called, handles all pending window messages and
          then immediately returned. Here is what such a method would look like:
          <code language="C#">
while (Running)
{
    RenderFrame();
    Application.DoEvents();    // handle any pending window messages
}
          </code>
          This code has the advantage of avoiding the painting process for windows, is simple, and lets you render continuously while still handling any incoming
          window messages. Unfortunately, as shown by
          <externalLink>
            <linkText>Tom Miller</linkText>
            <linkUri>http://blogs.msdn.com/tmiller/archive/2003/11/07/57524.aspx</linkUri>
          </externalLink>, DoEvents still ends up allocating each call, which can increase the frequency of garbage collections. While gen0 collections of short lived
          temporaries are quite fast, having them often can promote your own short-lived objects into gen1, which will be detrimental to performance.
        </para>
      </content>
    </section>

    <section>
      <title>The Solution</title>
    </section>

    <content>
      <para>
        The solution to this dilema is to use interop to directly call into Win32 methods to bypass any allocations on the managed side. Once again Tom Miller provides
        an example and an overview of this solution in his
        <externalLink>
        <linkText>blog</linkText>
        <linkUri>http://blogs.msdn.com/tmiller/archive/2005/05/05/415008.aspx</linkUri>
      </externalLink>. While this method isn't as simple as the others, it is certainly the most optimal in terms of speed and memory usage. This method was the preferred
      method for all of the now-deprecated MDX samples, and is the preferred method for SlimDX.
      </para>
      <para>
        In order to reduce some of the tediousness and ugliness of using P/Invoke in every application to get access to the PeekMessage function, SlimDX provides
        a thin wrapper in the form of <codeEntityReference>T:SlimDX.Windows.MessagePump</codeEntityReference>. This class provides a Run method that takes your main
        form and a delegate to call during each frame of your main loop. This allows you to structure your application like this:
        <code language="C#">
MessagePump.Run(form, RenderFrame);
        </code>
        So now this method is not only the most optimal in terms of speed and memory usage, but it is also the simplest. All SlimDX samples will utilize this
        method for their message loops.
      </para>
    </content>
  </developerConceptualDocument>
</topic>