<?xml version="1.0" encoding="utf-8"?>
<topic id="ce2c6a61-a922-43bf-85f4-7888fb8971b9" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        No matter how careful and thorough you are in checking your dependencies and installing them correctly, it is important to test your deployment process fully.
        Development systems are inappropriate for this purpose, because they typically have a wide range of libraries and versions installed, and installer bugs are basically impossible to catch on these systems.
        However, setting up a fresh system is expensive, time consuming, and generally a waste of resources.
        The SlimDX team uses virtual machine based testing instead, which has a number of advantages.
      </para>
    </introduction>

    <section>
      <title>Virtual Machine Software</title>

      <content>
        <para>
          Popular virtual machine software includes VMWare and Virtual PC; we recommend the latter, because Microsoft has made XP and Vista VPC images
          <externalLink>
            <linkText>available for download</linkText>
            <linkUri>http://www.microsoft.com/downloads/details.aspx?familyid=21eabb90-958f-4b64-b5f1-73d0a413c8ef&amp;displaylang=en</linkUri>
          </externalLink>.
          These images are mainly intended for testing websites against various versions of Internet Explorer, and they're time bombed so you will need to re-download them periodically.
          They represent essentially blank installations of the operating systems, and make excellent test beds for installers.
          A number of significant bugs were uncovered during the development of the initial SlimDX runtime installer by using these images.
          It's strongly recommended that you perform this type of testing before unleashing an installer in the wild; this will avoid many headaches later where installation fails inexplicably on users' systems.
          Virtual PC is also
          <externalLink>
            <linkText>available for free</linkText>
            <linkUri>http://www.microsoft.com/windows/products/winfamily/virtualpc/default.mspx</linkUri>
          </externalLink>.
        </para>
        <para>
          Virtual PC has a number of useful features that make it a very effective testing tool.
          It supports drag-drop and clipboard integration, including file transfers.
          Putting your installer on the virtual system is a simple matter of dragging it from an Explorer window on your system to an Explorer window on the virtual one.
          Also useful is the undo disk support, which needs to be explicitly enabled when you create the virtual machine in Virtual PC.
          This feature allows you to make a bunch of changes to a virtual machine, and then turn it off and have it revert to a pristine state.
          It's extraordinarily useful to recheck partial configurations, especially when baseline configuration such as installing .NET takes a very long time.
          Undo disks were critical to iterating quickly on the SlimDX installer.
        </para>
      </content>
    </section>

    <section>
      <title>Hardware Graphics Acceleration</title>

      <content>
        <para>
          Unfortunately, Virtual PC does not support hardware acceleration of 3D graphics.
          As a result, any attempts to initialize a hardware Direct3D device, regardless of version, will fail.
          Typically the error description is <errorInline>Not Available</errorInline>.
          You are allowed to create a reference device, however the reference device is only available in the debug version of the DirectX runtimes.
          In other words, it can't be used without a full installation of the SDK, which will interfere with testing an installer.
        </para>
        <para>
          For the vast majority of applications, it is not actually necessary to test that it can run and render correctly.
          (At least for the purposes of testing installation and deployment.)
          What is usually checked is simply that all the dependent libraries can actually be loaded cleanly.
          Even though you cannot create a Direct3D device inside a virtual machine system, you can still load the relevant DLLS simply by entering a function that eventually tries to create a Device.
          Actually creating the device is completely unnecessary.
          If you are testing inside a virtual machine, we suggest that you simply inject a call (possibly to Environment.Exit) to terminate the application just before the Direct3D device is created.
          (It's also recommended that you make a note via your logging subsystem that the initialization did not crash but terminated as expected.)
          If you don't see a crash, then you know that the Direct3D and D3DX libraries were loaded successfully, and there should be no installation related problems.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>