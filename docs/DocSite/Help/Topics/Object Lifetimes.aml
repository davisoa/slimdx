<?xml version="1.0" encoding="utf-8"?>
<topic id="598b267f-52e6-4adb-906b-879c0bc8c736" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        In order to function correctly, SlimDX must merge two different paradigms for handling object lifetimes.
        On the native side there is COM, which functions based on a reference counted system utilizing explicit calls to manipulate the reference count.
        On the managed side the runtime uses garbage collection to determine what objects are still alive, and the rest are automatically destroyed.
        SlimDX presents a model that is as close to the managed model as possible, given the restrictions imposed by COM and DirectX on what can be done with objects.
        However, this model is not quite identical, and it's important to understand exactly how object lifetimes must be handled by a SlimDX based application.
      </para>
    </introduction>
    <section>
      <title>Object Creation</title>

      <content>
        <para>
          SlimDX wraps all COM objects in classes that inherit from <codeEntityReference>T:SlimDX.ComObject</codeEntityReference>, and it contains any number of functions and properties that can potentially create one of these objects.
          Some of these are explicit creation functions, such as <codeEntityReference qualifyHint="false">M:SlimDX.Direct3D9.Texture.#ctor(SlimDX.Direct3D9.Device,System.Int32,System.Int32,System.Int32,SlimDX.Direct3D9.Usage,SlimDX.Direct3D9.Format,SlimDX.Direct3D9.Pool)</codeEntityReference> or <codeEntityReference qualifyHint="false">M:SlimDX.Direct3D9.Texture.FromFile(SlimDX.Direct3D9.Device,System.String)</codeEntityReference>.
          However, there are many functions that must internally translate from a native COM object pointer to a SlimDX object reference, such as the <codeEntityReference>P:SlimDX.Direct3D9.Effect.Device</codeEntityReference> property that many SlimDX objects have.
          These implicit creation functions pose a problem, since various instances of unexpected or undesirable behavior can occur if not handled properly.
          In Managed DirectX, as well as earlier iterations of SlimDX, these functions always created a brand new managed object to represent the COM object, and updated its reference count to reflect the new instance.
          Although this is essentially reasonable and correct from the native point of view, it creates significant problems for managed code.
        </para>
        <para>
          If implicit creation functions always spawn a new managed object, it becomes critical to call <codeEntityReference>M:SlimDX.ComObject.Dispose</codeEntityReference> on every single instance of every object, even if there are multiple instances representing the same actual object.
          If any calls are missed, then the COM reference counts no longer balance out, resulting in memory leaks or other types of
          <externalLink>
            <linkText>pathological behavior</linkText>
            <linkUri>http://blogs.msdn.com/tmiller/archive/2003/11/14/57531.aspx</linkUri>
            <linkAlternateText>The downside of using the events</linkAlternateText>
          </externalLink>.
          It also means that calls to members that should be simple get properties will actually modify their underlying object (via the reference count), and that consecutive calls to the same property will not actually return the same object.
          Although you can work around these issues somewhat, this approach to managing objects is basically broken beyond repair.
        </para>
        <para>
          SlimDX solves the problem by maintaining an internal thread-safe table of COM object to SlimDX object mappings.
          When a COM object needs to be wrapped by a SlimDX object, it is first looked up in the table.
          If the table already has an entry, then no new object is created; instead the existing one is returned.
          If it does not exist in the table, it is added and a new SlimDX object is returned.
          When the object is disposed, it is removed from the table.
          All of these cases manipulate the COM object's reference count appropriately, so that for any given COM object, SlimDX is responsible for at most only one of its outstanding references.
          This model of creating objects imposes some negligible management overhead, and almost completely solves the problems discussed here.
          Note that it is still possible for implicit creation to occur; the difference is that it will not occur in the vast majority of cases, and that in the remaining cases it can typically be moved to a single, predictable location rather than being allowed to happen arbitrarily.
        </para>
      </content>
    </section>

    <section>
      <title>Object Destruction</title>

      <content>
        <para>
          It is critical to destroy all of the objects in a DirectX based application correctly, or all kinds of minor and major bugs can begin to appear.
          The normal method for handling object destruction when dealing with managed objects would be via IDisposable and the finalizer.
          While SlimDX objects that wrap COM objects are disposable, they do not provide a finalizer.
          The finalizer can run in a separate thread of its own, which breaks DirectX rules about releasing objects in several situations.
          In Managed DirectX, event hooks were used to catch and handle critical points in the application and to do object cleanup.
          While this approach worked, it could create unexpected behavior, and tended to cover up problematic memory leaks and dependencies.
        </para>
        <para>
          In SlimDX, you must dispose of all your objects explicitly, by yourself, as appropriate.
          It will never attempt to do any kind of automated cleanup.
          Although this is unfortunate and does not really comply with how managed applications should behave, it is by far the best compromise given the circumstances.
          Thanks to the use of an internal table to track objects, this task is much more manageable than it was previously, since the massive proliferation of duplicate object instances is avoided.
          The table can also be used to very quickly and effectively debug problems in object cleanup.
        </para>
        <para>
          Once a SlimDX object has been disposed, it will release its internal COM object pointer and set it to zero, and that instance will become invalid.
          Any attempts to use it will most likely result in a NullPointerException, since it will attempt to use the cleared internal pointer.
          Note that SlimDX functions are not written to check if their parent object has been disposed, so it should not be expected that SlimDX will raise an ObjectDisposedException when this happens.
        </para>
      </content>
    </section>

    <section>
      <title>Ancillary Objects</title>

      <content>
        <para>
          In the past, implicitly created objects that were accessed by the user would present a confusing and inconsistent set of rules for disposal. Since objects created implicitly by
          DirectX are not known to SlimDX, the first time they are accessed they end up as a new entry in the object table. This imposes the requirement that the user dispose of said objects
          when they are finished with them, which violates the .NET principal that you "Dispose What You Create". This situation led to much confusion among SlimDX users, so a solution
          was developed that the SlimDX team refers to as Ancillary Object Tracking.
        </para>
        <para>
          The object table has been extended to include support to track implicitly created objects. This means that internally, whenever an ancillary object is created, SlimDX marks it as such.
          The user no longer has to worry about disposing it when finished. The object table will take care to dispose of it once its parent object is disposed. Only a few such ancillary objects have
          since been identified across the range of DirectX APIs, but now that full support is in place for handling them, any subsequent issues will be dealt with swiftly and consistently.
        </para>
      </content>
    </section>

    <relatedTopics>

    </relatedTopics>
  </developerConceptualDocument>
</topic>