// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Structs for SlimDX2.Direct3D11 namespace.
//     This code was generated by a tool.
//     Date : 10/23/2010 18:54:51
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX2.Direct3D11 {

    
    /// <summary>	
    /// A description of a single element for the input-assembler stage.	
    /// </summary>	
    /// <remarks>	
    /// An input-layout object contains an array of structures, each structure defines one element being read from an input slot. Create an input-layout  object by calling <see cref="SlimDX2.Direct3D11.Device.CreateInputLayout"/>. For an example, see Create an input-layout object.	
    /// </remarks>	
    /// <unmanaged>D3D11_INPUT_ELEMENT_DESC</unmanaged>
    public  partial struct InputElement {	
        
        /// <summary>	
        /// The HLSL semantic associated with this element in a shader input-signature.	
        /// </summary>	
        /// <unmanaged>const char* SemanticName</unmanaged>
        public string SemanticName;
        
        /// <summary>	
        /// The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a  case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic  name matrix, however each of the four component would have different semantic indices (0, 1, 2, and 3).	
        /// </summary>	
        /// <unmanaged>UINT SemanticIndex</unmanaged>
        public int SemanticIndex;
        
        /// <summary>	
        /// The data type of the element data. See <see cref="SlimDX2.DXGI.Format"/>.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// An integer value that identifies the input-assembler (see input slot). Valid values are between 0 and 15, defined in D3D11.h.	
        /// </summary>	
        /// <unmanaged>UINT InputSlot</unmanaged>
        public int InputSlot;
        
        /// <summary>	
        /// Optional. Offset (in bytes) between each element. Use D3D11_APPEND_ALIGNED_ELEMENT for convenience to define the current element directly  after the previous one, including any packing if necessary.	
        /// </summary>	
        /// <unmanaged>UINT AlignedByteOffset</unmanaged>
        public int AlignedByteOffset;
        
        /// <summary>	
        /// Identifies the input data class for a single input slot (see <see cref="SlimDX2.Direct3D11.InputClassification"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_INPUT_CLASSIFICATION InputSlotClass</unmanaged>
        public SlimDX2.Direct3D11.InputClassification InputSlotClass;
        
        /// <summary>	
        /// The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an  element that contains per-vertex data (the slot class is set to D3D11_INPUT_PER_VERTEX_DATA).	
        /// </summary>	
        /// <unmanaged>UINT InstanceDataStepRate</unmanaged>
        public int InstanceDataStepRate;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public IntPtr SemanticName;
            public int SemanticIndex;
            public SlimDX2.DXGI.Format Format;
            public int InputSlot;
            public int AlignedByteOffset;
            public SlimDX2.Direct3D11.InputClassification InputSlotClass;
            public int InstanceDataStepRate;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
                if (this.SemanticName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.SemanticName);		
            }
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.SemanticName = ( @ref.SemanticName == IntPtr.Zero )?null:new string((sbyte*)@ref.SemanticName);
            this.SemanticIndex = @ref.SemanticIndex;
            this.Format = @ref.Format;
            this.InputSlot = @ref.InputSlot;
            this.AlignedByteOffset = @ref.AlignedByteOffset;
            this.InputSlotClass = @ref.InputSlotClass;
            this.InstanceDataStepRate = @ref.InstanceDataStepRate;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.SemanticName = ( this.SemanticName == null )?IntPtr.Zero : Marshal.StringToHGlobalAnsi(this.SemanticName);
            @ref.SemanticIndex = this.SemanticIndex;
            @ref.Format = this.Format;
            @ref.InputSlot = this.InputSlot;
            @ref.AlignedByteOffset = this.AlignedByteOffset;
            @ref.InputSlotClass = this.InputSlotClass;
            @ref.InstanceDataStepRate = this.InstanceDataStepRate;
		
		}
    }
    
    /// <summary>	
    /// Description of a vertex element in a vertex buffer in an output slot.	
    /// </summary>	
    /// <unmanaged>D3D11_SO_DECLARATION_ENTRY</unmanaged>
    public  partial struct StreamOutputElement {	
        
        /// <summary>	
        /// Zero-based, stream number.	
        /// </summary>	
        /// <unmanaged>UINT Stream</unmanaged>
        public int Stream;
        
        /// <summary>	
        /// Type of output element; possible values include: "POSITION", "NORMAL", or "TEXCOORD0". Note that if SemanticName is NULL then  ComponentCount can be greater than 4 and the described entry will be a gap in the stream out where no data will be written. 	
        /// </summary>	
        /// <unmanaged>const char* SemanticName</unmanaged>
        public string SemanticName;
        
        /// <summary>	
        /// Output element's zero-based index. Should be used if, for example, you have more than one texture coordinate stored in each vertex.	
        /// </summary>	
        /// <unmanaged>UINT SemanticIndex</unmanaged>
        public int SemanticIndex;
        
        /// <summary>	
        /// Which component of the entry to begin writing out to. Valid values are 0 to 3. For example, if you only wish to output to the y and z components  of a position, then StartComponent should be 1 and ComponentCount should be 2.	
        /// </summary>	
        /// <unmanaged>BYTE StartComponent</unmanaged>
        public byte StartComponent;
        
        /// <summary>	
        /// The number of components of the entry to write out to. Valid values are 1 to 4. For example, if you only wish to output to the y and z components  of a position, then StartComponent should be 1 and ComponentCount should be 2.  Note that if SemanticName is NULL then  ComponentCount can be greater than 4 and the described entry will be a gap in the stream out where no data will be written.	
        /// </summary>	
        /// <unmanaged>BYTE ComponentCount</unmanaged>
        public byte ComponentCount;
        
        /// <summary>	
        /// The associated stream output buffer that is bound to the pipeline  (see <see cref="SlimDX2.Direct3D11.DeviceContext.StreamOutputStage.SetTargets"/>).  The valid range for OutputSlot is 0 to 3.	
        /// </summary>	
        /// <unmanaged>BYTE OutputSlot</unmanaged>
        public byte OutputSlot;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Stream;
            public IntPtr SemanticName;
            public int SemanticIndex;
            public byte StartComponent;
            public byte ComponentCount;
            public byte OutputSlot;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
                if (this.SemanticName != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.SemanticName);		
            }
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Stream = @ref.Stream;
            this.SemanticName = ( @ref.SemanticName == IntPtr.Zero )?null:new string((sbyte*)@ref.SemanticName);
            this.SemanticIndex = @ref.SemanticIndex;
            this.StartComponent = @ref.StartComponent;
            this.ComponentCount = @ref.ComponentCount;
            this.OutputSlot = @ref.OutputSlot;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Stream = this.Stream;
            @ref.SemanticName = ( this.SemanticName == null )?IntPtr.Zero : Marshal.StringToHGlobalAnsi(this.SemanticName);
            @ref.SemanticIndex = this.SemanticIndex;
            @ref.StartComponent = this.StartComponent;
            @ref.ComponentCount = this.ComponentCount;
            @ref.OutputSlot = this.OutputSlot;
		
		}
    }
    
    /// <summary>	
    /// Defines the dimensions of a viewport.	
    /// </summary>	
    /// <remarks>	
    /// In all cases, Width and Height must be &gt;= 0 and TopLeftX + Width and TopLeftY + Height must be &lt;= D3D11_VIEWPORT_BOUNDS_MAX.Viewport Sizes and Feature Level Support Differences between Direct3D 11 and Direct3D 10:The range for the minimum and maximum viewport size is dependent on the feature level defined by <see cref="SlimDX2.Direct3D.FeatureLevel"/>.Direct3D 11 supports fractional viewports; the parameter types are  floating-point numbers. The feature level, D3D_FEATURE_LEVEL_11_0, supports (D3D11_VIEWPORT_BOUNDS_MIN, D3D11_VIEWPORT_BOUNDS_MAX) values between (-32768, 32,767).Direct3D 10 does not support fractional viewports. The feature levels, D3D_FEATURE_LEVEL_10_1 (or below), supports (D3D10_VIEWPORT_BOUNDS_MIN, D3D10_VIEWPORT_BOUNDS_MAX) values between (-16384, 16383). 	
    /// </remarks>	
    /// <unmanaged>D3D11_VIEWPORT</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct Viewport {	
        
        /// <summary>	
        /// X position of the left hand side of the viewport. Ranges between D3D11_VIEWPORT_BOUNDS_MIN and D3D11_VIEWPORT_BOUNDS_MAX.	
        /// </summary>	
        /// <unmanaged>FLOAT TopLeftX</unmanaged>
        public float TopLeftX;
        
        /// <summary>	
        /// Y position of the top of the viewport. Ranges between D3D11_VIEWPORT_BOUNDS_MIN and D3D11_VIEWPORT_BOUNDS_MAX.	
        /// </summary>	
        /// <unmanaged>FLOAT TopLeftY</unmanaged>
        public float TopLeftY;
        
        /// <summary>	
        /// Width of the viewport.	
        /// </summary>	
        /// <unmanaged>FLOAT Width</unmanaged>
        public float Width;
        
        /// <summary>	
        /// Height of the viewport.	
        /// </summary>	
        /// <unmanaged>FLOAT Height</unmanaged>
        public float Height;
        
        /// <summary>	
        /// Minimum depth of the viewport. Ranges between 0 and 1.	
        /// </summary>	
        /// <unmanaged>FLOAT MinDepth</unmanaged>
        public float MinDepth;
        
        /// <summary>	
        /// Maximum depth of the viewport. Ranges between 0 and 1.	
        /// </summary>	
        /// <unmanaged>FLOAT MaxDepth</unmanaged>
        public float MaxDepth;
    }
    
    /// <summary>	
    /// Defines a 3D box.	
    /// </summary>	
    /// <remarks>	
    /// The following diagram shows a 3D box, where the origin is the left, front, top corner. Diagram of a 3D box, where the origin is the left, front, top corner 	
    /// </remarks>	
    /// <unmanaged>D3D11_BOX</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct ResourceRegion {	
        
        /// <summary>	
        /// The x position of the left hand side of the box.	
        /// </summary>	
        /// <unmanaged>UINT left</unmanaged>
        public int Left;
        
        /// <summary>	
        /// The y position of the top of the box.	
        /// </summary>	
        /// <unmanaged>UINT top</unmanaged>
        public int Top;
        
        /// <summary>	
        /// The z position of the front of the box.	
        /// </summary>	
        /// <unmanaged>UINT front</unmanaged>
        public int Front;
        
        /// <summary>	
        /// The x position of the right hand side of the box.	
        /// </summary>	
        /// <unmanaged>UINT right</unmanaged>
        public int Right;
        
        /// <summary>	
        /// The y position of the bottom of the box.	
        /// </summary>	
        /// <unmanaged>UINT bottom</unmanaged>
        public int Bottom;
        
        /// <summary>	
        /// The z position of the back of the box.	
        /// </summary>	
        /// <unmanaged>UINT back</unmanaged>
        public int Back;
    }
    
    /// <summary>	
    /// Stencil operations that can be performed based on the results of stencil test.	
    /// </summary>	
    /// <remarks>	
    /// All stencil operations are specified as a <see cref="SlimDX2.Direct3D11.StencilOperation"/>. The stencil operation can be set differently based on the outcome of the stencil test (which is referred to as StencilFunc in the stencil test portion of depth-stencil testing.This structure is a member of a {{depth-stencil description}}. 	
    /// </remarks>	
    /// <unmanaged>D3D11_DEPTH_STENCILOP_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct DepthStencilOperationDescription {	
        
        /// <summary>	
        /// The stencil operation to perform when stencil testing fails.	
        /// </summary>	
        /// <unmanaged>D3D11_STENCIL_OP StencilFailOp</unmanaged>
        public SlimDX2.Direct3D11.StencilOperation StencilFailOp;
        
        /// <summary>	
        /// The stencil operation to perform when stencil testing passes and depth testing fails.	
        /// </summary>	
        /// <unmanaged>D3D11_STENCIL_OP StencilDepthFailOp</unmanaged>
        public SlimDX2.Direct3D11.StencilOperation StencilDepthFailOp;
        
        /// <summary>	
        /// The stencil operation to perform when stencil testing and depth testing both pass.	
        /// </summary>	
        /// <unmanaged>D3D11_STENCIL_OP StencilPassOp</unmanaged>
        public SlimDX2.Direct3D11.StencilOperation StencilPassOp;
        
        /// <summary>	
        /// A function that compares stencil data against existing stencil data. The function options are listed in <see cref="SlimDX2.Direct3D11.ComparisonFunction"/>.	
        /// </summary>	
        /// <unmanaged>D3D11_COMPARISON_FUNC StencilFunc</unmanaged>
        public SlimDX2.Direct3D11.ComparisonFunction StencilFunc;
    }
    
    /// <summary>	
    /// Describes depth-stencil state.	
    /// </summary>	
    /// <remarks>	
    /// Depth-stencil state controls how depth-stencil testing is performed by the output-merger stage.The following table shows the default values of depth-stencil states.StateDefault ValueDepthEnableTRUEDepthWriteMaskD3D11_DEPTH_WRITE_MASK_ALLDepthFuncD3D11_COMPARISON_LESSStencilEnableFALSEStencilReadMaskD3D11_DEFAULT_STENCIL_READ_MASKStencilWriteMaskD3D11_DEFAULT_STENCIL_WRITE_MASKStencilFuncD3D11_COMPARISON_ALWAYSStencilDepthFailOpD3D11_STENCIL_OP_KEEPStencilPassOpD3D11_STENCIL_OP_KEEPStencilFailOpD3D11_STENCIL_OP_KEEP The formats that support stenciling are DXGI_FORMAT_D24_UNORM_S8_UINT and DXGI_FORMAT_D32_FLOAT_S8X24_UINT.	
    /// </remarks>	
    /// <unmanaged>D3D11_DEPTH_STENCIL_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct DepthStencilStateDescription {	
        
        /// <summary>	
        /// Enable depth testing.	
        /// </summary>	
        /// <unmanaged>BOOL DepthEnable</unmanaged>
        public bool DepthEnable { 
            get { 
                return (_DepthEnable!=0)?true:false; 
            }
            set { 
                _DepthEnable = value?1:0;
            }
        }
        internal int _DepthEnable;
        
        /// <summary>	
        /// Identify a portion of the depth-stencil buffer that can be modified by depth data (see <see cref="SlimDX2.Direct3D11.DepthWriteMask"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_DEPTH_WRITE_MASK DepthWriteMask</unmanaged>
        public SlimDX2.Direct3D11.DepthWriteMask DepthWriteMask;
        
        /// <summary>	
        /// A function that compares depth data against existing depth data. The function options are listed in <see cref="SlimDX2.Direct3D11.ComparisonFunction"/>.	
        /// </summary>	
        /// <unmanaged>D3D11_COMPARISON_FUNC DepthFunc</unmanaged>
        public SlimDX2.Direct3D11.ComparisonFunction DepthFunc;
        
        /// <summary>	
        /// Enable stencil testing.	
        /// </summary>	
        /// <unmanaged>BOOL StencilEnable</unmanaged>
        public bool StencilEnable { 
            get { 
                return (_StencilEnable!=0)?true:false; 
            }
            set { 
                _StencilEnable = value?1:0;
            }
        }
        internal int _StencilEnable;
        
        /// <summary>	
        /// Identify a portion of the depth-stencil buffer for reading stencil data.	
        /// </summary>	
        /// <unmanaged>UINT8 StencilReadMask</unmanaged>
        public byte StencilReadMask;
        
        /// <summary>	
        /// Identify a portion of the depth-stencil buffer for writing stencil data.	
        /// </summary>	
        /// <unmanaged>UINT8 StencilWriteMask</unmanaged>
        public byte StencilWriteMask;
        
        /// <summary>	
        /// Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera (see <see cref="SlimDX2.Direct3D11.DepthStencilOperationDescription"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_DEPTH_STENCILOP_DESC FrontFace</unmanaged>
        public SlimDX2.Direct3D11.DepthStencilOperationDescription FrontFace;
        
        /// <summary>	
        /// Identify how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera (see <see cref="SlimDX2.Direct3D11.DepthStencilOperationDescription"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_DEPTH_STENCILOP_DESC BackFace</unmanaged>
        public SlimDX2.Direct3D11.DepthStencilOperationDescription BackFace;
    }
    
    /// <summary>	
    /// Describes the blend state for a render target.	
    /// </summary>	
    /// <remarks>	
    /// To see how blending is done, see the output-merger stage.These are the default values for blend state.StateDefault ValueBlendEnableFALSESrcBlendD3D11_BLEND_ONEDestBlendD3D11_BLEND_ZEROBlendOpD3D11_BLEND_OP_ADDSrcBlendAlphaD3D11_BLEND_ONEDestBlendAlphaD3D11_BLEND_ZEROBlendOpAlphaD3D11_BLEND_OP_ADDRenderTargetWriteMaskD3D11_COLOR_WRITE_ENABLE_ALL 	
    /// </remarks>	
    /// <unmanaged>D3D11_RENDER_TARGET_BLEND_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct RenderTargetBlendDescription {	
        
        /// <summary>	
        /// Enable (or disable) blending.	
        /// </summary>	
        /// <unmanaged>BOOL BlendEnable</unmanaged>
        public bool BlendEnable { 
            get { 
                return (_BlendEnable!=0)?true:false; 
            }
            set { 
                _BlendEnable = value?1:0;
            }
        }
        internal int _BlendEnable;
        
        /// <summary>	
        /// This {{blend option}} specifies the first RGB data source and includes an optional pre-blend operation.	
        /// </summary>	
        /// <unmanaged>D3D11_BLEND SrcBlend</unmanaged>
        public SlimDX2.Direct3D11.BlendOption SrcBlend;
        
        /// <summary>	
        /// This {{blend option}} specifies the second RGB data source and includes an optional pre-blend operation.	
        /// </summary>	
        /// <unmanaged>D3D11_BLEND DestBlend</unmanaged>
        public SlimDX2.Direct3D11.BlendOption DestBlend;
        
        /// <summary>	
        /// This {{blend operation}} defines how to combine the RGB data sources.	
        /// </summary>	
        /// <unmanaged>D3D11_BLEND_OP BlendOp</unmanaged>
        public SlimDX2.Direct3D11.BlendOperation BlendOp;
        
        /// <summary>	
        /// This {{blend option}} specifies the first alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed.	
        /// </summary>	
        /// <unmanaged>D3D11_BLEND SrcBlendAlpha</unmanaged>
        public SlimDX2.Direct3D11.BlendOption SrcBlendAlpha;
        
        /// <summary>	
        /// This {{blend option}} specifies the second alpha data source and includes an optional pre-blend operation. Blend options that end in _COLOR are not allowed.	
        /// </summary>	
        /// <unmanaged>D3D11_BLEND DestBlendAlpha</unmanaged>
        public SlimDX2.Direct3D11.BlendOption DestBlendAlpha;
        
        /// <summary>	
        /// This {{blend operation}} defines how to combine the alpha data sources.	
        /// </summary>	
        /// <unmanaged>D3D11_BLEND_OP BlendOpAlpha</unmanaged>
        public SlimDX2.Direct3D11.BlendOperation BlendOpAlpha;
        
        /// <summary>	
        /// A write mask.	
        /// </summary>	
        /// <unmanaged>UINT8 RenderTargetWriteMask</unmanaged>
        public byte RenderTargetWriteMask;
    }
    
    /// <summary>	
    /// Describes the blend state.	
    /// </summary>	
    /// <remarks>	
    /// These are the default values for blend state.StateDefault ValueAlphaToCoverageEnableFALSEIndependentBlendEnableFALSERenderTarget[0].BlendEnableFALSERenderTarget[0].SrcBlendD3D11_BLEND_ONERenderTarget[0].DestBlendD3D11_BLEND_ZERORenderTarget[0].BlendOpD3D11_BLEND_OP_ADDRenderTarget[0].SrcBlendAlphaD3D11_BLEND_ONERenderTarget[0].DestBlendAlphaD3D11_BLEND_ZERORenderTarget[0].BlendOpAlphaD3D11_BLEND_OP_ADDRenderTarget[0].RenderTargetWriteMaskD3D11_COLOR_WRITE_ENABLE_ALL Note that D3D11_BLEND_DESC is identical to {{D3D10_BLEND_DESC1}}.If the driver type is set to <see cref="SlimDX2.Direct3D.DriverType.Hardware"/>, the feature level is set to less than or equal to <see cref="SlimDX2.Direct3D.FeatureLevel.Level_9_3"/>, and the pixel format of the render target is set to <see cref="SlimDX2.DXGI.Format.R8G8B8A8_UNorm_SRgb"/>, DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, or DXGI_FORMAT_B8G8R8X8_UNORM_SRGB, the display device performs the blend in standard RGB (sRGB) space and not in linear space. However, if the feature level is set to greater than D3D_FEATURE_LEVEL_9_3, the display device performs the blend in linear space.	
    /// </remarks>	
    /// <unmanaged>D3D11_BLEND_DESC</unmanaged>
    public  partial struct BlendStateDescription {	
        
        /// <summary>	
        /// Determines whether or not to use alpha-to-coverage as a multisampling technique when setting a pixel to a rendertarget.	
        /// </summary>	
        /// <unmanaged>BOOL AlphaToCoverageEnable</unmanaged>
        public bool AlphaToCoverageEnable { 
            get { 
                return (_AlphaToCoverageEnable!=0)?true:false; 
            }
            set { 
                _AlphaToCoverageEnable = value?1:0;
            }
        }
        internal int _AlphaToCoverageEnable;
        
        /// <summary>	
        /// Set to TRUE to enable independent blending in simultaneous render targets.  If set to FALSE, only the RenderTarget[0] members are used. RenderTarget[1..7] are ignored.	
        /// </summary>	
        /// <unmanaged>BOOL IndependentBlendEnable</unmanaged>
        public bool IndependentBlendEnable { 
            get { 
                return (_IndependentBlendEnable!=0)?true:false; 
            }
            set { 
                _IndependentBlendEnable = value?1:0;
            }
        }
        internal int _IndependentBlendEnable;
        
        /// <summary>	
        /// An array of render-target-blend descriptions (see <see cref="SlimDX2.Direct3D11.RenderTargetBlendDescription"/>); these correspond to the eight rendertargets  that can be set to the output-merger stage at one time.	
        /// </summary>	
        /// <unmanaged>D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8]</unmanaged>
        public SlimDX2.Direct3D11.RenderTargetBlendDescription[] RenderTarget { 
            get { 
                if (_RenderTarget == null) {
                    _RenderTarget = new SlimDX2.Direct3D11.RenderTargetBlendDescription[8];
                }
                return _RenderTarget; 
            }
        }
        internal SlimDX2.Direct3D11.RenderTargetBlendDescription[] _RenderTarget;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int _AlphaToCoverageEnable;
            public int _IndependentBlendEnable;
            public SlimDX2.Direct3D11.RenderTargetBlendDescription RenderTarget;
            SlimDX2.Direct3D11.RenderTargetBlendDescription __RenderTarget1;
            SlimDX2.Direct3D11.RenderTargetBlendDescription __RenderTarget2;
            SlimDX2.Direct3D11.RenderTargetBlendDescription __RenderTarget3;
            SlimDX2.Direct3D11.RenderTargetBlendDescription __RenderTarget4;
            SlimDX2.Direct3D11.RenderTargetBlendDescription __RenderTarget5;
            SlimDX2.Direct3D11.RenderTargetBlendDescription __RenderTarget6;
            SlimDX2.Direct3D11.RenderTargetBlendDescription __RenderTarget7;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this._AlphaToCoverageEnable = @ref._AlphaToCoverageEnable;
            this._IndependentBlendEnable = @ref._IndependentBlendEnable;
            fixed (void* __to = &this.RenderTarget[0]) fixed (void* __from = &@ref.RenderTarget) SlimDX2.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 8*sizeof ( SlimDX2.Direct3D11.RenderTargetBlendDescription));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref._AlphaToCoverageEnable = this._AlphaToCoverageEnable;
            @ref._IndependentBlendEnable = this._IndependentBlendEnable;
            fixed (void* __to = &@ref.RenderTarget) fixed (void* __from = &this.RenderTarget[0]) SlimDX2.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 8*sizeof ( SlimDX2.Direct3D11.RenderTargetBlendDescription));
		
		}
    }
    
    /// <summary>	
    /// Describes rasterizer state.	
    /// </summary>	
    /// <remarks>	
    /// Rasterizer state defines the behavior of the rasterizer stage; to set rasterizer state, call <see cref="SlimDX2.Direct3D11.DeviceContext.RasterizerStage.SetState"/>.These are the default values for rasterizer state.StateDefault ValueFillModeSolidCullModeBackFrontCounterClockwiseFALSEDepthBias0SlopeScaledDepthBias0.0fDepthBiasClamp0.0fDepthClipEnableTRUEScissorEnableFALSEMultisampleEnableFALSEAntialiasedLineEnableFALSE 	
    /// </remarks>	
    /// <unmanaged>D3D11_RASTERIZER_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct RasterizerStateDescription {	
        
        /// <summary>	
        /// Determines the fill mode to use when rendering (see <see cref="SlimDX2.Direct3D11.FillMode"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_FILL_MODE FillMode</unmanaged>
        public SlimDX2.Direct3D11.FillMode FillMode;
        
        /// <summary>	
        /// Indicates triangles facing the specified direction are not drawn (see <see cref="SlimDX2.Direct3D11.CullMode"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_CULL_MODE CullMode</unmanaged>
        public SlimDX2.Direct3D11.CullMode CullMode;
        
        /// <summary>	
        /// Determines if a triangle is front- or back-facing. If this parameter is true, then a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If this parameter is false then the opposite is true.	
        /// </summary>	
        /// <unmanaged>BOOL FrontCounterClockwise</unmanaged>
        public bool FrontCounterClockwise { 
            get { 
                return (_FrontCounterClockwise!=0)?true:false; 
            }
            set { 
                _FrontCounterClockwise = value?1:0;
            }
        }
        internal int _FrontCounterClockwise;
        
        /// <summary>	
        /// Depth value added to a given pixel.	
        /// </summary>	
        /// <unmanaged>INT DepthBias</unmanaged>
        public int DepthBias;
        
        /// <summary>	
        /// Maximum depth bias of a pixel.	
        /// </summary>	
        /// <unmanaged>FLOAT DepthBiasClamp</unmanaged>
        public float DepthBiasClamp;
        
        /// <summary>	
        /// Scalar on a given pixel's slope.	
        /// </summary>	
        /// <unmanaged>FLOAT SlopeScaledDepthBias</unmanaged>
        public float SlopeScaledDepthBias;
        
        /// <summary>	
        /// Enable clipping based on distance.	
        /// </summary>	
        /// <unmanaged>BOOL DepthClipEnable</unmanaged>
        public bool DepthClipEnable { 
            get { 
                return (_DepthClipEnable!=0)?true:false; 
            }
            set { 
                _DepthClipEnable = value?1:0;
            }
        }
        internal int _DepthClipEnable;
        
        /// <summary>	
        /// Enable scissor-rectangle culling. All pixels ouside an active scissor rectangle are culled.	
        /// </summary>	
        /// <unmanaged>BOOL ScissorEnable</unmanaged>
        public bool ScissorEnable { 
            get { 
                return (_ScissorEnable!=0)?true:false; 
            }
            set { 
                _ScissorEnable = value?1:0;
            }
        }
        internal int _ScissorEnable;
        
        /// <summary>	
        /// Enable multisample antialiasing.	
        /// </summary>	
        /// <unmanaged>BOOL MultisampleEnable</unmanaged>
        public bool MultisampleEnable { 
            get { 
                return (_MultisampleEnable!=0)?true:false; 
            }
            set { 
                _MultisampleEnable = value?1:0;
            }
        }
        internal int _MultisampleEnable;
        
        /// <summary>	
        /// Enable line antialiasing; only applies if doing line drawing and MultisampleEnable is false.	
        /// </summary>	
        /// <unmanaged>BOOL AntialiasedLineEnable</unmanaged>
        public bool AntialiasedLineEnable { 
            get { 
                return (_AntialiasedLineEnable!=0)?true:false; 
            }
            set { 
                _AntialiasedLineEnable = value?1:0;
            }
        }
        internal int _AntialiasedLineEnable;
    }
    
    /// <summary>	
    /// Specifies data for initializing a subresource.	
    /// </summary>	
    /// <remarks>	
    /// This structure is used in calls to create buffers (<see cref="SlimDX2.Direct3D11.Device.CreateBuffer"/>) and  textures (<see cref="SlimDX2.Direct3D11.Device.CreateTexture1D"/>, <see cref="SlimDX2.Direct3D11.Device.CreateTexture2D"/>,  and <see cref="SlimDX2.Direct3D11.Device.CreateTexture3D"/>). If the resource being created does not require a system-memory pitch or a system-memory-pitch  slice, then you are free to use those members to pass size information which may help you when debugging a problem creating a resource.Note that an application should not rely on SysMemPitch being exactly equal to the number of texels in a line times the size of a texel. In some cases SysMemPitch will include padding to skip past additional data in a line.  This could be padding for alignment or  the texture could be a subsection of a larger texture.  For example the D3D11_SUBRESOURCE_DATA structure could represent a 32 by 32 subsection of a 128 by 128 texture.   The value for SysMemSlicePitch will reflect any padding included in SysMemPitch.	
    /// </remarks>	
    /// <unmanaged>D3D11_SUBRESOURCE_DATA</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    internal  partial struct SubResourceData {	
        
        /// <summary>	
        /// Pointer to the initialization data.	
        /// </summary>	
        /// <unmanaged>const void* pSysMem</unmanaged>
        public IntPtr DataPointer;
        
        /// <summary>	
        /// The distance (in bytes) from the beginning of one line of a texture to the next line.   System-memory pitch is used only for 2D and 3D texture data as it is has no meaning for the other resource types.	
        /// </summary>	
        /// <unmanaged>UINT SysMemPitch</unmanaged>
        public int Pitch;
        
        /// <summary>	
        /// The distance (in bytes) from the beginning of one depth level to the next.   System-memory-slice pitch is only used for 3D texture data as it has no meaning for the other resource types.	
        /// </summary>	
        /// <unmanaged>UINT SysMemSlicePitch</unmanaged>
        public int SlicePitch;
    }
    
    /// <summary>	
    /// Provides access to subresource data.	
    /// </summary>	
    /// <remarks>	
    /// This structure is used in a call to <see cref="SlimDX2.Direct3D11.DeviceContext.Map"/>.	
    /// </remarks>	
    /// <unmanaged>D3D11_MAPPED_SUBRESOURCE</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    internal  partial struct MappedSubResource {	
        
        /// <summary>	
        /// Pointer to the data. When <see cref="SlimDX2.Direct3D11.DeviceContext.Map"/> provides the pointer, the runtime ensures that the pointer has a specific alignment, depending on the following feature levels:For <see cref="SlimDX2.Direct3D.FeatureLevel.Level_10_0"/> and higher, the pointer is aligned to 16 bytes.For lower than <see cref="SlimDX2.Direct3D.FeatureLevel.Level_10_0"/>, the pointer is aligned to 4 bytes.	
        /// </summary>	
        /// <unmanaged>void* pData</unmanaged>
        public IntPtr PData;
        
        /// <summary>	
        /// The row pitch, or width, or physical size (in bytes) of the data.	
        /// </summary>	
        /// <unmanaged>UINT RowPitch</unmanaged>
        public int RowPitch;
        
        /// <summary>	
        /// The depth pitch, or width, or physical size (in bytes)of the data.	
        /// </summary>	
        /// <unmanaged>UINT DepthPitch</unmanaged>
        public int DepthPitch;
    }
    
    /// <summary>	
    /// Describes a buffer resource.	
    /// </summary>	
    /// <remarks>	
    /// This structure is used by <see cref="SlimDX2.Direct3D11.Device.CreateBuffer"/> to create buffer resources.In addition to this structure, there is also a derived structure in D3D11.h (CD3D11_BUFFER_DESC) which behaves like an inherited class to help create a buffer description.If the bind flag is D3D11_BIND_CONSTANT_BUFFER then the ByteWidth value must be in multiples of 16, and less than or equal to D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT.	
    /// </remarks>	
    /// <unmanaged>D3D11_BUFFER_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct BufferDescription {	
        
        /// <summary>	
        /// Size of the buffer in bytes.	
        /// </summary>	
        /// <unmanaged>UINT ByteWidth</unmanaged>
        public int SizeInBytes;
        
        /// <summary>	
        /// Identify how the buffer is expected to be read from and written to. Frequency of update is a key factor. The most common value is typically D3D11_USAGE_DEFAULT; see <see cref="SlimDX2.Direct3D11.ResourceUsage"/> for all possible values.	
        /// </summary>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>
        public SlimDX2.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// Identify how the buffer will be bound to the pipeline. Flags (see <see cref="SlimDX2.Direct3D11.BindFlags"/>) can be combined with a logical OR.	
        /// </summary>	
        /// <unmanaged>UINT BindFlags</unmanaged>
        public SlimDX2.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// CPU access flags (see <see cref="SlimDX2.Direct3D11.CpuAccessFlags"/>) or 0 if no CPU access is necessary. Flags can be combined with a logical OR.	
        /// </summary>	
        /// <unmanaged>UINT CPUAccessFlags</unmanaged>
        public SlimDX2.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// Miscellaneous flags (see <see cref="SlimDX2.Direct3D11.ResourceOptionFlags"/>) or 0 if unused. Flags can be combined with a logical OR.	
        /// </summary>	
        /// <unmanaged>UINT MiscFlags</unmanaged>
        public SlimDX2.Direct3D11.ResourceOptionFlags OptionFlags;
        
        /// <summary>	
        /// The size of the structure (in bytes) when it represents a structured buffer.	
        /// </summary>	
        /// <unmanaged>UINT StructureByteStride</unmanaged>
        public int StructureByteStride;
    }
    
    /// <summary>	
    /// Describes a 1D texture.	
    /// </summary>	
    /// <remarks>	
    /// This structure is used in a call to <see cref="SlimDX2.Direct3D11.Device.CreateTexture1D"/>. A helpful derived structure CD3D11_TEXTURE1D_DESC is declared in D3D11.h, to help create a texture description.	
    /// </remarks>	
    /// <unmanaged>D3D11_TEXTURE1D_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct Texture1DDescription {	
        
        /// <summary>	
        /// Texture width (in texels). The  range is from 1 to D3D11_REQ_TEXTURE1D_U_DIMENSION (16384).	
        /// </summary>	
        /// <unmanaged>UINT Width</unmanaged>
        public int Width;
        
        /// <summary>	
        /// The maximum number of mipmap levels in the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.	
        /// </summary>	
        /// <unmanaged>UINT MipLevels</unmanaged>
        public int MipLevels;
        
        /// <summary>	
        /// Number of textures in the array. The  range is from 1 to D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION (2048).	
        /// </summary>	
        /// <unmanaged>UINT ArraySize</unmanaged>
        public int ArraySize;
        
        /// <summary>	
        /// Texture format (see <see cref="SlimDX2.DXGI.Format"/>).	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// Value that identifies how the texture is to be read from and written to. The most common value is D3D11_USAGE-DEFAULT; see <see cref="SlimDX2.Direct3D11.ResourceUsage"/> for all possible values.	
        /// </summary>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>
        public SlimDX2.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// Flags (see <see cref="SlimDX2.Direct3D11.BindFlags"/>) for binding to pipeline stages. The flags can be combined by a logical OR. For a 1D texture, the allowable values are: D3D11_BIND_SHADER_RESOURCE, D3D11_BIND_RENDER_TARGET and D3D11_BIND_DEPTH_STENCIL.	
        /// </summary>	
        /// <unmanaged>UINT BindFlags</unmanaged>
        public SlimDX2.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// Flags (see <see cref="SlimDX2.Direct3D11.CpuAccessFlags"/>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR.	
        /// </summary>	
        /// <unmanaged>UINT CPUAccessFlags</unmanaged>
        public SlimDX2.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// Flags (see <see cref="SlimDX2.Direct3D11.ResourceOptionFlags"/>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR.	
        /// </summary>	
        /// <unmanaged>UINT MiscFlags</unmanaged>
        public SlimDX2.Direct3D11.ResourceOptionFlags OptionFlags;
    }
    
    /// <summary>	
    /// Describes a 2D texture.	
    /// </summary>	
    /// <remarks>	
    /// This structure is used in a call to <see cref="SlimDX2.Direct3D11.Device.CreateTexture2D"/>. A helpful derived structure CD3D11_TEXTURE2D_DESC is declared in D3D11.h, to help create a texture description.The device places some size restrictions (must be multiples of a minimum size) for a subsampled, block compressed, or bit-format resource.	
    /// </remarks>	
    /// <unmanaged>D3D11_TEXTURE2D_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct Texture2DDescription {	
        
        /// <summary>	
        /// Texture width (in texels). The  range is from 1 to D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION (16384). For a texture cube-map, the  range is from 1 to D3D11_REQ_TEXTURECUBE_DIMENSION (16384). For more information about restrictions, see Remarks.	
        /// </summary>	
        /// <unmanaged>UINT Width</unmanaged>
        public int Width;
        
        /// <summary>	
        /// Texture height (in texels). The  range is from 1 to D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION (16384). For a texture cube-map, the  range is from 1 to D3D11_REQ_TEXTURECUBE_DIMENSION (16384). For more information about restrictions, see Remarks.	
        /// </summary>	
        /// <unmanaged>UINT Height</unmanaged>
        public int Height;
        
        /// <summary>	
        /// The maximum number of mipmap levels in the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.	
        /// </summary>	
        /// <unmanaged>UINT MipLevels</unmanaged>
        public int MipLevels;
        
        /// <summary>	
        /// Number of textures in the texture array. The  range is from 1 to D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION (2048). For a texture cube-map, this value is a multiple of 6 (that is, 6 times the value in the NumCubes member of <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource"/>), and the  range is from 6 to D3D11_REQ_TEXTURECUBE_DIMENSION.	
        /// </summary>	
        /// <unmanaged>UINT ArraySize</unmanaged>
        public int ArraySize;
        
        /// <summary>	
        /// Texture format (see <see cref="SlimDX2.DXGI.Format"/>).	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// Structure that specifies multisampling parameters for the texture. See <see cref="SlimDX2.DXGI.SampleDescription"/>.	
        /// </summary>	
        /// <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>
        public SlimDX2.DXGI.SampleDescription SampleDescription;
        
        /// <summary>	
        /// Value that identifies how the texture is to be read from and written to. The most common value is D3D11_USAGE-DEFAULT; see <see cref="SlimDX2.Direct3D11.ResourceUsage"/> for all possible values.	
        /// </summary>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>
        public SlimDX2.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// Flags (see <see cref="SlimDX2.Direct3D11.BindFlags"/>) for binding to pipeline stages. The flags can be combined by a logical OR.	
        /// </summary>	
        /// <unmanaged>UINT BindFlags</unmanaged>
        public SlimDX2.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// Flags (see <see cref="SlimDX2.Direct3D11.CpuAccessFlags"/>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR.	
        /// </summary>	
        /// <unmanaged>UINT CPUAccessFlags</unmanaged>
        public SlimDX2.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// Flags (see <see cref="SlimDX2.Direct3D11.ResourceOptionFlags"/>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined by using a logical OR. For a texture cube-map, set the <see cref="SlimDX2.Direct3D11.ResourceOptionFlags.Texturecube"/> flag. Cube-map arrays (that is, ArraySize &gt; 6) require feature level <see cref="SlimDX2.Direct3D.FeatureLevel.Level_10_1"/> or higher.	
        /// </summary>	
        /// <unmanaged>UINT MiscFlags</unmanaged>
        public SlimDX2.Direct3D11.ResourceOptionFlags OptionFlags;
    }
    
    /// <summary>	
    /// Describes a 3D texture.	
    /// </summary>	
    /// <remarks>	
    /// This structure is used in a call to <see cref="SlimDX2.Direct3D11.Device.CreateTexture3D"/>. A helpful derived structure CD3D11_TEXTURE3D_DESC is declared in D3D11.h, to help create a texture description.The device restricts the size of subsampled, block compressed, and bit format resources to be multiples of sizes specific to each format.	
    /// </remarks>	
    /// <unmanaged>D3D11_TEXTURE3D_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct Texture3DDescription {	
        
        /// <summary>	
        /// Texture width (in texels). The  range is from 1 to D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). For more information about restrictions, see Remarks.	
        /// </summary>	
        /// <unmanaged>UINT Width</unmanaged>
        public int Width;
        
        /// <summary>	
        /// Texture height (in texels). The  range is from 1 to D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048). For more information about restrictions, see Remarks.	
        /// </summary>	
        /// <unmanaged>UINT Height</unmanaged>
        public int Height;
        
        /// <summary>	
        /// Texture depth (in texels). The  range is from 1 to D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION (2048).	
        /// </summary>	
        /// <unmanaged>UINT Depth</unmanaged>
        public int Depth;
        
        /// <summary>	
        /// The maximum number of mipmap levels in the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Use 1 for a multisampled texture; or 0 to generate a full set of subtextures.	
        /// </summary>	
        /// <unmanaged>UINT MipLevels</unmanaged>
        public int MipLevels;
        
        /// <summary>	
        /// Texture format (see <see cref="SlimDX2.DXGI.Format"/>).	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// Value that identifies how the texture is to be read from and written to. The most common value is D3D11_USAGE-DEFAULT; see <see cref="SlimDX2.Direct3D11.ResourceUsage"/> for all possible values.	
        /// </summary>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>
        public SlimDX2.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// Flags (see <see cref="SlimDX2.Direct3D11.BindFlags"/>) for binding to pipeline stages. The flags can be combined by a logical OR.	
        /// </summary>	
        /// <unmanaged>UINT BindFlags</unmanaged>
        public SlimDX2.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// Flags (see <see cref="SlimDX2.Direct3D11.CpuAccessFlags"/>) to specify the types of CPU access allowed. Use 0 if CPU access is not required. These flags can be combined with a logical OR.	
        /// </summary>	
        /// <unmanaged>UINT CPUAccessFlags</unmanaged>
        public SlimDX2.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// Flags (see <see cref="SlimDX2.Direct3D11.ResourceOptionFlags"/>) that identify other, less common resource options. Use 0 if none of these flags apply. These flags can be combined with a logical OR.	
        /// </summary>	
        /// <unmanaged>UINT MiscFlags</unmanaged>
        public SlimDX2.Direct3D11.ResourceOptionFlags OptionFlags;
    }
    
    /// <summary>	
    /// Describes a shader-resource view.	
    /// </summary>	
    /// <remarks>	
    /// A view is a format-specific way to look at the data in a resource. The view determines what data to look at, and how it is cast when read.When viewing a resource, the resource-view description must specify a typed format, that is compatible with the resource format. So that means that you cannot create a resource-view description using any format with _TYPELESS in the name. You can however view a typeless resource by specifying a typed format for the view. For example, a DXGI_FORMAT_R32G32B32_TYPELESS resource can be viewed with one of these typed formats: DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32_UINT, and DXGI_FORMAT_R32G32B32_SINT, since these typed formats are compatible with the typeless resource.Create a shader-resource-view description by calling <see cref="SlimDX2.Direct3D11.Device.CreateShaderResourceView"/>. To view a shader-resource-view description, call <see cref="SlimDX2.Direct3D11.ShaderResourceView.GetDescription"/>.	
    /// </remarks>	
    /// <unmanaged>D3D11_SHADER_RESOURCE_VIEW_DESC</unmanaged>
    [StructLayout(LayoutKind.Explicit, Pack = 0 )]
    public  partial struct ShaderResourceViewDescription {	
        
        /// <summary>	
        /// Specifies the elements in a buffer resource to use in a shader-resource view.	
        /// </summary>	
        /// <remarks>	
        /// The D3D11_BUFFER_SRV structure is a member of the  <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription"/> structure, which represents a shader-resource view description. You can create a shader-resource view by calling the <see cref="SlimDX2.Direct3D11.Device.CreateShaderResourceView"/> method.	
        /// </remarks>	
        /// <unmanaged>D3D11_BUFFER_SRV</unmanaged>
        [StructLayout(LayoutKind.Explicit, Pack = 0 )]
        public  partial struct BufferResource {	
            
            /// <summary>	
            /// The offset of the first element in the view to access, relative to element 0.	
            /// </summary>	
            /// <unmanaged>UINT FirstElement</unmanaged>
            [FieldOffset(0)]
            public int FirstElement;
            
            /// <summary>	
            /// The total number of elements in the view.	
            /// </summary>	
            /// <unmanaged>UINT ElementOffset</unmanaged>
            [FieldOffset(0)]
            public int ElementOffset;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>UINT NumElements</unmanaged>
            [FieldOffset(4)]
            public int NumElements;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>UINT ElementWidth</unmanaged>
            [FieldOffset(4)]
            public int ElementWidth;
        }
        
        /// <summary>	
        /// Describes a raw buffer resource.	
        /// </summary>	
        /// <remarks>	
        /// This structure is used by <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription"/> to create a raw buffer.	
        /// </remarks>	
        /// <unmanaged>D3D11_BUFFEREX_SRV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct ExtendedBufferResource {	
            
            /// <summary>	
            /// The index of the first element to be accessed by the view.	
            /// </summary>	
            /// <unmanaged>UINT FirstElement</unmanaged>
            public int FirstElement;
            
            /// <summary>	
            /// The number of elements in the resource.	
            /// </summary>	
            /// <unmanaged>UINT NumElements</unmanaged>
            public int NumElements;
            
            /// <summary>	
            /// Options for binding a raw buffer (see <see cref="SlimDX2.Direct3D11.ExtendedBufferShaderResourceViewFlags"/>).	
            /// </summary>	
            /// <unmanaged>UINT Flags</unmanaged>
            public SlimDX2.Direct3D11.ExtendedBufferShaderResourceViewFlags Flags;
        }
        
        /// <summary>	
        /// Specifies the subresource from a 1D texture to use in a shader-resource view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a shader-resource-view description (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription"/>).As an example, assuming MostDetailedMip = 6 and MipLevels = 2, the view will have access to 2 mipmap levels, 6 and 7, of the original texture for which <see cref="SlimDX2.Direct3D11.Device.CreateShaderResourceView"/> creates the view. In this situation, MostDetailedMip is greater than the MipLevels in the view. However, MostDetailedMip is not greater than the MipLevels in the original resource.	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX1D_SRV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original Texture1D for which <see cref="SlimDX2.Direct3D11.Device.CreateShaderResourceView"/> creates a view) -1.	
            /// </summary>	
            /// <unmanaged>UINT MostDetailedMip</unmanaged>
            public int MostDetailedMip;
            
            /// <summary>	
            /// The maximum number of mipmap levels for the view  of the texture. See the remarks.Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed.	
            /// </summary>	
            /// <unmanaged>UINT MipLevels</unmanaged>
            public int MipLevels;
        }
        
        /// <summary>	
        /// Specifies the subresources from an array of 1D textures to use in a shader-resource view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a shader-resource-view description (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_SRV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original Texture1D for which <see cref="SlimDX2.Direct3D11.Device.CreateShaderResourceView"/> creates a view) -1.	
            /// </summary>	
            /// <unmanaged>UINT MostDetailedMip</unmanaged>
            public int MostDetailedMip;
            
            /// <summary>	
            /// The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>.Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed.	
            /// </summary>	
            /// <unmanaged>UINT MipLevels</unmanaged>
            public int MipLevels;
            
            /// <summary>	
            /// The index of the first texture to use in an array of textures.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// Number of textures in the array.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// Specifies the subresource from a 2D texture to use in a shader-resource view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a shader-resource-view description (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2D_SRV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original Texture2D for which <see cref="SlimDX2.Direct3D11.Device.CreateShaderResourceView"/> creates a view) -1.	
            /// </summary>	
            /// <unmanaged>UINT MostDetailedMip</unmanaged>
            public int MostDetailedMip;
            
            /// <summary>	
            /// The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>.Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed.	
            /// </summary>	
            /// <unmanaged>UINT MipLevels</unmanaged>
            public int MipLevels;
        }
        
        /// <summary>	
        /// Specifies the subresources from an array of 2D textures to use in a shader-resource view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a shader-resource-view description (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_SRV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original Texture2D for which <see cref="SlimDX2.Direct3D11.Device.CreateShaderResourceView"/> creates a view) -1.	
            /// </summary>	
            /// <unmanaged>UINT MostDetailedMip</unmanaged>
            public int MostDetailedMip;
            
            /// <summary>	
            /// The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>.Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed.	
            /// </summary>	
            /// <unmanaged>UINT MipLevels</unmanaged>
            public int MipLevels;
            
            /// <summary>	
            /// The index of the first texture to use in an array of textures.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// Number of textures in the array.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// Specifies the subresources from a 3D texture to use in a shader-resource view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a shader-resource-view description (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX3D_SRV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture3DResource {	
            
            /// <summary>	
            /// Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original Texture3D for which <see cref="SlimDX2.Direct3D11.Device.CreateShaderResourceView"/> creates a view) -1.	
            /// </summary>	
            /// <unmanaged>UINT MostDetailedMip</unmanaged>
            public int MostDetailedMip;
            
            /// <summary>	
            /// The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>.Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed.	
            /// </summary>	
            /// <unmanaged>UINT MipLevels</unmanaged>
            public int MipLevels;
        }
        
        /// <summary>	
        /// Specifies the subresource from a cube texture to use in a shader-resource view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a shader-resource-view description (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEXCUBE_SRV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct TextureCubeResource {	
            
            /// <summary>	
            /// Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original TextureCube for which <see cref="SlimDX2.Direct3D11.Device.CreateShaderResourceView"/> creates a view) -1.	
            /// </summary>	
            /// <unmanaged>UINT MostDetailedMip</unmanaged>
            public int MostDetailedMip;
            
            /// <summary>	
            /// The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>.Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed.	
            /// </summary>	
            /// <unmanaged>UINT MipLevels</unmanaged>
            public int MipLevels;
        }
        
        /// <summary>	
        /// Specifies the subresources from an array of cube textures to use in a shader-resource view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a shader-resource-view description (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEXCUBE_ARRAY_SRV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct TextureCubeArrayResource {	
            
            /// <summary>	
            /// Index of the most detailed mipmap level to use; this number is between 0 and MipLevels (from the original TextureCube for which <see cref="SlimDX2.Direct3D11.Device.CreateShaderResourceView"/> creates a view) -1.	
            /// </summary>	
            /// <unmanaged>UINT MostDetailedMip</unmanaged>
            public int MostDetailedMip;
            
            /// <summary>	
            /// The maximum number of mipmap levels for the view of the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>.Set to -1 to indicate all the mipmap levels from MostDetailedMip on down to least detailed.	
            /// </summary>	
            /// <unmanaged>UINT MipLevels</unmanaged>
            public int MipLevels;
            
            /// <summary>	
            /// Index of the first 2D texture to use.	
            /// </summary>	
            /// <unmanaged>UINT First2DArrayFace</unmanaged>
            public int First2DArrayFace;
            
            /// <summary>	
            /// Number of cube textures in the array.	
            /// </summary>	
            /// <unmanaged>UINT NumCubes</unmanaged>
            public int NumCubes;
        }
        
        /// <summary>	
        /// Specifies the subresources from a multisampled 2D texture to use in a shader-resource view.	
        /// </summary>	
        /// <remarks>	
        /// Since a multisampled 2D texture contains a single subresource, there is actually nothing to specify in D3D11_TEX2DMS_RTV. Consequently, UnusedField_NothingToDefine is included so that this structure will compile in C.	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2DMS_SRV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DMultisampledResource {	
            
            /// <summary>	
            /// Integer of any value. See remarks.	
            /// </summary>	
            /// <unmanaged>UINT UnusedField_NothingToDefine</unmanaged>
            public int UnusedFieldNothingToDefine;
        }
        
        /// <summary>	
        /// Specifies the subresources from an array of multisampled 2D textures to use in a shader-resource view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a shader-resource-view description (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_SRV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DMultisampledArrayResource {	
            
            /// <summary>	
            /// The index of the first texture to use in an array of textures.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// Number of textures to use.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// A <see cref="SlimDX2.DXGI.Format"/> specifying the viewing format. See remarks.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        [FieldOffset(0)]
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// The resource type of the view. See <see cref="SlimDX2.Direct3D.ShaderResourceViewDimension"/>. This should be the same as the resource type of the underlying resource. This parameter also determines which _SRV to use in the union below.	
        /// </summary>	
        /// <unmanaged>D3D11_SRV_DIMENSION ViewDimension</unmanaged>
        [FieldOffset(4)]
        public SlimDX2.Direct3D.ShaderResourceViewDimension ViewDimension;
        
        /// <summary>	
        /// View the resource as a buffer using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.BufferResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_BUFFER_SRV Buffer</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// View the resource as a 1D texture using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX1D_SRV Texture1D</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// View the resource as a 1D-texture array using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_SRV Texture1DArray</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// View the resource as a 2D-texture using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture2DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2D_SRV Texture2D</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// View the resource as a 2D-texture array using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_SRV Texture2DArray</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// View the resource as a 2D-multisampled texture using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2DMS_SRV Texture2DMS</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// View the resource as a 2D-multisampled-texture array using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
        
        /// <summary>	
        /// View the resource as a 3D texture using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture3DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX3D_SRV Texture3D</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture3DResource Texture3D;
        
        /// <summary>	
        /// View the resource as a 3D-cube texture using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.TextureCubeResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEXCUBE_SRV TextureCube</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.TextureCubeResource TextureCube;
        
        /// <summary>	
        /// View the resource as a 3D-cube-texture array using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.TextureCubeArrayResource TextureCubeArray;
        
        /// <summary>	
        /// View the resource as an extended buffer using information from a shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_BUFFEREX_SRV BufferEx</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.ShaderResourceViewDescription.ExtendedBufferResource BufferEx;
    }
    
    /// <summary>	
    /// Specifies the subresources from a resource that are accessible using a render-target view.	
    /// </summary>	
    /// <remarks>	
    /// A render-target-view description is passed into <see cref="SlimDX2.Direct3D11.Device.CreateRenderTargetView"/> to create a render target.A render-target-view cannot use the following formats:Any typeless format.DXGI_FORMAT_R32G32B32 if the view will be used to bind a buffer (vertex, index, constant, or stream-output).If the format is set to DXGI_FORMAT_UNKNOWN, then the format of the resource that the view binds to the pipeline will be used.	
    /// </remarks>	
    /// <unmanaged>D3D11_RENDER_TARGET_VIEW_DESC</unmanaged>
    [StructLayout(LayoutKind.Explicit, Pack = 0 )]
    public  partial struct RenderTargetViewDescription {	
        
        /// <summary>	
        /// Specifies the elements in a buffer resource to use in a render-target view.	
        /// </summary>	
        /// <remarks>	
        /// A render-target view is a member of a render-target-view description (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription"/>). Create a render-target view by calling <see cref="SlimDX2.Direct3D11.Device.CreateRenderTargetView"/>.	
        /// </remarks>	
        /// <unmanaged>D3D11_BUFFER_RTV</unmanaged>
        [StructLayout(LayoutKind.Explicit, Pack = 0 )]
        public  partial struct BufferResource {	
            
            /// <summary>	
            /// Number of bytes between the beginning of the buffer and the first element to access.	
            /// </summary>	
            /// <unmanaged>UINT FirstElement</unmanaged>
            [FieldOffset(0)]
            public int FirstElement;
            
            /// <summary>	
            /// The width of each element (in bytes). This can be determined from the format stored in the render-target-view description.	
            /// </summary>	
            /// <unmanaged>UINT ElementOffset</unmanaged>
            [FieldOffset(0)]
            public int ElementOffset;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>UINT NumElements</unmanaged>
            [FieldOffset(4)]
            public int NumElements;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>UINT ElementWidth</unmanaged>
            [FieldOffset(4)]
            public int ElementWidth;
        }
        
        /// <summary>	
        /// Specifies the subresource from a 1D texture to use in a render-target view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a render-target-view description (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX1D_RTV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// The index of the mipmap level to use mip slice.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
        }
        
        /// <summary>	
        /// Specifies the subresources from an array of 1D textures to use in a render-target view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a render-target-view description (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_RTV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// The index of the mipmap level to use mip slice.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
            
            /// <summary>	
            /// The index of the first texture to use in an array of textures.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// Number of textures to use.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// Specifies the subresource from a 2D texture to use in a render-target view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a render-target-view description (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2D_RTV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// The index of the mipmap level to use mip slice.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
        }
        
        /// <summary>	
        /// Specifies the subresource from a multisampled 2D texture to use in a render-target view.	
        /// </summary>	
        /// <remarks>	
        /// Since a multisampled 2D texture contains a single subresource, there is actually nothing to specify in D3D11_TEX2DMS_RTV. Consequently, UnusedField_NothingToDefine is included so that this structure will compile in C.	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2DMS_RTV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DMultisampledResource {	
            
            /// <summary>	
            /// Integer of any value. See remarks.	
            /// </summary>	
            /// <unmanaged>UINT UnusedField_NothingToDefine</unmanaged>
            public int UnusedFieldNothingToDefine;
        }
        
        /// <summary>	
        /// Specifies the subresources from an array of 2D textures to use in a render-target view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a render-target-view description (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_RTV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// The index of the mipmap level to use mip slice.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
            
            /// <summary>	
            /// The index of the first texture to use in an array of textures.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// Number of textures in the array to use in the render target view, starting from FirstArraySlice.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// Specifies the subresources from a an array of multisampled 2D textures to use in a render-target view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a render-target-view description (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_RTV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DMultisampledArrayResource {	
            
            /// <summary>	
            /// The index of the first texture to use in an array of textures.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// Number of textures to use.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// Specifies the subresources from a 3D texture to use in a render-target view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a render target view. See <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription"/>.	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX3D_RTV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture3DResource {	
            
            /// <summary>	
            /// The index of the mipmap level to use mip slice.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
            
            /// <summary>	
            /// First depth level to use.	
            /// </summary>	
            /// <unmanaged>UINT FirstWSlice</unmanaged>
            public int FirstWSlice;
            
            /// <summary>	
            /// Number of depth levels to use in the render-target view, starting from FirstWSlice. A value of -1 indicates all of the slices along the w axis, starting from FirstWSlice.	
            /// </summary>	
            /// <unmanaged>UINT WSize</unmanaged>
            public int WSize;
        }
        
        /// <summary>	
        /// The data format (see <see cref="SlimDX2.DXGI.Format"/>).	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        [FieldOffset(0)]
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// The resource type (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDimension"/>), which specifies how the render-target resource will be accessed.	
        /// </summary>	
        /// <unmanaged>D3D11_RTV_DIMENSION ViewDimension</unmanaged>
        [FieldOffset(4)]
        public SlimDX2.Direct3D11.RenderTargetViewDimension ViewDimension;
        
        /// <summary>	
        /// Specifies which buffer elements can be accessed (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription.BufferResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_BUFFER_RTV Buffer</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.RenderTargetViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// Specifies the subresources in a 1D texture that can be accessed (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription.Texture1DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX1D_RTV Texture1D</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.RenderTargetViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// Specifies the subresources in a 1D texture array that can be accessed (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_RTV Texture1DArray</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.RenderTargetViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// Specifies the subresources in a 2D texture that can be accessed (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription.Texture2DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2D_RTV Texture2D</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.RenderTargetViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// Specifies the subresources in a 2D texture array that can be accessed (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_RTV Texture2DArray</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.RenderTargetViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// Specifies a single subresource because a multisampled 2D texture only contains one subresource (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2DMS_RTV Texture2DMS</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// Specifies the subresources in a multisampled 2D texture array that can be accessed (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.RenderTargetViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
        
        /// <summary>	
        /// Specifies subresources in a 3D texture that can be accessed (see <see cref="SlimDX2.Direct3D11.RenderTargetViewDescription.Texture3DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX3D_RTV Texture3D</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.RenderTargetViewDescription.Texture3DResource Texture3D;
    }
    
    /// <summary>	
    /// Specifies the subresources of a texture that are accessible from a depth-stencil view.	
    /// </summary>	
    /// <remarks>	
    /// These are valid formats for a depth-stencil view:DXGI_FORMAT_D16_UNORMDXGI_FORMAT_D24_UNORM_S8_UINTDXGI_FORMAT_D32_FLOATDXGI_FORMAT_D32_FLOAT_S8X24_UINTDXGI_FORMAT_UNKNOWNA depth-stencil view cannot use a typeless format.  If the format chosen is DXGI_FORMAT_UNKNOWN, then the format of the parent resource is used.A depth-stencil-view description is needed when calling <see cref="SlimDX2.Direct3D11.Device.CreateDepthStencilView"/>.	
    /// </remarks>	
    /// <unmanaged>D3D11_DEPTH_STENCIL_VIEW_DESC</unmanaged>
    [StructLayout(LayoutKind.Explicit, Pack = 0 )]
    public  partial struct DepthStencilViewDescription {	
        
        /// <summary>	
        /// Specifies the subresource from a 1D texture that is accessible to a depth-stencil view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a depth-stencil-view description (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX1D_DSV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// The index of the first mipmap level to use.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
        }
        
        /// <summary>	
        /// Specifies the subresources from an array of 1D textures to use in a depth-stencil view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a depth-stencil-view description (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_DSV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// The index of the first mipmap level to use.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
            
            /// <summary>	
            /// The index of the first texture to use in an array of textures.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// Number of textures to use.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// Specifies the subresource from a 2D texture that is accessible to a depth-stencil view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a depth-stencil-view description (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2D_DSV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// The index of the first mipmap level to use.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
        }
        
        /// <summary>	
        /// Specifies the subresources from an array 2D textures that are accessible to a depth-stencil view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a depth-stencil-view description (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_DSV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// The index of the first mipmap level to use.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
            
            /// <summary>	
            /// The index of the first texture to use in an array of textures.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// Number of textures to use.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// Specifies the subresource from a multisampled 2D texture that is accessible to a depth-stencil view.	
        /// </summary>	
        /// <remarks>	
        /// Because a multisampled 2D texture contains a single subtexture, there is nothing to specify; this unused member is included so that this structure will compile in C.	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2DMS_DSV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DMultisampledResource {	
            
            /// <summary>	
            /// Unused.	
            /// </summary>	
            /// <unmanaged>UINT UnusedField_NothingToDefine</unmanaged>
            public int UnusedFieldNothingToDefine;
        }
        
        /// <summary>	
        /// Specifies the subresources from an array of multisampled 2D textures for a depth-stencil view.	
        /// </summary>	
        /// <remarks>	
        /// This structure is one member of a depth-stencil-view description (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription"/>).	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_DSV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DMultisampledArrayResource {	
            
            /// <summary>	
            /// The index of the first texture to use in an array of textures.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// Number of textures to use.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// Resource data  format (see <see cref="SlimDX2.DXGI.Format"/>). See remarks for allowable formats.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        [FieldOffset(0)]
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// Type of resource (see <see cref="SlimDX2.Direct3D11.Dimension"/>). Specifies how a depth-stencil resource will be accessed; the value is stored in the  union in this structure.	
        /// </summary>	
        /// <unmanaged>D3D11_DSV_DIMENSION ViewDimension</unmanaged>
        [FieldOffset(4)]
        public SlimDX2.Direct3D11.Dimension ViewDimension;
        
        /// <summary>	
        /// A value that describes whether the texture is read only.  Pass 0 to specify that it is not read only; otherwise, pass one of the members of  the <see cref="SlimDX2.Direct3D11.DepthStencilViewFlags"/> enumerated type.	
        /// </summary>	
        /// <unmanaged>UINT Flags</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.DepthStencilViewFlags Flags;
        
        /// <summary>	
        /// Specifies a 1D texture subresource (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription.Texture1DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX1D_DSV Texture1D</unmanaged>
        [FieldOffset(12)]
        public SlimDX2.Direct3D11.DepthStencilViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// Specifies an array of 1D texture subresources (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_DSV Texture1DArray</unmanaged>
        [FieldOffset(12)]
        public SlimDX2.Direct3D11.DepthStencilViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// Specifies a 2D texture subresource (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription.Texture2DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2D_DSV Texture2D</unmanaged>
        [FieldOffset(12)]
        public SlimDX2.Direct3D11.DepthStencilViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// Specifies an array of 2D texture subresources (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_DSV Texture2DArray</unmanaged>
        [FieldOffset(12)]
        public SlimDX2.Direct3D11.DepthStencilViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// Specifies a multisampled 2D texture (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2DMS_DSV Texture2DMS</unmanaged>
        [FieldOffset(12)]
        public SlimDX2.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledResource Texture2DMS;
        
        /// <summary>	
        /// Specifies an array of multisampled 2D textures (see <see cref="SlimDX2.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray</unmanaged>
        [FieldOffset(12)]
        public SlimDX2.Direct3D11.DepthStencilViewDescription.Texture2DMultisampledArrayResource Texture2DMSArray;
    }
    
    /// <summary>	
    /// Specifies the subresources from a resource that are accessible using an unordered-access view.	
    /// </summary>	
    /// <remarks>	
    /// An unordered-access-view description is passed into <see cref="SlimDX2.Direct3D11.Device.CreateUnorderedAccessView"/> to create a view.	
    /// </remarks>	
    /// <unmanaged>D3D11_UNORDERED_ACCESS_VIEW_DESC</unmanaged>
    [StructLayout(LayoutKind.Explicit, Pack = 0 )]
    public  partial struct UnorderedAccessViewDescription {	
        
        /// <summary>	
        /// Describes a unordered-access buffer resource.	
        /// </summary>	
        /// <remarks>	
        /// This structure is used by a <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription"/>.	
        /// </remarks>	
        /// <unmanaged>D3D11_BUFFER_UAV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct BufferResource {	
            
            /// <summary>	
            /// The zero-based index of the first element to be accessed.	
            /// </summary>	
            /// <unmanaged>UINT FirstElement</unmanaged>
            public int FirstElement;
            
            /// <summary>	
            /// The number of elements in the resource. For structured buffers, this is the number of structures in the buffer.	
            /// </summary>	
            /// <unmanaged>UINT NumElements</unmanaged>
            public int NumElements;
            
            /// <summary>	
            /// View options for the resource (see <see cref="SlimDX2.Direct3D11.UnorderedAccessViewBufferFlags"/>).	
            /// </summary>	
            /// <unmanaged>UINT Flags</unmanaged>
            public SlimDX2.Direct3D11.UnorderedAccessViewBufferFlags Flags;
        }
        
        /// <summary>	
        /// Describes a unordered-access 1D texture resource.	
        /// </summary>	
        /// <remarks>	
        /// This structure is used by a <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription"/>.	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX1D_UAV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture1DResource {	
            
            /// <summary>	
            /// The mipmap slice index.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
        }
        
        /// <summary>	
        /// Describes an array of unordered-access 1D texture resources.	
        /// </summary>	
        /// <remarks>	
        /// This structure is used by a <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription"/>.	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_UAV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture1DArrayResource {	
            
            /// <summary>	
            /// The mipmap slice index.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
            
            /// <summary>	
            /// The zero-based index of the first array slice to be accessed.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// The number of slices in the array.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// Describes a unordered-access 2D texture resource.	
        /// </summary>	
        /// <remarks>	
        /// This structure is used by a <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription"/>.	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2D_UAV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DResource {	
            
            /// <summary>	
            /// The mipmap slice index.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
        }
        
        /// <summary>	
        /// Describes an array of unordered-access 2D texture resources.	
        /// </summary>	
        /// <remarks>	
        /// This structure is used by a <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription"/>.	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_UAV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture2DArrayResource {	
            
            /// <summary>	
            /// The mipmap slice index.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
            
            /// <summary>	
            /// The zero-based index of the first array slice to be accessed.	
            /// </summary>	
            /// <unmanaged>UINT FirstArraySlice</unmanaged>
            public int FirstArraySlice;
            
            /// <summary>	
            /// The number of slices in the array.	
            /// </summary>	
            /// <unmanaged>UINT ArraySize</unmanaged>
            public int ArraySize;
        }
        
        /// <summary>	
        /// Describes a unordered-access 3D texture resource.	
        /// </summary>	
        /// <remarks>	
        /// This structure is used by a <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription"/>.	
        /// </remarks>	
        /// <unmanaged>D3D11_TEX3D_UAV</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Texture3DResource {	
            
            /// <summary>	
            /// The mipmap slice index.	
            /// </summary>	
            /// <unmanaged>UINT MipSlice</unmanaged>
            public int MipSlice;
            
            /// <summary>	
            /// The zero-based index of the first depth slice to be accessed.	
            /// </summary>	
            /// <unmanaged>UINT FirstWSlice</unmanaged>
            public int FirstWSlice;
            
            /// <summary>	
            /// The number of depth slices.	
            /// </summary>	
            /// <unmanaged>UINT WSize</unmanaged>
            public int WSize;
        }
        
        /// <summary>	
        /// The data format (see <see cref="SlimDX2.DXGI.Format"/>).	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        [FieldOffset(0)]
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// The resource type (see <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDimension"/>), which specifies how the resource will be accessed.	
        /// </summary>	
        /// <unmanaged>D3D11_UAV_DIMENSION ViewDimension</unmanaged>
        [FieldOffset(4)]
        public SlimDX2.Direct3D11.UnorderedAccessViewDimension ViewDimension;
        
        /// <summary>	
        /// Specifies which buffer elements can be accessed (see <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription.BufferResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_BUFFER_UAV Buffer</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.UnorderedAccessViewDescription.BufferResource Buffer;
        
        /// <summary>	
        /// Specifies the subresources in a 1D texture that can be accessed (see <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription.Texture1DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX1D_UAV Texture1D</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.UnorderedAccessViewDescription.Texture1DResource Texture1D;
        
        /// <summary>	
        /// Specifies the subresources in a 1D texture array that can be accessed (see <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX1D_ARRAY_UAV Texture1DArray</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.UnorderedAccessViewDescription.Texture1DArrayResource Texture1DArray;
        
        /// <summary>	
        /// Specifies the subresources in a 2D texture that can be accessed (see <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription.Texture2DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2D_UAV Texture2D</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.UnorderedAccessViewDescription.Texture2DResource Texture2D;
        
        /// <summary>	
        /// Specifies the subresources in a 2D texture array that can be accessed (see <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX2D_ARRAY_UAV Texture2DArray</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.UnorderedAccessViewDescription.Texture2DArrayResource Texture2DArray;
        
        /// <summary>	
        /// Specifies subresources in a 3D texture that can be accessed (see <see cref="SlimDX2.Direct3D11.UnorderedAccessViewDescription.Texture3DResource"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEX3D_UAV Texture3D</unmanaged>
        [FieldOffset(8)]
        public SlimDX2.Direct3D11.UnorderedAccessViewDescription.Texture3DResource Texture3D;
    }
    
    /// <summary>	
    /// Describes a sampler state.	
    /// </summary>	
    /// <remarks>	
    /// These are the default values for sampler state.StateDefault ValueFilterMIN_MAG_MIP_LINEARAddressUClampAddressVClampAddressWClampMinLOD-3.402823466e+38F (-FLT_MAX)MaxLOD3.402823466e+38F (FLT_MAX)MipMapLODBias0.0fMaxAnisotropy16ComparisonFuncNeverBorderColorfloat4(0.0f,0.0f,0.0f,0.0f)TextureN/A 	
    /// </remarks>	
    /// <unmanaged>D3D11_SAMPLER_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct SamplerStateDescription {	
        
        /// <summary>	
        /// Filtering method to use when sampling a texture (see <see cref="SlimDX2.Direct3D11.Filter"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_FILTER Filter</unmanaged>
        public SlimDX2.Direct3D11.Filter Filter;
        
        /// <summary>	
        /// Method to use for resolving a u texture coordinate that is outside the 0 to 1 range (see <see cref="SlimDX2.Direct3D11.TextureAddressMode"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_TEXTURE_ADDRESS_MODE AddressU</unmanaged>
        public SlimDX2.Direct3D11.TextureAddressMode AddressU;
        
        /// <summary>	
        /// Method to use for resolving a v texture coordinate that is outside the 0 to 1 range.	
        /// </summary>	
        /// <unmanaged>D3D11_TEXTURE_ADDRESS_MODE AddressV</unmanaged>
        public SlimDX2.Direct3D11.TextureAddressMode AddressV;
        
        /// <summary>	
        /// Method to use for resolving a w texture coordinate that is outside the 0 to 1 range.	
        /// </summary>	
        /// <unmanaged>D3D11_TEXTURE_ADDRESS_MODE AddressW</unmanaged>
        public SlimDX2.Direct3D11.TextureAddressMode AddressW;
        
        /// <summary>	
        /// Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5.	
        /// </summary>	
        /// <unmanaged>FLOAT MipLODBias</unmanaged>
        public float MipLODBias;
        
        /// <summary>	
        /// Clamping value used if D3D11_FILTER_ANISOTROPIC or D3D11_FILTER_COMPARISON_ANISOTROPIC is specified in Filter. Valid values are between 1 and 16.	
        /// </summary>	
        /// <unmanaged>UINT MaxAnisotropy</unmanaged>
        public int MaxAnisotropy;
        
        /// <summary>	
        /// A function that compares sampled data against existing sampled data. The function options are listed in <see cref="SlimDX2.Direct3D11.ComparisonFunction"/>.	
        /// </summary>	
        /// <unmanaged>D3D11_COMPARISON_FUNC ComparisonFunc</unmanaged>
        public SlimDX2.Direct3D11.ComparisonFunction ComparisonFunc;
        
        /// <summary>	
        /// Border color to use if D3D11_TEXTURE_ADDRESS_BORDER is specified for AddressU, AddressV, or AddressW. Range must be between 0.0 and 1.0 inclusive.	
        /// </summary>	
        /// <unmanaged>FLOAT BorderColor[4]</unmanaged>
        public SlimMath.Vector4 BorderColor;
        
        /// <summary>	
        /// Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.	
        /// </summary>	
        /// <unmanaged>FLOAT MinLOD</unmanaged>
        public float MinLOD;
        
        /// <summary>	
        /// Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. To have no upper limit on LOD set this to a large value such as D3D11_FLOAT32_MAX.	
        /// </summary>	
        /// <unmanaged>FLOAT MaxLOD</unmanaged>
        public float MaxLOD;
    }
    
    /// <summary>	
    /// Describes a query.	
    /// </summary>	
    /// <unmanaged>D3D11_QUERY_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct QueryDescription {	
        
        /// <summary>	
        /// Type of query (see <see cref="SlimDX2.Direct3D11.QueryType"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_QUERY Query</unmanaged>
        public SlimDX2.Direct3D11.QueryType Query;
        
        /// <summary>	
        /// Miscellaneous flags (see <see cref="SlimDX2.Direct3D11.QueryFlags"/>).	
        /// </summary>	
        /// <unmanaged>UINT MiscFlags</unmanaged>
        public SlimDX2.Direct3D11.QueryFlags QueryFlags;
    }
    
    /// <summary>	
    /// Query information about the reliability of a timestamp query.	
    /// </summary>	
    /// <remarks>	
    /// For a list of query types see <see cref="SlimDX2.Direct3D11.QueryType"/>.	
    /// </remarks>	
    /// <unmanaged>D3D11_QUERY_DATA_TIMESTAMP_DISJOINT</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct QueryDataTimestampDisjoint {	
        
        /// <summary>	
        /// How frequently the GPU counter increments in Hz.	
        /// </summary>	
        /// <unmanaged>UINT64 Frequency</unmanaged>
        public long Frequency;
        
        /// <summary>	
        /// If this is TRUE, something occurred in between the query's <see cref="SlimDX2.Direct3D11.DeviceContext.Begin"/> and <see cref="SlimDX2.Direct3D11.DeviceContext.End"/> calls that caused the timestamp counter to become discontinuous or disjoint, such as unplugging the AC chord on a laptop, overheating, or throttling up/down due to laptop savings events. The timestamp returned by <see cref="SlimDX2.Direct3D11.DeviceContext.GetDataInternal"/> for a timestamp query is only reliable if Disjoint is FALSE.	
        /// </summary>	
        /// <unmanaged>BOOL Disjoint</unmanaged>
        public bool Disjoint { 
            get { 
                return (_Disjoint!=0)?true:false; 
            }
            set { 
                _Disjoint = value?1:0;
            }
        }
        internal int _Disjoint;
    }
    
    /// <summary>	
    /// Query information about graphics-pipeline activity in between calls to <see cref="SlimDX2.Direct3D11.DeviceContext.Begin"/> and <see cref="SlimDX2.Direct3D11.DeviceContext.End"/>.	
    /// </summary>	
    /// <unmanaged>D3D11_QUERY_DATA_PIPELINE_STATISTICS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct QueryDataPipelineStatistics {	
        
        /// <summary>	
        /// Number of vertices read by input assembler.	
        /// </summary>	
        /// <unmanaged>UINT64 IAVertices</unmanaged>
        public long IAVertices;
        
        /// <summary>	
        /// Number of primitives read by the input assembler. This number can be different depending on the primitive topology used. For example, a triangle strip with 6 vertices will produce 4 triangles, however a triangle list with 6 vertices will produce 2 triangles. 	
        /// </summary>	
        /// <unmanaged>UINT64 IAPrimitives</unmanaged>
        public long IAPrimitives;
        
        /// <summary>	
        /// Number of times a vertex shader was invoked. Direct3D invokes the vertex shader once per vertex.	
        /// </summary>	
        /// <unmanaged>UINT64 VSInvocations</unmanaged>
        public long VSInvocations;
        
        /// <summary>	
        /// Number of times a geometry shader was invoked. When the geometry shader is set to NULL, this statistic may or may not increment depending on the hardware manufacturer.	
        /// </summary>	
        /// <unmanaged>UINT64 GSInvocations</unmanaged>
        public long GSInvocations;
        
        /// <summary>	
        /// Number of primitives output by a geometry shader.	
        /// </summary>	
        /// <unmanaged>UINT64 GSPrimitives</unmanaged>
        public long GSPrimitives;
        
        /// <summary>	
        /// Number of primitives that were sent to the rasterizer. When the rasterizer is disabled, this will not increment.	
        /// </summary>	
        /// <unmanaged>UINT64 CInvocations</unmanaged>
        public long CInvocations;
        
        /// <summary>	
        /// Number of primitives that were rendered. This may be larger or smaller than CInvocations because after a primitive is clipped sometimes it is either broken up into more than one primitive or completely culled.	
        /// </summary>	
        /// <unmanaged>UINT64 CPrimitives</unmanaged>
        public long CPrimitives;
        
        /// <summary>	
        /// Number of times a pixel shader was invoked.	
        /// </summary>	
        /// <unmanaged>UINT64 PSInvocations</unmanaged>
        public long PSInvocations;
        
        /// <summary>	
        /// Number of times a hull shader was invoked.	
        /// </summary>	
        /// <unmanaged>UINT64 HSInvocations</unmanaged>
        public long HSInvocations;
        
        /// <summary>	
        /// Number of times a domain shader was invoked.	
        /// </summary>	
        /// <unmanaged>UINT64 DSInvocations</unmanaged>
        public long DSInvocations;
        
        /// <summary>	
        /// Number of times a compute shader was invoked.	
        /// </summary>	
        /// <unmanaged>UINT64 CSInvocations</unmanaged>
        public long CSInvocations;
    }
    
    /// <summary>	
    /// Query information about the amount of data streamed out to the stream-output buffers in between <see cref="SlimDX2.Direct3D11.DeviceContext.Begin"/> and <see cref="SlimDX2.Direct3D11.DeviceContext.End"/>.	
    /// </summary>	
    /// <unmanaged>D3D11_QUERY_DATA_SO_STATISTICS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct StreamOutputStatistics {	
        
        /// <summary>	
        /// Number of primitives (that is, points, lines, and triangles) written to the stream-output buffers.	
        /// </summary>	
        /// <unmanaged>UINT64 NumPrimitivesWritten</unmanaged>
        public long NumPrimitivesWritten;
        
        /// <summary>	
        /// Number of primitives that would have been written to the stream-output buffers if there had been enough space for them all.	
        /// </summary>	
        /// <unmanaged>UINT64 PrimitivesStorageNeeded</unmanaged>
        public long PrimitivesStorageNeeded;
    }
    
    /// <summary>	
    /// Describes a counter.	
    /// </summary>	
    /// <remarks>	
    /// This structure is used by <see cref="SlimDX2.Direct3D11.Counter.GetDescription"/>, <see cref="SlimDX2.Direct3D11.Device.CheckCounter"/> and <see cref="SlimDX2.Direct3D11.Device.CreateCounter"/>.	
    /// </remarks>	
    /// <unmanaged>D3D11_COUNTER_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct CounterDescription {	
        
        /// <summary>	
        /// Type of counter (see <see cref="SlimDX2.Direct3D11.CounterKind"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_COUNTER Counter</unmanaged>
        public SlimDX2.Direct3D11.CounterKind Counter;
        
        /// <summary>	
        /// Reserved.	
        /// </summary>	
        /// <unmanaged>UINT MiscFlags</unmanaged>
        public int MiscFlags;
    }
    
    /// <summary>	
    /// Information about the video card's performance counter capabilities.	
    /// </summary>	
    /// <remarks>	
    /// This structure is returned by <see cref="SlimDX2.Direct3D11.Device.CheckCounterInfo"/>.	
    /// </remarks>	
    /// <unmanaged>D3D11_COUNTER_INFO</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct CounterInformation {	
        
        /// <summary>	
        /// Largest device-dependent counter ID that the device supports. If none are supported, this value will be 0. Otherwise it will be greater than or equal to D3D11_COUNTER_DEVICE_DEPENDENT_0. See <see cref="SlimDX2.Direct3D11.CounterKind"/>.	
        /// </summary>	
        /// <unmanaged>D3D11_COUNTER LastDeviceDependentCounter</unmanaged>
        public SlimDX2.Direct3D11.CounterKind LastDeviceDependentCounter;
        
        /// <summary>	
        /// Number of counters that can be simultaneously supported.	
        /// </summary>	
        /// <unmanaged>UINT NumSimultaneousCounters</unmanaged>
        public int NumSimultaneousCounters;
        
        /// <summary>	
        /// Number of detectable parallel units that the counter is able to discern. Values are 1 ~ 4. Use NumDetectableParallelUnits to interpret the values of the VERTEX_PROCESSING, GEOMETRY_PROCESSING, PIXEL_PROCESSING, and OTHER_GPU_PROCESSING counters. 	
        /// </summary>	
        /// <unmanaged>UINT8 NumDetectableParallelUnits</unmanaged>
        public byte NumDetectableParallelUnits;
    }
    
    /// <summary>	
    /// Describes an HLSL class instance.	
    /// </summary>	
    /// <remarks>	
    /// The D3D11_CLASS_INSTANCE_DESC structure is returned by the <see cref="SlimDX2.Direct3D11.ClassInstance.GetDescription"/> method.The members of this structure except InstanceIndex are valid (non default values) if they describe a class instance aquired using  <see cref="SlimDX2.Direct3D11.ClassLinkage.CreateClassInstance"/>.  The InstanceIndex member is only valid when the class instance is aquired using <see cref="SlimDX2.Direct3D11.ClassLinkage.GetClassInstance"/>.	
    /// </remarks>	
    /// <unmanaged>D3D11_CLASS_INSTANCE_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct ClassInstanceDescription {	
        
        /// <summary>	
        /// The instance ID of an HLSL class; the default value is 0.	
        /// </summary>	
        /// <unmanaged>UINT InstanceId</unmanaged>
        public int InstanceId;
        
        /// <summary>	
        /// The instance index of an HLSL class; the default value is 0.	
        /// </summary>	
        /// <unmanaged>UINT InstanceIndex</unmanaged>
        public int InstanceIndex;
        
        /// <summary>	
        /// The type ID of an HLSL class; the default value is 0.	
        /// </summary>	
        /// <unmanaged>UINT TypeId</unmanaged>
        public int TypeId;
        
        /// <summary>	
        /// Describes the constant buffer associated with an HLSL class; the default value is 0.	
        /// </summary>	
        /// <unmanaged>UINT ConstantBuffer</unmanaged>
        public int ConstantBuffer;
        
        /// <summary>	
        /// The base constant buffer offset associated with an HLSL class; the default value is 0.	
        /// </summary>	
        /// <unmanaged>UINT BaseConstantBufferOffset</unmanaged>
        public int BaseConstantBufferOffset;
        
        /// <summary>	
        /// The base texture associated with an HLSL class; the default value is 127.	
        /// </summary>	
        /// <unmanaged>UINT BaseTexture</unmanaged>
        public int BaseTexture;
        
        /// <summary>	
        /// The base sampler associated with an HLSL class; the default value is 15.	
        /// </summary>	
        /// <unmanaged>UINT BaseSampler</unmanaged>
        public int BaseSampler;
        
        /// <summary>	
        /// True if the class was created; the default value is false.	
        /// </summary>	
        /// <unmanaged>BOOL Created</unmanaged>
        public bool Created { 
            get { 
                return (_Created!=0)?true:false; 
            }
            set { 
                _Created = value?1:0;
            }
        }
        internal int _Created;
    }
    
    /// <summary>	
    /// Describes the multi-threading features that are supported by the current graphics driver.	
    /// </summary>	
    /// <remarks>	
    /// Use the D3D11_FEATURE_DATA_THREADING structure with the <see cref="SlimDX2.Direct3D11.Device.CheckFeatureSupport"/> method to determine multi-threading support.	
    /// </remarks>	
    /// <unmanaged>D3D11_FEATURE_DATA_THREADING</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct FeatureDataThreading {	
        
        /// <summary>	
        /// TRUE means resources can be created concurrently on multiple threads while drawing; FALSE means that the presence of coarse synchronization will prevent concurrency.	
        /// </summary>	
        /// <unmanaged>BOOL DriverConcurrentCreates</unmanaged>
        public bool DriverConcurrentCreates { 
            get { 
                return (_DriverConcurrentCreates!=0)?true:false; 
            }
            set { 
                _DriverConcurrentCreates = value?1:0;
            }
        }
        internal int _DriverConcurrentCreates;
        
        /// <summary>	
        /// TRUE means command lists are supported by the current driver; FALSE means that the API will emulate deferred contexts and command lists with software.	
        /// </summary>	
        /// <unmanaged>BOOL DriverCommandLists</unmanaged>
        public bool DriverCommandLists { 
            get { 
                return (_DriverCommandLists!=0)?true:false; 
            }
            set { 
                _DriverCommandLists = value?1:0;
            }
        }
        internal int _DriverCommandLists;
    }
    
    /// <summary>	
    /// Describes double data type support in the current graphics driver.	
    /// </summary>	
    /// <unmanaged>D3D11_FEATURE_DATA_DOUBLES</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct FeatureDataDoubles {	
        
        /// <summary>	
        /// If TRUE doubles are allowed; otherwise FALSE.	
        /// </summary>	
        /// <unmanaged>BOOL DoublePrecisionFloatShaderOps</unmanaged>
        public bool DoublePrecisionFloatShaderOps { 
            get { 
                return (_DoublePrecisionFloatShaderOps!=0)?true:false; 
            }
            set { 
                _DoublePrecisionFloatShaderOps = value?1:0;
            }
        }
        internal int _DoublePrecisionFloatShaderOps;
    }
    
    /// <summary>	
    /// Describes which resources are supported by the current graphics driver for a given format.	
    /// </summary>	
    /// <unmanaged>D3D11_FEATURE_DATA_FORMAT_SUPPORT</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct FeatureDataFormatSupport {	
        
        /// <summary>	
        /// <see cref="SlimDX2.DXGI.Format"/> to return information on.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT InFormat</unmanaged>
        public SlimDX2.DXGI.Format InFormat;
        
        /// <summary>	
        /// Combination of <see cref="SlimDX2.Direct3D11.FormatSupport"/> flags indicating which resources are supported.	
        /// </summary>	
        /// <unmanaged>UINT OutFormatSupport</unmanaged>
        public SlimDX2.Direct3D11.ComputeShaderFormatSupport OutFormatSupport;
    }
    
    /// <summary>	
    /// Describes which unordered resource options are supported by the current graphics driver for a given format.	
    /// </summary>	
    /// <unmanaged>D3D11_FEATURE_DATA_FORMAT_SUPPORT2</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct FeatureDataFormatSupport2 {	
        
        /// <summary>	
        /// <see cref="SlimDX2.DXGI.Format"/> to return information on.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT InFormat</unmanaged>
        public SlimDX2.DXGI.Format InFormat;
        
        /// <summary>	
        /// Combination of <see cref="SlimDX2.Direct3D11.ComputeShaderFormatSupport"/> flags indicating which unordered resource options are supported.	
        /// </summary>	
        /// <unmanaged>UINT OutFormatSupport2</unmanaged>
        public SlimDX2.Direct3D11.ComputeShaderFormatSupport OutFormatSupport2;
    }
    
    /// <summary>	
    /// Describes compute shader and raw and structured buffer support in the current graphics driver.	
    /// </summary>	
    /// <remarks>	
    /// Direct3D 11 devices (D3D_FEATURE_LEVEL_11_0) are required to support Compute Shader model 5.0.  Direct3D 10.x devices (D3D_FEATURE_LEVEL_10_0, D3D_FEATURE_LEVEL_10_1) can optionally support Compute Shader model 4.0 or 4.1.	
    /// </remarks>	
    /// <unmanaged>D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct FeatureDataXHardwareOptions {	
        
        /// <summary>	
        /// TRUE if compute shaders and raw and structured buffers are supported; otherwise FALSE.	
        /// </summary>	
        /// <unmanaged>BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x</unmanaged>
        public bool ComputeShadersPlusRawAndStructuredBuffersViaShader4X { 
            get { 
                return (_ComputeShadersPlusRawAndStructuredBuffersViaShader4X!=0)?true:false; 
            }
            set { 
                _ComputeShadersPlusRawAndStructuredBuffersViaShader4X = value?1:0;
            }
        }
        internal int _ComputeShadersPlusRawAndStructuredBuffersViaShader4X;
    }
    
    /// <summary>	
    /// Optionally provide information to texture loader APIs to control how textures get loaded. A value of D3DX11_DEFAULT for any of these parameters will cause D3DX to automatically pick use the value from the source file.	
    /// </summary>	
    /// <remarks>	
    /// This structure is used by methods such as: {{D3DX11GetImageInfoFromFile}}, <see cref="SlimDX2.Direct3D11.D3DX11.GetImageInfoFromMemory"/>, or {{D3DX11GetImageInfoFromResource}}.	
    /// </remarks>	
    /// <unmanaged>D3DX11_IMAGE_INFO</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct ImageInformation {	
        
        /// <summary>	
        /// The target width of the texture. If the actual width of the texture is larger or smaller than this value then the texture will be scaled up or down to fit this target width.	
        /// </summary>	
        /// <unmanaged>UINT Width</unmanaged>
        public int Width;
        
        /// <summary>	
        /// The target height of the texture. If the actual height of the texture is larger or smaller than this value then the texture will be scaled up or down to fit this target height.	
        /// </summary>	
        /// <unmanaged>UINT Height</unmanaged>
        public int Height;
        
        /// <summary>	
        /// The depth of the texture. This only applies to volume textures.	
        /// </summary>	
        /// <unmanaged>UINT Depth</unmanaged>
        public int Depth;
        
        /// <summary>	
        /// The number of elements in the array.	
        /// </summary>	
        /// <unmanaged>UINT ArraySize</unmanaged>
        public int ArraySize;
        
        /// <summary>	
        /// The maximum number of mipmap levels in the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Using 0 or D3DX11_DEFAULT will cause a full mipmap chain to be created.	
        /// </summary>	
        /// <unmanaged>UINT MipLevels</unmanaged>
        public int MipLevels;
        
        /// <summary>	
        /// Miscellaneous resource properties specified with a <see cref="SlimDX2.Direct3D11.ResourceOptionFlags"/> flag.	
        /// </summary>	
        /// <unmanaged>UINT MiscFlags</unmanaged>
        public SlimDX2.Direct3D11.ResourceOptionFlags OptionFlags;
        
        /// <summary>	
        /// A <see cref="SlimDX2.DXGI.Format"/> enumeration specifying the format the texture will be in after it is loaded.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// A <see cref="SlimDX2.Direct3D11.ResourceDimension"/> value, which identifies the type of resource.	
        /// </summary>	
        /// <unmanaged>D3D11_RESOURCE_DIMENSION ResourceDimension</unmanaged>
        public SlimDX2.Direct3D11.ResourceDimension ResourceDimension;
        
        /// <summary>	
        /// A <see cref="SlimDX2.Direct3D11.ImageFileFormat"/> value, which identifies the image format.	
        /// </summary>	
        /// <unmanaged>D3DX11_IMAGE_FILE_FORMAT ImageFileFormat</unmanaged>
        public SlimDX2.Direct3D11.ImageFileFormat ImageFileFormat;
    }
    
    /// <summary>	
    /// Optionally provide information to texture loader APIs to control how textures get loaded. A value of D3DX11_DEFAULT for any of these parameters will cause D3DX to automatically pick use the value from the source file.	
    /// </summary>	
    /// <remarks>	
    /// When initializing the structure, you may set any member to D3DX11_DEFAULT and D3DX will initialize it with a default value from the source texture when the texture is loaded.This structure can be used by APIs that:Create resources, such as {{D3DX11CreateTextureFromFile}} and {{D3DX11CreateShaderResourceViewFromFile}}.Create data processors, such as {{D3DX11CreateAsyncTextureInfoProcessor}} or	
    /// {{D3DX11CreateAsyncShaderResourceViewProcessor}}.The default values are:	
    /// <code> Width = D3DX11_DEFAULT; Height = D3DX11_DEFAULT; Depth = D3DX11_DEFAULT; FirstMipLevel = D3DX11_DEFAULT; MipLevels = D3DX11_DEFAULT; Usage = (D3D11_USAGE) D3DX11_DEFAULT; BindFlags = D3DX11_DEFAULT; CpuAccessFlags = D3DX11_DEFAULT; MiscFlags = D3DX11_DEFAULT; Format = DXGI_FORMAT_FROM_FILE; Filter = D3DX11_DEFAULT; MipFilter = D3DX11_DEFAULT; pSrcInfo = NULL; </code>	
    /// 	
    /// Here is a brief example that uses this structure to supply the pixel format when loading a texture. For the complete code, see HDRFormats10.cpp in {{HDRToneMappingCS11 Sample}}.	
    /// <code> ID3D11ShaderResourceView* pCubeRV = NULL;	
    /// WCHAR strPath[MAX_PATH];	
    /// D3DX11_IMAGE_LOAD_INFO LoadInfo; DXUTFindDXSDKMediaFileCch( strPath, MAX_PATH,  L"Light Probes\\uffizi_cross.dds" ); LoadInfo.Format = DXGI_FORMAT_R16G16B16A16_FLOAT; hr = D3DX11CreateShaderResourceViewFromFile( pd3dDevice, strPath,  &amp;LoadInfo, NULL, &amp;pCubeRV, NULL ); </code>	
    /// 	
    /// </remarks>	
    /// <unmanaged>D3DX11_IMAGE_LOAD_INFO</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct ImageLoadInformation {	
        
        /// <summary>	
        /// The target width of the texture. If the actual width of the texture is larger or smaller than this value then the texture will be scaled up or down to fit this target width.	
        /// </summary>	
        /// <unmanaged>UINT Width</unmanaged>
        public int Width;
        
        /// <summary>	
        /// The target height of the texture. If the actual height of the texture is larger or smaller than this value then the texture will be scaled up or down to fit this target height.	
        /// </summary>	
        /// <unmanaged>UINT Height</unmanaged>
        public int Height;
        
        /// <summary>	
        /// The depth of the texture. This only applies to volume textures.	
        /// </summary>	
        /// <unmanaged>UINT Depth</unmanaged>
        public int Depth;
        
        /// <summary>	
        /// The highest resolution mipmap level of the texture. If this is greater than 0, then after the texture is loaded FirstMipLevel will be mapped to mipmap level 0.	
        /// </summary>	
        /// <unmanaged>UINT FirstMipLevel</unmanaged>
        public int FirstMipLevel;
        
        /// <summary>	
        /// The maximum number of mipmap levels in the texture. See the remarks in <see cref="SlimDX2.Direct3D11.ShaderResourceViewDescription.Texture1DResource"/>. Using 0 or D3DX11_DEFAULT will cause a full mipmap chain to be created.	
        /// </summary>	
        /// <unmanaged>UINT MipLevels</unmanaged>
        public int MipLevels;
        
        /// <summary>	
        /// The way the texture resource is intended to be used. See <see cref="SlimDX2.Direct3D11.ResourceUsage"/>.	
        /// </summary>	
        /// <unmanaged>D3D11_USAGE Usage</unmanaged>
        public SlimDX2.Direct3D11.ResourceUsage Usage;
        
        /// <summary>	
        /// The pipeline stages that the texture will be allowed to bind to. See <see cref="SlimDX2.Direct3D11.BindFlags"/>.	
        /// </summary>	
        /// <unmanaged>UINT BindFlags</unmanaged>
        public SlimDX2.Direct3D11.BindFlags BindFlags;
        
        /// <summary>	
        /// The access permissions the cpu will have for the texture resource. See <see cref="SlimDX2.Direct3D11.CpuAccessFlags"/>.	
        /// </summary>	
        /// <unmanaged>UINT CpuAccessFlags</unmanaged>
        public SlimDX2.Direct3D11.CpuAccessFlags CpuAccessFlags;
        
        /// <summary>	
        /// Miscellaneous resource properties (see <see cref="SlimDX2.Direct3D11.ResourceOptionFlags"/>).	
        /// </summary>	
        /// <unmanaged>UINT MiscFlags</unmanaged>
        public SlimDX2.Direct3D11.ResourceOptionFlags OptionFlags;
        
        /// <summary>	
        /// A <see cref="SlimDX2.DXGI.Format"/> enumeration indicating the format the texture will be in after it is loaded.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// Filter the texture using the specified filter (only when resampling). See <see cref="SlimDX2.Direct3D11.FilterFlags"/>.	
        /// </summary>	
        /// <unmanaged>UINT Filter</unmanaged>
        public SlimDX2.Direct3D11.FilterFlags Filter;
        
        /// <summary>	
        /// Filter the texture mip levels using the specified filter (only if generating mipmaps). Valid values are D3DX11_FILTER_NONE, D3DX11_FILTER_POINT, D3DX11_FILTER_LINEAR, or D3DX11_FILTER_TRIANGLE. See <see cref="SlimDX2.Direct3D11.FilterFlags"/>.	
        /// </summary>	
        /// <unmanaged>UINT MipFilter</unmanaged>
        public SlimDX2.Direct3D11.FilterFlags MipFilter;
        
        /// <summary>	
        /// Information about the original image. See <see cref="SlimDX2.Direct3D11.ImageInformation"/>. Can be obtained with {{D3DX11GetImageInfoFromFile}}, <see cref="SlimDX2.Direct3D11.D3DX11.GetImageInfoFromMemory"/>, or {{D3DX11GetImageInfoFromResource}}.	
        /// </summary>	
        /// <unmanaged>D3DX11_IMAGE_INFO* pSrcInfo</unmanaged>
        public IntPtr PSrcInfo;
    }
    
    /// <summary>	
    /// Describes parameters used to load a texture from another texture.	
    /// </summary>	
    /// <remarks>	
    /// This structure is used in a call to <see cref="SlimDX2.Direct3D11.D3DX11.LoadTextureFromTexture"/>.The default values are:	
    /// <code> pSrcBox = NULL; pDstBox = NULL; SrcFirstMip = 0; DstFirstMip = 0; NumMips = D3DX11_DEFAULT; SrcFirstElement = 0; DstFirstElement = 0; NumElements = D3DX11_DEFAULT; Filter = D3DX11_DEFAULT; MipFilter = D3DX11_DEFAULT; </code>	
    /// 	
    /// </remarks>	
    /// <unmanaged>D3DX11_TEXTURE_LOAD_INFO</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct TextureLoadInformation {	
        
        /// <summary>	
        /// Source texture box (see <see cref="SlimDX2.Direct3D11.ResourceRegion"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_BOX* pSrcBox</unmanaged>
        public IntPtr PSrcBox;
        
        /// <summary>	
        /// Destination texture box (see <see cref="SlimDX2.Direct3D11.ResourceRegion"/>).	
        /// </summary>	
        /// <unmanaged>D3D11_BOX* pDstBox</unmanaged>
        public IntPtr PDstBox;
        
        /// <summary>	
        /// Source texture mipmap level, see {{D3D11CalcSubresource}} for more detail.	
        /// </summary>	
        /// <unmanaged>UINT SrcFirstMip</unmanaged>
        public int SrcFirstMip;
        
        /// <summary>	
        /// Destination texture mipmap level, see {{D3D11CalcSubresource}} for more detail.	
        /// </summary>	
        /// <unmanaged>UINT DstFirstMip</unmanaged>
        public int DstFirstMip;
        
        /// <summary>	
        /// Number of mipmap levels in the source texture.	
        /// </summary>	
        /// <unmanaged>UINT NumMips</unmanaged>
        public int NumMips;
        
        /// <summary>	
        /// First element of the source texture.	
        /// </summary>	
        /// <unmanaged>UINT SrcFirstElement</unmanaged>
        public int SrcFirstElement;
        
        /// <summary>	
        /// First element of the destination texture.	
        /// </summary>	
        /// <unmanaged>UINT DstFirstElement</unmanaged>
        public int DstFirstElement;
        
        /// <summary>	
        /// Number of elements to load.	
        /// </summary>	
        /// <unmanaged>UINT NumElements</unmanaged>
        public int NumElements;
        
        /// <summary>	
        /// Filtering options during resampling (see <see cref="SlimDX2.Direct3D11.FilterFlags"/>).	
        /// </summary>	
        /// <unmanaged>UINT Filter</unmanaged>
        public SlimDX2.Direct3D11.FilterFlags Filter;
        
        /// <summary>	
        /// Filtering options when generating mip levels (see <see cref="SlimDX2.Direct3D11.FilterFlags"/>).	
        /// </summary>	
        /// <unmanaged>UINT MipFilter</unmanaged>
        public SlimDX2.Direct3D11.FilterFlags MipFilter;
    }
}
