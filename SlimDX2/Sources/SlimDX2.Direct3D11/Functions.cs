// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Functions for SlimDX2.Direct3D11 namespace.
//     This code was generated by a tool.
//     Date : 11/09/2010 17:36:57
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SlimDX2.Direct3D11 {


	/// <summary>
    /// D3D11 Functions.
    /// </summary>
    static partial class D3D11 {   
        
        /// <summary>Constant D3D11_SDK_VERSION.</summary>
        public const int SdkVersion = ( 7 );
        
        /// <summary>	
        /// Creates a device that represents the display adapter.	
        /// </summary>	
        /// <remarks>	
        /// This entry-point is supported by the Direct3D 11 runtime, which is available on Windows 7, Windows Server 2008 R2, and as an update to  Windows Vista (KB971644).Set ppDevice and ppImmediateContext to NULL to determine which feature level is supported by looking  at pFeatureLevel without creating a device.For an example, see {{How To: Create a Device and Immediate Context}}; to create a device and a swap chain at the same time,  use <see cref="SlimDX2.Direct3D11.D3D11.CreateDeviceAndSwapChain"/>.If you set the pAdapter parameter to a non-NULL value, you must also set the DriverType parameter to the D3D_DRIVER_TYPE_UNKNOWN value. If you set the pAdapter parameter to a non-NULL value and the DriverType parameter to the D3D_DRIVER_TYPE_HARDWARE value, D3D11CreateDevice returns an <see cref="int"/> of E_INVALIDARG.Differences between Direct3D 10 and Direct3D 11:In Direct3D 10, the presence of pAdapter dictated which adapter to use and the DriverType could  mismatch what the adapter was.In Direct3D 11, if you are trying to create a hardware or a software device, set pAdapter != NULL which constrains  the other inputs to be:DriverType must be D3D_DRIVER_TYPE_UNKNOWNSoftware must be NULL.On the other hand, if pAdapter == NULL, the DriverType cannot be set to D3D_DRIVER_TYPE_UNKNOWN; it can be set to either:If DriverType == D3D_DRIVER_TYPE_SOFTWARE,  Software cannot be NULL.If DriverType == D3D_DRIVER_TYPE_HARDWARE, the adapter used will be the default adapter, which is the first adapter that is enumerated by {{IDXGIFactory1::EnumAdapters}}?	
        /// </remarks>	
        /// <param name="pAdapter">A pointer to the video adapter to use when creating a {{device}}. Pass NULL to use the default adapter, which is the first adapter that is enumerated by {{IDXGIFactory1::EnumAdapters}}. Note??Do not mix the use of DXGI 1.0 (<see cref="SlimDX2.DXGI.Factory"/>) and DXGI 1.1 (<see cref="SlimDX2.DXGI.Factory1"/>) in an application. Use IDXGIFactory or IDXGIFactory1, but not both in an application.</param>
        /// <param name="driverType">The <see cref="SlimDX2.Direct3D.DriverType"/>, which represents the driver type to create.</param>
        /// <param name="software">A handle to a DLL that implements a software rasterizer.  If DriverType is D3D_DRIVER_TYPE_SOFTWARE,  Software must not be NULL. Get the handle by  calling {{LoadLibrary}},  {{LoadLibraryEx}} ,  or {{GetModuleHandle}}.</param>
        /// <param name="flags">The runtime {{layers}} to enable (see <see cref="SlimDX2.Direct3D11.DeviceCreationFlags"/>);  values can be bitwise OR'd together.</param>
        /// <param name="pFeatureLevels">A pointer to an array of <see cref="SlimDX2.Direct3D.FeatureLevel"/>s, which determine the order of feature levels to attempt to create.  Use default parameters to get the greatest feature level available. If pFeatureLevels is set to NULL,  the following array of feature levels will be used:<code> { D3D_FEATURE_LEVEL_11_0, D3D_FEATURE_LEVEL_10_1, D3D_FEATURE_LEVEL_10_0, D3D_FEATURE_LEVEL_9_3, D3D_FEATURE_LEVEL_9_2, D3D_FEATURE_LEVEL_9_1,}; </code></param>
        /// <param name="featureLevels">The number of elements in pFeatureLevels.</param>
        /// <param name="sDKVersion">The SDK version; use D3D11_SDK_VERSION.</param>
        /// <param name="ppDevice">Returns the address of a pointer to an <see cref="SlimDX2.Direct3D11.Device"/> object that represents the device created.</param>
        /// <param name="pFeatureLevel">If successful, returns the first <see cref="SlimDX2.Direct3D.FeatureLevel"/> from the pFeatureLevels array which succeeded. Otherwise, returns 0.</param>
        /// <param name="ppImmediateContext">Returns the address of a pointer to an <see cref="SlimDX2.Direct3D11.DeviceContext"/> object that represents the device context.</param>
        /// <returns>This method returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3D11CreateDevice([In, Optional] IDXGIAdapter* pAdapter,[None] D3D_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[In, Buffer, Optional] const D3D_FEATURE_LEVEL* pFeatureLevels,[None] UINT FeatureLevels,[None] UINT SDKVersion,[Out, Optional] ID3D11Device** ppDevice,[Out, Optional] D3D_FEATURE_LEVEL* pFeatureLevel,[Out, Optional] ID3D11DeviceContext** ppImmediateContext)</unmanaged>
		public static SlimDX2.Result CreateDevice(SlimDX2.DXGI.Adapter pAdapter, SlimDX2.Direct3D.DriverType driverType, IntPtr software, SlimDX2.Direct3D11.DeviceCreationFlags flags, SlimDX2.Direct3D.FeatureLevel[] pFeatureLevels, int featureLevels, int sDKVersion, out SlimDX2.Direct3D11.Device ppDevice, out SlimDX2.Direct3D.FeatureLevel pFeatureLevel, out SlimDX2.Direct3D11.DeviceContext ppImmediateContext) {
            unsafe {
                IntPtr ppDevice_ = IntPtr.Zero;
                IntPtr ppImmediateContext_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3D11CreateDevice_((pAdapter == null)?IntPtr.Zero:pAdapter.NativePointer,  driverType,  software,  flags,  pFeatureLevels,  featureLevels,  sDKVersion, out ppDevice_, out pFeatureLevel, out ppImmediateContext_);
                ppDevice = (ppDevice_ == IntPtr.Zero)?null:new SlimDX2.Direct3D11.Device(ppDevice_);
                ppImmediateContext = (ppImmediateContext_ == IntPtr.Zero)?null:new SlimDX2.Direct3D11.DeviceContext(ppImmediateContext_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3D11CreateDevice([In, Optional] IDXGIAdapter* pAdapter,[None] D3D_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[In, Buffer, Optional] const D3D_FEATURE_LEVEL* pFeatureLevels,[None] UINT FeatureLevels,[None] UINT SDKVersion,[Out, Optional] ID3D11Device** ppDevice,[Out, Optional] D3D_FEATURE_LEVEL* pFeatureLevel,[Out, Optional] ID3D11DeviceContext** ppImmediateContext)</unmanaged>
		[DllImport("d3d11.dll", EntryPoint = "D3D11CreateDevice", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3D11CreateDevice_(IntPtr pAdapter, SlimDX2.Direct3D.DriverType driverType, IntPtr software, SlimDX2.Direct3D11.DeviceCreationFlags flags, SlimDX2.Direct3D.FeatureLevel[] pFeatureLevels, int featureLevels, int sDKVersion, out IntPtr ppDevice, out SlimDX2.Direct3D.FeatureLevel pFeatureLevel, out IntPtr ppImmediateContext);		
        
        /// <summary>	
        /// Creates a device that represents the display adapter and a swap chain used for rendering.	
        /// </summary>	
        /// <remarks>	
        /// This entry-point is supported by the Direct3D 11 runtime, which is available on Windows 7, Windows Server 2008 R2, and as an update to  Windows Vista (KB971644).Also, see the remarks section in <see cref="SlimDX2.Direct3D11.D3D11.CreateDevice"/> for details about input parameter dependencies. To create a device without  creating a swap chain, use the <see cref="SlimDX2.Direct3D11.D3D11.CreateDevice"/> function. If you set the pAdapter parameter to a non-NULL value, you must also set the DriverType parameter to the D3D_DRIVER_TYPE_UNKNOWN value. If you set the pAdapter parameter to a non-NULL value and the DriverType parameter to the D3D_DRIVER_TYPE_HARDWARE value, D3D11CreateDeviceAndSwapChain returns an <see cref="int"/> of E_INVALIDARG.	
        /// </remarks>	
        /// <param name="pAdapter">A pointer to the video adapter to use when creating a {{device}}. Pass NULL to use the default adapter, which is the first adapter enumerated  by {{IDXGIFactory1::EnumAdapters}}. Note Do not mix the use of DXGI 1.0 (<see cref="SlimDX2.DXGI.Factory"/>) and DXGI 1.1 (<see cref="SlimDX2.DXGI.Factory1"/>) in an application. Use IDXGIFactory or IDXGIFactory1, but not both in an application.</param>
        /// <param name="driverType">The <see cref="SlimDX2.Direct3D.DriverType"/>, which represents the driver type to create.</param>
        /// <param name="software">A handle to a DLL that implements a software rasterizer.  If DriverType is D3D_DRIVER_TYPE_SOFTWARE, Software must not be NULL. Get the handle by  calling {{LoadLibrary}},  {{LoadLibraryEx}} ,  or {{GetModuleHandle}}. The value should be non-NULL  when <see cref="SlimDX2.Direct3D.DriverType"/> is D3D_DRIVER_TYPE_SOFTWARE and NULL otherwise.</param>
        /// <param name="flags">The runtime {{layers}} to enable (see <see cref="SlimDX2.Direct3D11.DeviceCreationFlags"/>);  values can be bitwise OR'd together.</param>
        /// <param name="pFeatureLevels">A pointer to an array of <see cref="SlimDX2.Direct3D.FeatureLevel"/>s, which determine the order of feature levels to attempt to create.  Use default parameters to get the greatest feature level available. If pFeatureLevels is set to NULL, the following array of feature  levels will be used:<code> { D3D_FEATURE_LEVEL_11_0, D3D_FEATURE_LEVEL_10_1, D3D_FEATURE_LEVEL_10_0, D3D_FEATURE_LEVEL_9_3, D3D_FEATURE_LEVEL_9_2, D3D_FEATURE_LEVEL_9_1,}; </code></param>
        /// <param name="featureLevels">The number of elements in pFeatureLevels.</param>
        /// <param name="sDKVersion">The SDK version; use D3D11_SDK_VERSION.</param>
        /// <param name="pSwapChainDesc">A pointer to a swap chain description (see <see cref="SlimDX2.DXGI.SwapChainDescription"/>) that contains initialization parameters for the swap chain.</param>
        /// <param name="ppSwapChain">Returns the address of a pointer to the <see cref="SlimDX2.DXGI.SwapChain"/> object that represents the swap chain used for rendering.</param>
        /// <param name="ppDevice">Returns the address of a pointer to an <see cref="SlimDX2.Direct3D11.Device"/> object that represents the device created. Supply NULL as an input to  return the highest supported feature level in pFeatureLevel.</param>
        /// <param name="pFeatureLevel">Returns a pointer to a <see cref="SlimDX2.Direct3D.FeatureLevel"/>, which represents the first element in an array of feature levels supported  by the device.</param>
        /// <param name="ppImmediateContext">Returns the address of a pointer to an <see cref="SlimDX2.Direct3D11.DeviceContext"/> object that represents the device context.</param>
        /// <returns>This method returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3D11CreateDeviceAndSwapChain([In, Optional] IDXGIAdapter* pAdapter,[None] D3D_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[In, Buffer, Optional] const D3D_FEATURE_LEVEL* pFeatureLevels,[None] UINT FeatureLevels,[None] UINT SDKVersion,[In] const DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[Out, Optional] IDXGISwapChain** ppSwapChain,[Out, Optional] ID3D11Device** ppDevice,[Out, Optional] D3D_FEATURE_LEVEL* pFeatureLevel,[Out, Optional] ID3D11DeviceContext** ppImmediateContext)</unmanaged>
		public static SlimDX2.Result CreateDeviceAndSwapChain(SlimDX2.DXGI.Adapter pAdapter, SlimDX2.Direct3D.DriverType driverType, IntPtr software, SlimDX2.Direct3D11.DeviceCreationFlags flags, SlimDX2.Direct3D.FeatureLevel[] pFeatureLevels, int featureLevels, int sDKVersion, ref SlimDX2.DXGI.SwapChainDescription pSwapChainDesc, out SlimDX2.DXGI.SwapChain ppSwapChain, out SlimDX2.Direct3D11.Device ppDevice, out SlimDX2.Direct3D.FeatureLevel pFeatureLevel, out SlimDX2.Direct3D11.DeviceContext ppImmediateContext) {
            unsafe {
                IntPtr ppSwapChain_ = IntPtr.Zero;
                IntPtr ppDevice_ = IntPtr.Zero;
                IntPtr ppImmediateContext_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3D11CreateDeviceAndSwapChain_((pAdapter == null)?IntPtr.Zero:pAdapter.NativePointer,  driverType,  software,  flags,  pFeatureLevels,  featureLevels,  sDKVersion, ref  pSwapChainDesc, out ppSwapChain_, out ppDevice_, out pFeatureLevel, out ppImmediateContext_);
                ppSwapChain = (ppSwapChain_ == IntPtr.Zero)?null:new SlimDX2.DXGI.SwapChain(ppSwapChain_);
                ppDevice = (ppDevice_ == IntPtr.Zero)?null:new SlimDX2.Direct3D11.Device(ppDevice_);
                ppImmediateContext = (ppImmediateContext_ == IntPtr.Zero)?null:new SlimDX2.Direct3D11.DeviceContext(ppImmediateContext_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3D11CreateDeviceAndSwapChain([In, Optional] IDXGIAdapter* pAdapter,[None] D3D_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[In, Buffer, Optional] const D3D_FEATURE_LEVEL* pFeatureLevels,[None] UINT FeatureLevels,[None] UINT SDKVersion,[In] const DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[Out, Optional] IDXGISwapChain** ppSwapChain,[Out, Optional] ID3D11Device** ppDevice,[Out, Optional] D3D_FEATURE_LEVEL* pFeatureLevel,[Out, Optional] ID3D11DeviceContext** ppImmediateContext)</unmanaged>
		[DllImport("d3d11.dll", EntryPoint = "D3D11CreateDeviceAndSwapChain", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3D11CreateDeviceAndSwapChain_(IntPtr pAdapter, SlimDX2.Direct3D.DriverType driverType, IntPtr software, SlimDX2.Direct3D11.DeviceCreationFlags flags, SlimDX2.Direct3D.FeatureLevel[] pFeatureLevels, int featureLevels, int sDKVersion, ref SlimDX2.DXGI.SwapChainDescription pSwapChainDesc, out IntPtr ppSwapChain, out IntPtr ppDevice, out SlimDX2.Direct3D.FeatureLevel pFeatureLevel, out IntPtr ppImmediateContext);		
    }

	/// <summary>
    /// D3DX11 Functions.
    /// </summary>
    static partial class D3DX11 {   
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="d3DSdkVersion">No documentation.</param>
        /// <param name="d3DX11SdkVersion">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT D3DX11CheckVersion([None] UINT D3DSdkVersion,[None] UINT D3DX11SdkVersion)</unmanaged>
		public static SlimDX2.Result CheckVersion(int d3DSdkVersion, int d3DX11SdkVersion) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11CheckVersion_( d3DSdkVersion,  d3DX11SdkVersion);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11CheckVersion([None] UINT D3DSdkVersion,[None] UINT D3DX11SdkVersion)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11CheckVersion", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11CheckVersion_(int d3DSdkVersion, int d3DX11SdkVersion);		
        
        /// <summary>	
        /// Removes all resources from the device by setting their pointers to NULL. This should be called during shutdown of your application. It helps ensure that when one is releasing all of their resources that none of them are bound to the device.	
        /// </summary>	
        /// <param name="pContext">Pointer to an <see cref="SlimDX2.Direct3D11.DeviceContext"/> object.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11UnsetAllDeviceObjects([None] ID3D11DeviceContext* pContext)</unmanaged>
		public static SlimDX2.Result UnsetAllDeviceObjects(SlimDX2.Direct3D11.DeviceContext pContext) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11UnsetAllDeviceObjects_((pContext == null)?IntPtr.Zero:pContext.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11UnsetAllDeviceObjects([None] ID3D11DeviceContext* pContext)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11UnsetAllDeviceObjects", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11UnsetAllDeviceObjects_(IntPtr pContext);		
        
        /// <summary>	
        /// Retrieves information about a given image file.	
        /// </summary>	
        /// <remarks>	
        /// This function supports both Unicode and ANSI strings.	
        /// </remarks>	
        /// <param name="pSrcFile">File name of image to retrieve information about. If UNICODE or _UNICODE are defined, this parameter type is LPCWSTR, otherwise, the type is LPCSTR.</param>
        /// <param name="pPump">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See {{ID3DX11ThreadPump Interface}}.</param>
        /// <param name="pSrcInfo">Pointer to a <see cref="SlimDX2.Direct3D11.ImageInformation"/> to be filled with the description of the data in the source file.</param>
        /// <param name="pHResult">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following: D3DERR_INVALIDCALL</returns>
        /// <unmanaged>HRESULT D3DX11GetImageInfoFromFileW([None] const wchar* pSrcFile,[None] void* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result GetImageInfoFromFile(string pSrcFile, IntPtr pPump, ref SlimDX2.Direct3D11.ImageInformation pSrcInfo, ref int pHResult) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11GetImageInfoFromFileW_( pSrcFile,  pPump, ref  pSrcInfo, ref  pHResult);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11GetImageInfoFromFileW([None] const wchar* pSrcFile,[None] void* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11GetImageInfoFromFileW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11GetImageInfoFromFileW_([MarshalAs(UnmanagedType.LPWStr),In] string pSrcFile, IntPtr pPump, ref SlimDX2.Direct3D11.ImageInformation pSrcInfo, ref int pHResult);		
        
        /// <summary>	
        /// Retrieves information about a given image in a resource.	
        /// </summary>	
        /// <remarks>	
        /// The compiler setting also determines the function version. If Unicode is defined, the function call resolves to D3DX11GetImageInfoFromResourceW. Otherwise, the function call resolves to D3DX11GetImageInfoFromResourceA because ANSI strings are being used.	
        /// </remarks>	
        /// <param name="hSrcModule">Module where the resource is loaded. Set this parameter to NULL to specify the module associated with the image that the operating system used to create the current process.</param>
        /// <param name="pSrcResource">Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. See Remarks.</param>
        /// <param name="pPump">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See {{ID3DX11ThreadPump Interface}}.</param>
        /// <param name="pSrcInfo">Pointer to a D3DX11_IMAGE_INFO structure to be filled with the description of the data in the source file.</param>
        /// <param name="pHResult">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following: D3DERR_INVALIDCALL</returns>
        /// <unmanaged>HRESULT D3DX11GetImageInfoFromResourceW([None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[None] void* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result GetImageInfoFromResource(IntPtr hSrcModule, string pSrcResource, IntPtr pPump, ref SlimDX2.Direct3D11.ImageInformation pSrcInfo, ref int pHResult) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11GetImageInfoFromResourceW_( hSrcModule,  pSrcResource,  pPump, ref  pSrcInfo, ref  pHResult);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11GetImageInfoFromResourceW([None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[None] void* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11GetImageInfoFromResourceW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11GetImageInfoFromResourceW_(IntPtr hSrcModule, [MarshalAs(UnmanagedType.LPWStr),In] string pSrcResource, IntPtr pPump, ref SlimDX2.Direct3D11.ImageInformation pSrcInfo, ref int pHResult);		
        
        /// <summary>	
        /// Get information about an image already loaded into memory.	
        /// </summary>	
        /// <param name="pSrcData">Pointer to the image in memory.</param>
        /// <param name="srcDataSize">Size of the image in memory, in bytes.</param>
        /// <param name="pPump">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See {{ID3DX11ThreadPump Interface}}.</param>
        /// <param name="pSrcInfo">Information about the image in memory.</param>
        /// <param name="pHResult">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11GetImageInfoFromMemory([None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[None] void* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result GetImageInfoFromMemory(IntPtr pSrcData, SlimDX2.Size srcDataSize, IntPtr pPump, ref SlimDX2.Direct3D11.ImageInformation pSrcInfo, ref int pHResult) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11GetImageInfoFromMemory_( pSrcData,  srcDataSize,  pPump, ref  pSrcInfo, ref  pHResult);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11GetImageInfoFromMemory([None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[None] void* pPump,[None] D3DX11_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11GetImageInfoFromMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11GetImageInfoFromMemory_(IntPtr pSrcData, SlimDX2.Size srcDataSize, IntPtr pPump, ref SlimDX2.Direct3D11.ImageInformation pSrcInfo, ref int pHResult);		
        
        /// <summary>	
        /// Create a shader-resource view from a file.	
        /// </summary>	
        /// <param name="pDevice">A pointer to the device (see <see cref="SlimDX2.Direct3D11.Device"/>) that will use the resource.</param>
        /// <param name="pSrcFile">Name of the file that contains the shader-resource view. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <param name="pLoadInfo">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pPump">Pointer to a thread-pump interface (see {{ID3DX11ThreadPump Interface}}). If NULL is specified, this function will behave synchronously and will not return until it is finished.</param>
        /// <param name="ppShaderResourceView">Address of a pointer to the shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceView"/>).</param>
        /// <param name="pHResult">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromFileW([None] ID3D11Device* pDevice,[None] const wchar* pSrcFile,[None] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D11ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateShaderResourceViewFromFile(SlimDX2.Direct3D11.Device pDevice, string pSrcFile, ref SlimDX2.Direct3D11.ImageLoadInformation pLoadInfo, IntPtr pPump, out SlimDX2.Direct3D11.ShaderResourceView ppShaderResourceView, ref int pHResult) {
            unsafe {
                IntPtr ppShaderResourceView_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11CreateShaderResourceViewFromFileW_((pDevice == null)?IntPtr.Zero:pDevice.NativePointer,  pSrcFile, ref  pLoadInfo,  pPump, out ppShaderResourceView_, ref  pHResult);
                ppShaderResourceView = (ppShaderResourceView_ == IntPtr.Zero)?null:new SlimDX2.Direct3D11.ShaderResourceView(ppShaderResourceView_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromFileW([None] ID3D11Device* pDevice,[None] const wchar* pSrcFile,[None] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D11ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11CreateShaderResourceViewFromFileW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11CreateShaderResourceViewFromFileW_(IntPtr pDevice, [MarshalAs(UnmanagedType.LPWStr),In] string pSrcFile, ref SlimDX2.Direct3D11.ImageLoadInformation pLoadInfo, IntPtr pPump, out IntPtr ppShaderResourceView, ref int pHResult);		
        
        /// <summary>	
        /// Create a texture resource from a file.	
        /// </summary>	
        /// <param name="pDevice">A pointer to the device (see <see cref="SlimDX2.Direct3D11.Device"/>) that will use the resource.</param>
        /// <param name="pSrcFile">The name of the file containing the resource. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <param name="pLoadInfo">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pPump">A pointer to a thread pump interface (see {{ID3DX11ThreadPump Interface}}). If NULL is specified, this function will behave synchronously and will not return until it is finished.</param>
        /// <param name="ppTexture">The address of a pointer to the texture resource (see <see cref="SlimDX2.Direct3D11.Resource"/>).</param>
        /// <param name="pHResult">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11CreateTextureFromFileW([None] ID3D11Device* pDevice,[None] const wchar* pSrcFile,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D11Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		internal static SlimDX2.Result CreateTextureFromFile(SlimDX2.Direct3D11.Device pDevice, string pSrcFile, SlimDX2.Direct3D11.ImageLoadInformation? pLoadInfo, IntPtr pPump, out SlimDX2.Direct3D11.Resource ppTexture, ref int pHResult) {
            unsafe {
							
                SlimDX2.Direct3D11.ImageLoadInformation pLoadInfo_ = new SlimDX2.Direct3D11.ImageLoadInformation();
                if (pLoadInfo.HasValue)
                    pLoadInfo_ = pLoadInfo.Value;								
                IntPtr ppTexture_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11CreateTextureFromFileW_((pDevice == null)?IntPtr.Zero:pDevice.NativePointer,  pSrcFile, (pLoadInfo.HasValue)?new IntPtr(&pLoadInfo_):IntPtr.Zero,  pPump, out ppTexture_, ref  pHResult);
                ppTexture = (ppTexture_ == IntPtr.Zero)?null:new SlimDX2.Direct3D11.Resource(ppTexture_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11CreateTextureFromFileW([None] ID3D11Device* pDevice,[None] const wchar* pSrcFile,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D11Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11CreateTextureFromFileW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11CreateTextureFromFileW_(IntPtr pDevice, [MarshalAs(UnmanagedType.LPWStr),In] string pSrcFile, IntPtr pLoadInfo, IntPtr pPump, out IntPtr ppTexture, ref int pHResult);		
        
        /// <summary>	
        /// Create a shader-resource view from a resource.	
        /// </summary>	
        /// <param name="pDevice">A pointer to the device (see <see cref="SlimDX2.Direct3D11.Device"/>) that will use the resource.</param>
        /// <param name="hSrcModule">Handle to the resource module containing the shader-resource view. HMODULE can be obtained with {{GetModuleHandle Function}}.</param>
        /// <param name="pSrcResource">Name of the shader resource view in hSrcModule. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <param name="pLoadInfo">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pPump">A pointer to a thread pump interface (see {{ID3DX11ThreadPump Interface}}). If NULL is specified, this function will behave synchronously and will not return until it is finished.</param>
        /// <param name="ppShaderResourceView">Address of a pointer to the shader-resource view (see <see cref="SlimDX2.Direct3D11.ShaderResourceView"/>).</param>
        /// <param name="pHResult">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromResourceW([None] ID3D11Device* pDevice,[None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[None] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D11ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateShaderResourceViewFromResource(SlimDX2.Direct3D11.Device pDevice, IntPtr hSrcModule, string pSrcResource, ref SlimDX2.Direct3D11.ImageLoadInformation pLoadInfo, IntPtr pPump, out SlimDX2.Direct3D11.ShaderResourceView ppShaderResourceView, ref int pHResult) {
            unsafe {
                IntPtr ppShaderResourceView_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11CreateShaderResourceViewFromResourceW_((pDevice == null)?IntPtr.Zero:pDevice.NativePointer,  hSrcModule,  pSrcResource, ref  pLoadInfo,  pPump, out ppShaderResourceView_, ref  pHResult);
                ppShaderResourceView = (ppShaderResourceView_ == IntPtr.Zero)?null:new SlimDX2.Direct3D11.ShaderResourceView(ppShaderResourceView_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromResourceW([None] ID3D11Device* pDevice,[None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[None] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D11ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11CreateShaderResourceViewFromResourceW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11CreateShaderResourceViewFromResourceW_(IntPtr pDevice, IntPtr hSrcModule, [MarshalAs(UnmanagedType.LPWStr),In] string pSrcResource, ref SlimDX2.Direct3D11.ImageLoadInformation pLoadInfo, IntPtr pPump, out IntPtr ppShaderResourceView, ref int pHResult);		
        
        /// <summary>	
        /// Create a texture from another resource.	
        /// </summary>	
        /// <param name="pDevice">A pointer to the device (see <see cref="SlimDX2.Direct3D11.Device"/>) that will use the resource.</param>
        /// <param name="hSrcModule">A handle to the source resource. HMODULE can be obtained with {{GetModuleHandle Function}}.</param>
        /// <param name="pSrcResource">A string that contains the name of the source resource.  If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
        /// <param name="pLoadInfo">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pPump">A pointer to a thread pump interface (see {{ID3DX11ThreadPump Interface}}). If NULL is specified, this function will behave synchronously and will not return until it is finished.</param>
        /// <param name="ppTexture">The address of a pointer to the texture resource (see <see cref="SlimDX2.Direct3D11.Resource"/>).</param>
        /// <param name="pHResult">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11CreateTextureFromResourceW([None] ID3D11Device* pDevice,[None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D11Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		internal static SlimDX2.Result CreateTextureFromResource(SlimDX2.Direct3D11.Device pDevice, IntPtr hSrcModule, string pSrcResource, SlimDX2.Direct3D11.ImageLoadInformation? pLoadInfo, IntPtr pPump, out SlimDX2.Direct3D11.Resource ppTexture, ref int pHResult) {
            unsafe {
							
                SlimDX2.Direct3D11.ImageLoadInformation pLoadInfo_ = new SlimDX2.Direct3D11.ImageLoadInformation();
                if (pLoadInfo.HasValue)
                    pLoadInfo_ = pLoadInfo.Value;								
                IntPtr ppTexture_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11CreateTextureFromResourceW_((pDevice == null)?IntPtr.Zero:pDevice.NativePointer,  hSrcModule,  pSrcResource, (pLoadInfo.HasValue)?new IntPtr(&pLoadInfo_):IntPtr.Zero,  pPump, out ppTexture_, ref  pHResult);
                ppTexture = (ppTexture_ == IntPtr.Zero)?null:new SlimDX2.Direct3D11.Resource(ppTexture_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11CreateTextureFromResourceW([None] ID3D11Device* pDevice,[None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D11Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11CreateTextureFromResourceW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11CreateTextureFromResourceW_(IntPtr pDevice, IntPtr hSrcModule, [MarshalAs(UnmanagedType.LPWStr),In] string pSrcResource, IntPtr pLoadInfo, IntPtr pPump, out IntPtr ppTexture, ref int pHResult);		
        
        /// <summary>	
        /// Create a shader-resource view from a file in memory.	
        /// </summary>	
        /// <param name="pDevice">A pointer to the device (see <see cref="SlimDX2.Direct3D11.Device"/>) that will use the resource.</param>
        /// <param name="pSrcData">Pointer to the file in memory that contains the shader-resource view.</param>
        /// <param name="srcDataSize">Size of the file in memory.</param>
        /// <param name="pLoadInfo">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pPump">A pointer to a thread pump interface (see {{ID3DX11ThreadPump Interface}}). If NULL is specified, this function will behave synchronously and will not return until it is finished.</param>
        /// <param name="ppShaderResourceView">Address of a pointer to the newly created shader resource view. See <see cref="SlimDX2.Direct3D11.ShaderResourceView"/>.</param>
        /// <param name="pHResult">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromMemory([None] ID3D11Device* pDevice,[None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[None] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D11ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateShaderResourceViewFromMemory(SlimDX2.Direct3D11.Device pDevice, IntPtr pSrcData, SlimDX2.Size srcDataSize, ref SlimDX2.Direct3D11.ImageLoadInformation pLoadInfo, IntPtr pPump, out SlimDX2.Direct3D11.ShaderResourceView ppShaderResourceView, ref int pHResult) {
            unsafe {
                IntPtr ppShaderResourceView_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11CreateShaderResourceViewFromMemory_((pDevice == null)?IntPtr.Zero:pDevice.NativePointer,  pSrcData,  srcDataSize, ref  pLoadInfo,  pPump, out ppShaderResourceView_, ref  pHResult);
                ppShaderResourceView = (ppShaderResourceView_ == IntPtr.Zero)?null:new SlimDX2.Direct3D11.ShaderResourceView(ppShaderResourceView_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11CreateShaderResourceViewFromMemory([None] ID3D11Device* pDevice,[None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[None] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D11ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11CreateShaderResourceViewFromMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11CreateShaderResourceViewFromMemory_(IntPtr pDevice, IntPtr pSrcData, SlimDX2.Size srcDataSize, ref SlimDX2.Direct3D11.ImageLoadInformation pLoadInfo, IntPtr pPump, out IntPtr ppShaderResourceView, ref int pHResult);		
        
        /// <summary>	
        /// Create a texture resource from a file residing in system memory.	
        /// </summary>	
        /// <param name="pDevice">A pointer to the device (see <see cref="SlimDX2.Direct3D11.Device"/>) that will use the resource.</param>
        /// <param name="pSrcData">Pointer to the resource in system memory.</param>
        /// <param name="srcDataSize">Size of the resource in system memory.</param>
        /// <param name="pLoadInfo">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D11.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pPump">A pointer to a thread pump interface (see {{ID3DX11ThreadPump Interface}}). If NULL is specified, this function will behave synchronously and will not return until it is finished.</param>
        /// <param name="ppTexture">Address of a pointer to the created resource. See <see cref="SlimDX2.Direct3D11.Resource"/>.</param>
        /// <param name="pHResult">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11CreateTextureFromMemory([None] ID3D11Device* pDevice,[None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D11Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		internal static SlimDX2.Result CreateTextureFromMemory(SlimDX2.Direct3D11.Device pDevice, IntPtr pSrcData, SlimDX2.Size srcDataSize, SlimDX2.Direct3D11.ImageLoadInformation? pLoadInfo, IntPtr pPump, out SlimDX2.Direct3D11.Resource ppTexture, ref int pHResult) {
            unsafe {
							
                SlimDX2.Direct3D11.ImageLoadInformation pLoadInfo_ = new SlimDX2.Direct3D11.ImageLoadInformation();
                if (pLoadInfo.HasValue)
                    pLoadInfo_ = pLoadInfo.Value;								
                IntPtr ppTexture_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11CreateTextureFromMemory_((pDevice == null)?IntPtr.Zero:pDevice.NativePointer,  pSrcData,  srcDataSize, (pLoadInfo.HasValue)?new IntPtr(&pLoadInfo_):IntPtr.Zero,  pPump, out ppTexture_, ref  pHResult);
                ppTexture = (ppTexture_ == IntPtr.Zero)?null:new SlimDX2.Direct3D11.Resource(ppTexture_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11CreateTextureFromMemory([None] ID3D11Device* pDevice,[None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX11_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D11Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11CreateTextureFromMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11CreateTextureFromMemory_(IntPtr pDevice, IntPtr pSrcData, SlimDX2.Size srcDataSize, IntPtr pLoadInfo, IntPtr pPump, out IntPtr ppTexture, ref int pHResult);		
        
        /// <summary>	
        /// Load a texture from a texture.	
        /// </summary>	
        /// <param name="pContext">Pointer to the source texture. See <see cref="SlimDX2.Direct3D11.Resource"/>.</param>
        /// <param name="pSrcTexture">Pointer to texture loading parameters. See <see cref="SlimDX2.Direct3D11.TextureLoadInformation"/>.</param>
        /// <param name="pLoadInfo">Pointer to the destination texture. See <see cref="SlimDX2.Direct3D11.Resource"/>.</param>
        /// <param name="pDstTexture">No documentation.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11LoadTextureFromTexture([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pSrcTexture,[None] D3DX11_TEXTURE_LOAD_INFO* pLoadInfo,[None] ID3D11Resource* pDstTexture)</unmanaged>
		public static SlimDX2.Result LoadTextureFromTexture(SlimDX2.Direct3D11.DeviceContext pContext, SlimDX2.Direct3D11.Resource pSrcTexture, ref SlimDX2.Direct3D11.TextureLoadInformation pLoadInfo, SlimDX2.Direct3D11.Resource pDstTexture) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11LoadTextureFromTexture_((pContext == null)?IntPtr.Zero:pContext.NativePointer, (pSrcTexture == null)?IntPtr.Zero:pSrcTexture.NativePointer, ref  pLoadInfo, (pDstTexture == null)?IntPtr.Zero:pDstTexture.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11LoadTextureFromTexture([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pSrcTexture,[None] D3DX11_TEXTURE_LOAD_INFO* pLoadInfo,[None] ID3D11Resource* pDstTexture)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11LoadTextureFromTexture", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11LoadTextureFromTexture_(IntPtr pContext, IntPtr pSrcTexture, ref SlimDX2.Direct3D11.TextureLoadInformation pLoadInfo, IntPtr pDstTexture);		
        
        /// <summary>	
        /// Generates mipmap chain using a particular texture filter.	
        /// </summary>	
        /// <param name="pContext">A pointer to an <see cref="SlimDX2.Direct3D11.DeviceContext"/> object.</param>
        /// <param name="pTexture">The texture object to be filtered. See <see cref="SlimDX2.Direct3D11.Resource"/>.</param>
        /// <param name="srcLevel">The mipmap level whose data is used to generate the rest of the mipmap chain.</param>
        /// <param name="mipFilter">Flags controlling how each miplevel is filtered (or D3DX11_DEFAULT for D3DX11_FILTER_BOX). See <see cref="SlimDX2.Direct3D11.FilterFlags"/>.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11FilterTexture([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pTexture,[None] UINT SrcLevel,[None] UINT MipFilter)</unmanaged>
		public static SlimDX2.Result FilterTexture(SlimDX2.Direct3D11.DeviceContext pContext, SlimDX2.Direct3D11.Resource pTexture, int srcLevel, int mipFilter) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11FilterTexture_((pContext == null)?IntPtr.Zero:pContext.NativePointer, (pTexture == null)?IntPtr.Zero:pTexture.NativePointer,  srcLevel,  mipFilter);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11FilterTexture([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pTexture,[None] UINT SrcLevel,[None] UINT MipFilter)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11FilterTexture", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11FilterTexture_(IntPtr pContext, IntPtr pTexture, int srcLevel, int mipFilter);		
        
        /// <summary>	
        /// Save a texture to a file.	
        /// </summary>	
        /// <param name="pContext">A pointer to an <see cref="SlimDX2.Direct3D11.DeviceContext"/> object.</param>
        /// <param name="pSrcTexture">Pointer to the texture to be saved. See <see cref="SlimDX2.Direct3D11.Resource"/>.</param>
        /// <param name="destFormat">The format the texture will be saved as (see <see cref="SlimDX2.Direct3D11.ImageFileFormat"/>). D3DX11_IFF_DDS is the preferred format since it is the only option that supports all the formats in <see cref="SlimDX2.DXGI.Format"/>.</param>
        /// <param name="pDestFile">Name of the destination output file where the texture will be saved.  If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}; use the return value to see if the DestFormat is supported.</returns>
        /// <unmanaged>HRESULT D3DX11SaveTextureToFileW([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pSrcTexture,[None] D3DX11_IMAGE_FILE_FORMAT DestFormat,[None] const wchar* pDestFile)</unmanaged>
		public static SlimDX2.Result SaveTextureToFile(SlimDX2.Direct3D11.DeviceContext pContext, SlimDX2.Direct3D11.Resource pSrcTexture, SlimDX2.Direct3D11.ImageFileFormat destFormat, string pDestFile) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11SaveTextureToFileW_((pContext == null)?IntPtr.Zero:pContext.NativePointer, (pSrcTexture == null)?IntPtr.Zero:pSrcTexture.NativePointer,  destFormat,  pDestFile);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11SaveTextureToFileW([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pSrcTexture,[None] D3DX11_IMAGE_FILE_FORMAT DestFormat,[None] const wchar* pDestFile)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11SaveTextureToFileW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11SaveTextureToFileW_(IntPtr pContext, IntPtr pSrcTexture, SlimDX2.Direct3D11.ImageFileFormat destFormat, [MarshalAs(UnmanagedType.LPWStr),In] string pDestFile);		
        
        /// <summary>	
        /// Save a texture to memory.	
        /// </summary>	
        /// <param name="pContext">A pointer to an <see cref="SlimDX2.Direct3D11.DeviceContext"/> object.</param>
        /// <param name="pSrcTexture">Pointer to the texture to be saved. See <see cref="SlimDX2.Direct3D11.Resource"/>.</param>
        /// <param name="destFormat">The format the texture will be saved as. See <see cref="SlimDX2.Direct3D11.ImageFileFormat"/>.</param>
        /// <param name="ppDestBuf">Address of a pointer to the memory containing the saved texture.</param>
        /// <param name="flags">Optional.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11SaveTextureToMemory([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pSrcTexture,[None] D3DX11_IMAGE_FILE_FORMAT DestFormat,[Out] ID3D10Blob** ppDestBuf,[None] UINT Flags)</unmanaged>
		internal static SlimDX2.Result SaveTextureToMemory(SlimDX2.Direct3D11.DeviceContext pContext, SlimDX2.Direct3D11.Resource pSrcTexture, SlimDX2.Direct3D11.ImageFileFormat destFormat, out SlimDX2.Direct3D.Blob ppDestBuf, int flags) {
            unsafe {
                IntPtr ppDestBuf_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11SaveTextureToMemory_((pContext == null)?IntPtr.Zero:pContext.NativePointer, (pSrcTexture == null)?IntPtr.Zero:pSrcTexture.NativePointer,  destFormat, out ppDestBuf_,  flags);
                ppDestBuf = (ppDestBuf_ == IntPtr.Zero)?null:new SlimDX2.Direct3D.Blob(ppDestBuf_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11SaveTextureToMemory([None] ID3D11DeviceContext* pContext,[None] ID3D11Resource* pSrcTexture,[None] D3DX11_IMAGE_FILE_FORMAT DestFormat,[Out] ID3D10Blob** ppDestBuf,[None] UINT Flags)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11SaveTextureToMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11SaveTextureToMemory_(IntPtr pContext, IntPtr pSrcTexture, SlimDX2.Direct3D11.ImageFileFormat destFormat, out IntPtr ppDestBuf, int flags);		
        
        /// <summary>	
        /// Converts a height map into a normal map. The (x,y,z) components of each normal are mapped to the (r,g,b) channels of the output texture.	
        /// </summary>	
        /// <remarks>	
        /// This method computes the normal by using the central difference with a kernel size of 3x3. RGB channels in the destination contain biased (x,y,z) components of the normal. The central differencing denominator is hardcoded to 2.0.	
        /// </remarks>	
        /// <param name="pContext">Pointer to an <see cref="SlimDX2.Direct3D11.DeviceContext"/> interface, representing the source height-map texture.</param>
        /// <param name="pSrcTexture">Pointer to an <see cref="SlimDX2.Direct3D11.Texture2D"/> interface, representing the source height-map texture.</param>
        /// <param name="flags">One or more D3DX_NORMALMAP flags that control generation of normal maps.</param>
        /// <param name="channel">One D3DX_CHANNEL flag specifying the source of height information.</param>
        /// <param name="amplitude">Constant value multiplier that increases (or decreases) the values in the normal map. Higher values usually make bumps more visible, lower values usually make bumps less visible.</param>
        /// <param name="pDestTexture">Pointer to an <see cref="SlimDX2.Direct3D11.Texture2D"/> interface, representing the destination texture.</param>
        /// <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following value: D3DERR_INVALIDCALL.</returns>
        /// <unmanaged>HRESULT D3DX11ComputeNormalMap([None] ID3D11DeviceContext* pContext,[None] ID3D11Texture2D* pSrcTexture,[None] UINT Flags,[None] UINT Channel,[None] FLOAT Amplitude,[None] ID3D11Texture2D* pDestTexture)</unmanaged>
		public static SlimDX2.Result ComputeNormalMap(SlimDX2.Direct3D11.DeviceContext pContext, SlimDX2.Direct3D11.Texture2D pSrcTexture, SlimDX2.Direct3D11.NormalMapFlags flags, SlimDX2.Direct3D11.ChannelFlags channel, float amplitude, SlimDX2.Direct3D11.Texture2D pDestTexture) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11ComputeNormalMap_((pContext == null)?IntPtr.Zero:pContext.NativePointer, (pSrcTexture == null)?IntPtr.Zero:pSrcTexture.NativePointer,  flags,  channel,  amplitude, (pDestTexture == null)?IntPtr.Zero:pDestTexture.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11ComputeNormalMap([None] ID3D11DeviceContext* pContext,[None] ID3D11Texture2D* pSrcTexture,[None] UINT Flags,[None] UINT Channel,[None] FLOAT Amplitude,[None] ID3D11Texture2D* pDestTexture)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11ComputeNormalMap", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11ComputeNormalMap_(IntPtr pContext, IntPtr pSrcTexture, SlimDX2.Direct3D11.NormalMapFlags flags, SlimDX2.Direct3D11.ChannelFlags channel, float amplitude, IntPtr pDestTexture);		
        
        /// <summary>	
        /// Projects a function represented in a cube map into spherical harmonics.	
        /// </summary>	
        /// <param name="pContext">A pointer to an <see cref="SlimDX2.Direct3D11.DeviceContext"/> object.</param>
        /// <param name="order">Order of the SH evaluation, generates Order^2 coefficients whose degree is Order-1. Valid range is between 2 and 6.</param>
        /// <param name="pCubeMap">A pointer to an <see cref="SlimDX2.Direct3D11.Texture2D"/> that represents a cubemap that is going to be projected into spherical harmonics.</param>
        /// <param name="pROut">Output SH vector for red.</param>
        /// <param name="pGOut">Output SH vector for green.</param>
        /// <param name="pBOut">Output SH vector for blue.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX11SHProjectCubeMap([None] ID3D11DeviceContext* pContext,[In] UINT Order,[None] ID3D11Texture2D* pCubeMap,[Out, Buffer] FLOAT* pROut,[Out, Buffer, Optional] FLOAT* pGOut,[Out, Buffer, Optional] FLOAT* pBOut)</unmanaged>
		public static SlimDX2.Result SHProjectCubeMap(SlimDX2.Direct3D11.DeviceContext pContext, int order, SlimDX2.Direct3D11.Texture2D pCubeMap, float[] pROut, float[] pGOut, float[] pBOut) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX11SHProjectCubeMap_((pContext == null)?IntPtr.Zero:pContext.NativePointer,  order, (pCubeMap == null)?IntPtr.Zero:pCubeMap.NativePointer, pROut, pGOut, pBOut);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX11SHProjectCubeMap([None] ID3D11DeviceContext* pContext,[In] UINT Order,[None] ID3D11Texture2D* pCubeMap,[Out, Buffer] FLOAT* pROut,[Out, Buffer, Optional] FLOAT* pGOut,[Out, Buffer, Optional] FLOAT* pBOut)</unmanaged>
		[DllImport("d3dx11_43.dll", EntryPoint = "D3DX11SHProjectCubeMap", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX11SHProjectCubeMap_(IntPtr pContext, int order, IntPtr pCubeMap, float[] pROut, float[] pGOut, float[] pBOut);		
    }
}