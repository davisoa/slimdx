// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Enums for SlimDX2.Direct3D10 namespace.
//     This code was generated by a tool.
//     Date : 11/09/2010 17:36:56
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace SlimDX2.Direct3D10 {

    
    /// <summary>	
    /// Type of data contained in an input slot.	
    /// </summary>	
    /// <remarks>	
    /// Use these values to specify the type of data for a particular input element (see <see cref="SlimDX2.Direct3D10.InputElement"/>) of an input-layout object.	
    /// </remarks>	
    /// <unmanaged>D3D10_INPUT_CLASSIFICATION</unmanaged>
    public enum InputClassification : int {	
        
        /// <summary>	
        /// Input data is per-vertex data.	
        /// </summary>	
        /// <unmanaged>D3D10_INPUT_PER_VERTEX_DATA</unmanaged>
        PerVertexData = unchecked((int)0),			
        
        /// <summary>	
        /// Input data is per-instance data.	
        /// </summary>	
        /// <unmanaged>D3D10_INPUT_PER_INSTANCE_DATA</unmanaged>
        PerInstanceData = unchecked((int)1),			
    }
    
    /// <summary>	
    /// Determines the fill mode to use when rendering triangles.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is part of a rasterizer-state object description (see <see cref="SlimDX2.Direct3D10.RasterizerStateDescription"/>).	
    /// </remarks>	
    /// <unmanaged>D3D10_FILL_MODE</unmanaged>
    public enum FillMode : int {	
        
        /// <summary>	
        /// Draw lines connecting the vertices. {{Adjacent vertices}} are not drawn.	
        /// </summary>	
        /// <unmanaged>D3D10_FILL_WIREFRAME</unmanaged>
        Wireframe = unchecked((int)2),			
        
        /// <summary>	
        /// Fill the triangles formed by the vertices. Adjacent vertices are not drawn.	
        /// </summary>	
        /// <unmanaged>D3D10_FILL_SOLID</unmanaged>
        Solid = unchecked((int)3),			
    }
    
    /// <summary>	
    /// Indicates triangles facing a particular direction are not drawn.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is part of a rasterizer-state object description (see <see cref="SlimDX2.Direct3D10.RasterizerStateDescription"/>).	
    /// </remarks>	
    /// <unmanaged>D3D10_CULL_MODE</unmanaged>
    public enum CullMode : int {	
        
        /// <summary>	
        /// Always draw all triangles.	
        /// </summary>	
        /// <unmanaged>D3D10_CULL_NONE</unmanaged>
        None = unchecked((int)1),			
        
        /// <summary>	
        /// Do not draw triangles that are front-facing.	
        /// </summary>	
        /// <unmanaged>D3D10_CULL_FRONT</unmanaged>
        Front = unchecked((int)2),			
        
        /// <summary>	
        /// Do not draw triangles that are back-facing.	
        /// </summary>	
        /// <unmanaged>D3D10_CULL_BACK</unmanaged>
        Back = unchecked((int)3),			
    }
    
    /// <summary>	
    /// Identifies the type of {{resource}} being used.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is used in <see cref="SlimDX2.Direct3D10.Resource.GetTypeInfo"/>, and <see cref="SlimDX2.Direct3D10.ImageInformation"/>.	
    /// </remarks>	
    /// <unmanaged>D3D10_RESOURCE_DIMENSION</unmanaged>
    public enum ResourceDimension : int {	
        
        /// <summary>	
        /// Resource is of unknown type.	
        /// </summary>	
        /// <unmanaged>D3D10_RESOURCE_DIMENSION_UNKNOWN</unmanaged>
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// Resource is a {{buffer}}.	
        /// </summary>	
        /// <unmanaged>D3D10_RESOURCE_DIMENSION_BUFFER</unmanaged>
        Buffer = unchecked((int)1),			
        
        /// <summary>	
        /// Resource is a {{1D texture}}.	
        /// </summary>	
        /// <unmanaged>D3D10_RESOURCE_DIMENSION_TEXTURE1D</unmanaged>
        Texture1D = unchecked((int)2),			
        
        /// <summary>	
        /// Resource is a {{2D texture}}.	
        /// </summary>	
        /// <unmanaged>D3D10_RESOURCE_DIMENSION_TEXTURE2D</unmanaged>
        Texture2D = unchecked((int)3),			
        
        /// <summary>	
        /// Resource is a {{3D texture}}.	
        /// </summary>	
        /// <unmanaged>D3D10_RESOURCE_DIMENSION_TEXTURE3D</unmanaged>
        Texture3D = unchecked((int)4),			
    }
    
    /// <summary>	
    /// Specifies how to access a resource used in a depth-stencil {{view}}.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is used in <see cref="SlimDX2.Direct3D10.DepthStencilViewDescription"/> to create a depth-stencil view.	
    /// </remarks>	
    /// <unmanaged>D3D10_DSV_DIMENSION</unmanaged>
    public enum DepthStencilViewDimension : int {	
        
        /// <summary>	
        /// The resource will be accessed according to its type as determined from the actual instance this enumeration is paired with when the depth-stencil view is created.	
        /// </summary>	
        /// <unmanaged>D3D10_DSV_DIMENSION_UNKNOWN</unmanaged>
        DimensionUnknown = unchecked((int)0),			
        
        /// <summary>	
        /// The resource will be accessed as a {{1D texture}}.	
        /// </summary>	
        /// <unmanaged>D3D10_DSV_DIMENSION_TEXTURE1D</unmanaged>
        DimensionTexture1D = unchecked((int)1),			
        
        /// <summary>	
        /// The resource will be accessed as an array of 1D textures.	
        /// </summary>	
        /// <unmanaged>D3D10_DSV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        DimensionTexture1DArray = unchecked((int)2),			
        
        /// <summary>	
        /// The resource will be accessed as a {{2D texture}}.	
        /// </summary>	
        /// <unmanaged>D3D10_DSV_DIMENSION_TEXTURE2D</unmanaged>
        DimensionTexture2D = unchecked((int)3),			
        
        /// <summary>	
        /// The resource will be accessed as an array of 2D texture.	
        /// </summary>	
        /// <unmanaged>D3D10_DSV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        DimensionTexture2DArray = unchecked((int)4),			
        
        /// <summary>	
        /// The resource will be accessed as a 2D texture with multisampling.	
        /// </summary>	
        /// <unmanaged>D3D10_DSV_DIMENSION_TEXTURE2DMS</unmanaged>
        DimensionTexture2DMultisampled = unchecked((int)5),			
        
        /// <summary>	
        /// The resource will be accessed as an array of 2D textures with multisampling.	
        /// </summary>	
        /// <unmanaged>D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        DimensionTexture2DMultisampledArray = unchecked((int)6),			
    }
    
    /// <summary>	
    /// Specifies how to access a resource used in a render-target {{view}}.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is used in <see cref="SlimDX2.Direct3D10.RenderTargetViewDescription"/> to create a render-target view.	
    /// </remarks>	
    /// <unmanaged>D3D10_RTV_DIMENSION</unmanaged>
    public enum RenderTargetViewDimension : int {	
        
        /// <summary>	
        /// The resource will be accessed according to its type as determined from the actual instance this enumeration is paired with when the render-target view is created.	
        /// </summary>	
        /// <unmanaged>D3D10_RTV_DIMENSION_UNKNOWN</unmanaged>
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// The resource will be accessed as a {{buffer}}.	
        /// </summary>	
        /// <unmanaged>D3D10_RTV_DIMENSION_BUFFER</unmanaged>
        Buffer = unchecked((int)1),			
        
        /// <summary>	
        /// The resource will be accessed as a {{1D texture}}.	
        /// </summary>	
        /// <unmanaged>D3D10_RTV_DIMENSION_TEXTURE1D</unmanaged>
        Texture1D = unchecked((int)2),			
        
        /// <summary>	
        /// The resource will be accessed as an array of 1D textures.	
        /// </summary>	
        /// <unmanaged>D3D10_RTV_DIMENSION_TEXTURE1DARRAY</unmanaged>
        Texture1DArray = unchecked((int)3),			
        
        /// <summary>	
        /// The resource will be accessed as a {{2D texture}}.	
        /// </summary>	
        /// <unmanaged>D3D10_RTV_DIMENSION_TEXTURE2D</unmanaged>
        Texture2D = unchecked((int)4),			
        
        /// <summary>	
        /// The resource will be accessed as an array of 2D textures.	
        /// </summary>	
        /// <unmanaged>D3D10_RTV_DIMENSION_TEXTURE2DARRAY</unmanaged>
        Texture2DArray = unchecked((int)5),			
        
        /// <summary>	
        /// The resource will be accessed as a 2D texture with multisampling.	
        /// </summary>	
        /// <unmanaged>D3D10_RTV_DIMENSION_TEXTURE2DMS</unmanaged>
        Texture2DMultisampled = unchecked((int)6),			
        
        /// <summary>	
        /// The resource will be accessed as an array of 2D textures with multisampling.	
        /// </summary>	
        /// <unmanaged>D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY</unmanaged>
        Texture2DMultisampledArray = unchecked((int)7),			
        
        /// <summary>	
        /// The resource will be accessed as a {{3D texture}}.	
        /// </summary>	
        /// <unmanaged>D3D10_RTV_DIMENSION_TEXTURE3D</unmanaged>
        Texture3D = unchecked((int)8),			
    }
    
    /// <summary>	
    /// Identifies expected resource use during rendering. The usage directly reflects whether a resource is accessible by the CPU and/or the GPU.	
    /// </summary>	
    /// <remarks>	
    /// An application identifies the way a resource is intended to be used (its usage) in a resource description. There are several structures for creating resources including: <see cref="SlimDX2.Direct3D10.Texture1DDescription"/>, <see cref="SlimDX2.Direct3D10.Texture2DDescription"/>, <see cref="SlimDX2.Direct3D10.Texture3DDescription"/>, <see cref="SlimDX2.Direct3D10.BufferDescription"/>, and <see cref="SlimDX2.Direct3D10.ImageLoadInformation"/>.Differences between Direct3D 9 and Direct3D 10:In Direct3D 9, you specify the type of memory a resource should be created in at resource creation time (using D3DPOOL). It was an application's job to decide what memory pool would provide the best combination of functionality and performance.In Direct3D 10, an application no longer specifies what type of memory (the pool) to create a resource in. Instead, you specify the intended usage of the resource, and let the runtime (in concert with the driver and a memory manager) choose the type of memory that will achieve the best performance.?Resource Usage RestrictionsEach usage dictates a tradeoff between functionality and performance. In general, resource accessing is accomplished with the following APIs.CPU access is done with <see cref="SlimDX2.Direct3D10.Buffer.Map"/>, <see cref="SlimDX2.Direct3D10.Texture1D.Map"/>, <see cref="SlimDX2.Direct3D10.Texture2D.Map"/>, or <see cref="SlimDX2.Direct3D10.Texture3D.Map"/>GPU access is done with {{CopySubresourceRegion}}, {{CopyResource}}, or {{UpdateSubresource}}.Use the following table to choose the usage that best describes how the resource will need to be accessed by the CPU and/or the GPU. Of course, there will be performance tradeoffs.Resource UsageDefaultDynamicImmutableStagingGPU-Readyesyes1yesyes1, 2GPU-Writeyes1yes1, 2CPU-Readyes1, 2CPU-Writeyesyes1, 2?1 - This is restricted to {{CopySubresourceRegion}} and {{CopyResource}}.2 - Cannot be a depth-stencil buffer or a multisampled render target.Resource Bind OptionsTo maximize performance, not all resource usage options can be used as input or output resources to the pipeline. This table identifies these limitations.Resource Can Be Bound AsDefaultDynamicImmutableStagingInput to a Stageyes3yes4yesOutput from a Stageyes3?3 - If bound as an input and an output using different views, each view must use different {{subresources}}.4 - The resource can only be created with a single {{subresource}}. The resource cannot be a texture array. The resource cannot be a mipmap chain.	
    /// </remarks>	
    /// <unmanaged>D3D10_USAGE</unmanaged>
    public enum ResourceUsage : int {	
        
        /// <summary>	
        /// A resource that requires read and write access by the GPU. This is likely to be the most common usage choice.	
        /// </summary>	
        /// <unmanaged>D3D10_USAGE_DEFAULT</unmanaged>
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// A resource that can only be read by the GPU. It cannot be written by the GPU, and cannot be accessed at all by the CPU. This type of resource must be initialized when it is created, since it cannot be changed after creation.	
        /// </summary>	
        /// <unmanaged>D3D10_USAGE_IMMUTABLE</unmanaged>
        Immutable = unchecked((int)1),			
        
        /// <summary>	
        /// A resource that is accessible by both the GPU and the CPU (write only). A dynamic resource is a good choice for a resource that will be updated by the CPU at least once per frame. To write to a dynamic resource on the CPU, use a Map method. You can write to a dynamic resource on the GPU using {{CopyResource}} or {{CopySubresourceRegion}}.	
        /// </summary>	
        /// <unmanaged>D3D10_USAGE_DYNAMIC</unmanaged>
        Dynamic = unchecked((int)2),			
        
        /// <summary>	
        /// A resource that supports data transfer (copy) from the GPU to the CPU.	
        /// </summary>	
        /// <unmanaged>D3D10_USAGE_STAGING</unmanaged>
        Staging = unchecked((int)3),			
    }
    
    /// <summary>	
    /// Identifies how to bind a resource to the pipeline.	
    /// </summary>	
    /// <remarks>	
    /// In general, binding flags can be combined using a logical OR (except the constant-buffer flag); however, you should use a single flag to allow the device to optimize the resource usage.This enumeration is used by a:{{Buffer description}} when creating a buffer.Texture description when creating a texture (see <see cref="SlimDX2.Direct3D10.Texture1DDescription"/> or <see cref="SlimDX2.Direct3D10.Texture2DDescription"/> or <see cref="SlimDX2.Direct3D10.Texture3DDescription"/>).A shader-resource buffer is NOT a constant buffer; rather, it is a texture or buffer resource that is bound to a shader, that contains texture or buffer data (it is not limited to a single element type in the buffer). A shader-resource buffer is created with the D3D10_BIND_SHADER_RESOURCE flag and is bound to the pipeline using one of these APIs: <see cref="SlimDX2.Direct3D10.Device.GeometryShaderStage.SetShaderResources"/>, <see cref="SlimDX2.Direct3D10.Device.PixelShaderStage.SetShaderResources"/>, or <see cref="SlimDX2.Direct3D10.Device.VertexShaderStage.SetShaderResources"/>. Furthermore, a shader-resource buffer cannot use the <see cref="SlimDX2.Direct3D10.MapMode.WriteNoOverwrite"/> flag.	
    /// </remarks>	
    /// <unmanaged>D3D10_BIND_FLAG</unmanaged>
    [Flags]
    public enum BindFlags : int {	
        
        /// <summary>	
        /// Bind a buffer as a {{vertex buffer}} to the {{input-assembler stage}}.	
        /// </summary>	
        /// <unmanaged>D3D10_BIND_VERTEX_BUFFER</unmanaged>
        VertexBuffer = unchecked((int)1),			
        
        /// <summary>	
        /// Bind a buffer as an {{index buffer}} to the {{input-assembler stage}}.	
        /// </summary>	
        /// <unmanaged>D3D10_BIND_INDEX_BUFFER</unmanaged>
        IndexBuffer = unchecked((int)2),			
        
        /// <summary>	
        /// Bind a buffer as a {{constant buffer}} to a {{shader stage}}; this flag may NOT be combined with any other bind flag.	
        /// </summary>	
        /// <unmanaged>D3D10_BIND_CONSTANT_BUFFER</unmanaged>
        ConstantBuffer = unchecked((int)4),			
        
        /// <summary>	
        /// Bind a buffer or texture to a {{shader stage}}; this flag cannot be used with the <see cref="SlimDX2.Direct3D10.MapMode.WriteNoOverwrite"/> flag.	
        /// </summary>	
        /// <unmanaged>D3D10_BIND_SHADER_RESOURCE</unmanaged>
        ShaderResource = unchecked((int)8),			
        
        /// <summary>	
        /// Bind an output buffer for the {{stream-output stage}}.	
        /// </summary>	
        /// <unmanaged>D3D10_BIND_STREAM_OUTPUT</unmanaged>
        StreamOutput = unchecked((int)16),			
        
        /// <summary>	
        /// Bind a texture as a render target for the {{output-merger stage}}.	
        /// </summary>	
        /// <unmanaged>D3D10_BIND_RENDER_TARGET</unmanaged>
        RenderTarget = unchecked((int)32),			
        
        /// <summary>	
        /// Bind a texture as a depth-stencil target for the {{output-merger stage}}.	
        /// </summary>	
        /// <unmanaged>D3D10_BIND_DEPTH_STENCIL</unmanaged>
        DepthStencil = unchecked((int)64),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Specifies the types of CPU access allowed for a resource.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is used in <see cref="SlimDX2.Direct3D10.BufferDescription"/>, <see cref="SlimDX2.Direct3D10.Texture1DDescription"/>, <see cref="SlimDX2.Direct3D10.Texture2DDescription"/>, <see cref="SlimDX2.Direct3D10.Texture3DDescription"/>, and <see cref="SlimDX2.Direct3D10.ImageLoadInformation"/>. See {{Creating Buffer Resources (Direct3D 10)}} for more details.Applications may combine one or more of these flags with a logical OR. When possible, create resources with no CPU access flags, as this enables better resource optimiztion.	
    /// </remarks>	
    /// <unmanaged>D3D10_CPU_ACCESS_FLAG</unmanaged>
    [Flags]
    public enum CpuAccessFlags : int {	
        
        /// <summary>	
        /// The resource is to be {{mappable}} so that the CPU can change its contents. Resources created with this flag cannot be set as outputs of the pipeline and must be created with either dynamic or staging usage (see <see cref="SlimDX2.Direct3D10.ResourceUsage"/>).	
        /// </summary>	
        /// <unmanaged>D3D10_CPU_ACCESS_WRITE</unmanaged>
        Write = unchecked((int)65536),			
        
        /// <summary>	
        /// The resource is to be {{mappable}} so that the CPU can read its contents. Resources created with this flag cannot be set as either inputs or outputs to the pipeline and must be created with staging usage (see <see cref="SlimDX2.Direct3D10.ResourceUsage"/>).	
        /// </summary>	
        /// <unmanaged>D3D10_CPU_ACCESS_READ</unmanaged>
        Read = unchecked((int)131072),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Identifies other, less common options for resources.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is used in <see cref="SlimDX2.Direct3D10.BufferDescription"/>, <see cref="SlimDX2.Direct3D10.Texture1DDescription"/>, <see cref="SlimDX2.Direct3D10.Texture2DDescription"/>,  <see cref="SlimDX2.Direct3D10.Texture3DDescription"/>, <see cref="SlimDX2.Direct3D10.ImageInformation"/>, and <see cref="SlimDX2.Direct3D10.ImageLoadInformation"/>.These flags can be combined by bitwise OR.D3D10_RESOURCE_MISC_SHARED and D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX are mutually exclusive flags:  either one may be set in the resource creation calls but not both simultaneously.	
    /// </remarks>	
    /// <unmanaged>D3D10_RESOURCE_MISC_FLAG</unmanaged>
    [Flags]
    public enum ResourceOptionFlags : int {	
        
        /// <summary>	
        /// Enables an application to call <see cref="SlimDX2.Direct3D10.Device.GenerateMips"/> on  a {{texture resource}}. The resource must be created  with the {{bind flags}} that specify that the resource is a render target and a shader resource.	
        /// </summary>	
        /// <unmanaged>D3D10_RESOURCE_MISC_GENERATE_MIPS</unmanaged>
        GenerateMips = unchecked((int)1),			
        
        /// <summary>	
        /// Enables the sharing of resource data between two or more Direct3D devices. The only resources that can be shared are 2D non-mipmapped textures.WARP and REF devices do not support shared resources. Attempting to create a resource with this flag on either a WARP or REF device will cause the create method to return an E_OUTOFMEMORY error code.	
        /// </summary>	
        /// <unmanaged>D3D10_RESOURCE_MISC_SHARED</unmanaged>
        Shared = unchecked((int)2),			
        
        /// <summary>	
        /// Enables an application to create a cube texture from a  {{Texture2DArray}} that contains 6 textures.	
        /// </summary>	
        /// <unmanaged>D3D10_RESOURCE_MISC_TEXTURECUBE</unmanaged>
        Texturecube = unchecked((int)4),			
        
        /// <summary>	
        /// Enables the resource created to be synchronized using the IDXGIKeyedMutex::AcquireSync and ReleaseSync APIs.  The following resource creation D3D10 APIs, that all take a D3D10_RESOURCE_MISC_FLAG parameter, have been extended to support the new flag.ID3D10Device1::CreateTexture1DID3D10Device1::CreateTexture2DID3D10Device1::CreateTexture3DID3D10Device1::CreateBufferIf any of the listed functions are called with the D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX flag set, the interface returned can be  queried for an IDXGIKeyedMutex interface, which implements AcquireSync and ReleaseSync APIs to synchronize access to the surface.  The device creating the surface, and any other device opening the surface (using OpenSharedResource) is required to  call IDXGIKeyedMutex::AcquireSync before any rendering commands to the surface, and IDXGIKeyedMutex::ReleaseSync when it is done rendering.WARP and REF devices do not support shared resources. Attempting to create a resource with this flag on either a WARP or REF device will cause the create method to return an E_OUTOFMEMORY error code.	
        /// </summary>	
        /// <unmanaged>D3D10_RESOURCE_MISC_SHARED_KEYEDMUTEX</unmanaged>
        SharedKeyedmutex = unchecked((int)16),			
        
        /// <summary>	
        /// Enables a surface to be used for GDI interoperability.  Setting this flag enables rendering on the surface  via IDXGISurface1::GetDC.	
        /// </summary>	
        /// <unmanaged>D3D10_RESOURCE_MISC_GDI_COMPATIBLE</unmanaged>
        GdiCompatible = unchecked((int)32),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Identifies a resource to be accessed for reading and writing by the CPU. Applications may combine one or more of these flags.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is used in <see cref="SlimDX2.Direct3D10.Buffer.Map"/>, <see cref="SlimDX2.Direct3D10.Texture1D.Map"/>, <see cref="SlimDX2.Direct3D10.Texture2D.Map"/>, and <see cref="SlimDX2.Direct3D10.Texture3D.Map"/>.These remarks are divided into the following topics:{{Meaning of D3D10_MAP_WRITE_NO_OVERWRITE}}{{Common Usage of D3D10_MAP_WRITE_DISCARD with D3D10_MAP_WRITE_NO_OVERWRITE}}Meaning of D3D10_MAP_WRITE_NO_OVERWRITED3D10_MAP_WRITE_NO_OVERWRITE signifies that the application promises not to write to data that the {{Input Assembler}} (IA) stage is using. In exchange, the GPU allows the application to write to other parts of the same buffer.  The application must ensure that it does not write over any data in use by the IA stage.For example, consider the buffer illustrated in the following diagram. If a Draw call has been issued that uses vertices 4-6, an application that calls Map on this buffer must ensure that it does not write to the vertices that the Draw call will access during rendering.?Diagram of vertex data in different stages of utilization?However, ensuring this can be difficult, because the GPU is often many frames behind the CPU in terms of which frame it is currently processing. Keeping track of which sections of a resource are being used because of calls made 2 to 5 frames ago is difficult and error-prone. Because of this, it is recommended that applications only write to the uninitialized portions of a resource when using D3D10_MAP_WRITE_NO_OVERWRITE.Common Usage of D3D10_MAP_WRITE_DISCARD with D3D10_MAP_WRITE_NO_OVERWRITED3D10_MAP_WRITE_DISCARD and D3D10_MAP_WRITE_NO_OVERWRITE are normally used in conjunction with dynamic index/vertex buffers, although they can also be used with dynamic textures.A common use of these two flags involves filling dynamic index/vertex buffers with geometry that can be seen from the camera's current position. The first time that data is entered into the buffer on a given frame, Map is called with D3D10_MAP_WRITE_DISCARD; doing so invalidates the previous contents of the buffer. The buffer is then filled with all available data.Subsequent writes to the buffer within the same frame should use D3D10_MAP_WRITE_NO_OVERWRITE. This will enable the CPU to access a resource that is potentially being used by the GPU as long as the restrictions described previously are respected.	
    /// </remarks>	
    /// <unmanaged>D3D10_MAP</unmanaged>
    public enum MapMode : int {	
        
        /// <summary>	
        /// Resource is mapped for reading. The resource must have been created with read access (see <see cref="SlimDX2.Direct3D10.CpuAccessFlags.Read"/>).	
        /// </summary>	
        /// <unmanaged>D3D10_MAP_READ</unmanaged>
        Read = unchecked((int)1),			
        
        /// <summary>	
        /// Resource is mapped for writing. The resource must have been created with write access (see <see cref="SlimDX2.Direct3D10.CpuAccessFlags.Write"/>).	
        /// </summary>	
        /// <unmanaged>D3D10_MAP_WRITE</unmanaged>
        Write = unchecked((int)2),			
        
        /// <summary>	
        /// Resource is mapped for reading and writing. The resource must have been created with read and write access (see {{D3D10_CPU_ACCESS_READ and D3D10_CPU_ACCESS_WRITE}}).	
        /// </summary>	
        /// <unmanaged>D3D10_MAP_READ_WRITE</unmanaged>
        ReadWrite = unchecked((int)3),			
        
        /// <summary>	
        /// Resource is mapped for writing; the previous contents of the resource will be undefined. The resource must have been created with write access (see <see cref="SlimDX2.Direct3D10.CpuAccessFlags.Write"/>).	
        /// </summary>	
        /// <unmanaged>D3D10_MAP_WRITE_DISCARD</unmanaged>
        WriteDiscard = unchecked((int)4),			
        
        /// <summary>	
        /// Resource is mapped for writing; the existing contents of the resource cannot be overwritten (see Remarks). This flag is only valid on vertex and index buffers. The resource must have been created with write access (see <see cref="SlimDX2.Direct3D10.CpuAccessFlags.Write"/>). Cannot be used on a resource created with the <see cref="SlimDX2.Direct3D10.BindFlags.ConstantBuffer"/> flag.	
        /// </summary>	
        /// <unmanaged>D3D10_MAP_WRITE_NO_OVERWRITE</unmanaged>
        WriteNoOverwrite = unchecked((int)5),			
    }
    
    /// <summary>	
    /// Specifies how the CPU should respond when Map is called on a resource being used by the GPU.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is used by <see cref="SlimDX2.Direct3D10.Buffer.Map"/>, <see cref="SlimDX2.Direct3D10.Texture1D.Map"/>, <see cref="SlimDX2.Direct3D10.Texture2D.Map"/>, and <see cref="SlimDX2.Direct3D10.Texture3D.Map"/>.D3D10_MAP_FLAG_DO_NOT_WAIT cannot be used with <see cref="SlimDX2.Direct3D10.MapMode.WriteDiscard"/> or {{D3D10_MAP_WRITE_NOOVERWRITE}}.For more information about potential conflicts between the GPU and CPU during resource mapping, see {{Copying and Accessing Resource Data (Direct3D 10)}}.	
    /// </remarks>	
    /// <unmanaged>D3D10_MAP_FLAG</unmanaged>
    [Flags]
    public enum MapFlags : int {	
        
        /// <summary>	
        /// Specifies that Map should return DXGI_ERROR_WAS_STILL_DRAWING when the GPU blocks the CPU from accessing a resource.	
        /// </summary>	
        /// <unmanaged>D3D10_MAP_FLAG_DO_NOT_WAIT</unmanaged>
        FlagsDoNotWait = unchecked((int)1048576),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Option(s) for raising an error to a non-continuable exception.	
    /// </summary>	
    /// <remarks>	
    /// These flags are used by <see cref="SlimDX2.Direct3D10.Device.GetExceptionMode"/> and <see cref="SlimDX2.Direct3D10.Device.SetExceptionMode"/>. Use 0 to indicate no flags; multiple flags can be logically OR'ed together.	
    /// </remarks>	
    /// <unmanaged>D3D10_RAISE_FLAG</unmanaged>
    [Flags]
    public enum RaiseFlags : int {	
        
        /// <summary>	
        /// Raise an internal driver error to a non-continuable exception.	
        /// </summary>	
        /// <unmanaged>D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR</unmanaged>
        DriverInternalError = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Specifies the parts of the depth stencil to clear. Usually used with <see cref="SlimDX2.Direct3D10.Device.ClearDepthStencilView"/>.	
    /// </summary>	
    /// <remarks>	
    /// These flags can be bitwise ORed together.	
    /// </remarks>	
    /// <unmanaged>D3D10_CLEAR_FLAG</unmanaged>
    [Flags]
    public enum DepthStencilClearFlags : int {	
        
        /// <summary>	
        /// Clear the depth buffer.	
        /// </summary>	
        /// <unmanaged>D3D10_CLEAR_DEPTH</unmanaged>
        Depth = unchecked((int)1),			
        
        /// <summary>	
        /// Clear the stencil buffer.	
        /// </summary>	
        /// <unmanaged>D3D10_CLEAR_STENCIL</unmanaged>
        Stencil = unchecked((int)2),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Comparison options.	
    /// </summary>	
    /// <remarks>	
    /// A comparison option determines whether how the runtime compares source (new) data against destination (existing) data before storing the new data. The comparison option is declared in a description before an object is created. The API allows you to set a comparison option for a depth-stencil buffer (see <see cref="SlimDX2.Direct3D10.DepthStencilStateDescription"/>), depth-stencil operations (see <see cref="SlimDX2.Direct3D10.DepthStencilOperationDescription"/>), or sampler state (see <see cref="SlimDX2.Direct3D10.SamplerStateDescription"/>).	
    /// </remarks>	
    /// <unmanaged>D3D10_COMPARISON_FUNC</unmanaged>
    public enum ComparisonFunction : int {	
        
        /// <summary>	
        /// Never pass the comparison.	
        /// </summary>	
        /// <unmanaged>D3D10_COMPARISON_NEVER</unmanaged>
        Never = unchecked((int)1),			
        
        /// <summary>	
        /// If the source data is less than the destination data, the comparison passes.	
        /// </summary>	
        /// <unmanaged>D3D10_COMPARISON_LESS</unmanaged>
        Less = unchecked((int)2),			
        
        /// <summary>	
        /// If the source data is equal to the destination data, the comparison passes.	
        /// </summary>	
        /// <unmanaged>D3D10_COMPARISON_EQUAL</unmanaged>
        Equal = unchecked((int)3),			
        
        /// <summary>	
        /// If the source data is less than or equal to the destination data, the comparison passes.	
        /// </summary>	
        /// <unmanaged>D3D10_COMPARISON_LESS_EQUAL</unmanaged>
        LessEqual = unchecked((int)4),			
        
        /// <summary>	
        /// If the source data is greater than the destination data, the comparison passes.	
        /// </summary>	
        /// <unmanaged>D3D10_COMPARISON_GREATER</unmanaged>
        Greater = unchecked((int)5),			
        
        /// <summary>	
        /// If the source data is not equal to the destination data, the comparison passes.	
        /// </summary>	
        /// <unmanaged>D3D10_COMPARISON_NOT_EQUAL</unmanaged>
        NotEqual = unchecked((int)6),			
        
        /// <summary>	
        /// If the source data is greater than or equal to the destination data, the comparison passes.	
        /// </summary>	
        /// <unmanaged>D3D10_COMPARISON_GREATER_EQUAL</unmanaged>
        GreaterEqual = unchecked((int)7),			
        
        /// <summary>	
        /// Always pass the comparison.	
        /// </summary>	
        /// <unmanaged>D3D10_COMPARISON_ALWAYS</unmanaged>
        Always = unchecked((int)8),			
    }
    
    /// <summary>	
    /// Identify the portion of a {{depth-stencil}} buffer for writing depth data.	
    /// </summary>	
    /// <unmanaged>D3D10_DEPTH_WRITE_MASK</unmanaged>
    public enum DepthWriteMask : int {	
        
        /// <summary>	
        /// Turn off writes to the depth-stencil buffer.	
        /// </summary>	
        /// <unmanaged>D3D10_DEPTH_WRITE_MASK_ZERO</unmanaged>
        Zero = unchecked((int)0),			
        
        /// <summary>	
        /// Turn on writes to the depth-stencil buffer.	
        /// </summary>	
        /// <unmanaged>D3D10_DEPTH_WRITE_MASK_ALL</unmanaged>
        All = unchecked((int)1),			
    }
    
    /// <summary>	
    /// The stencil operations that can be performed during {{depth-stencil}} testing.	
    /// </summary>	
    /// <unmanaged>D3D10_STENCIL_OP</unmanaged>
    public enum StencilOperation : int {	
        
        /// <summary>	
        /// Keep the existing stencil data.	
        /// </summary>	
        /// <unmanaged>D3D10_STENCIL_OP_KEEP</unmanaged>
        Keep = unchecked((int)1),			
        
        /// <summary>	
        /// Set the stencil data to 0.	
        /// </summary>	
        /// <unmanaged>D3D10_STENCIL_OP_ZERO</unmanaged>
        Zero = unchecked((int)2),			
        
        /// <summary>	
        /// Set the stencil data to the reference value set by calling <see cref="SlimDX2.Direct3D10.Device.OutputMergerStage.SetDepthStencilState"/>.	
        /// </summary>	
        /// <unmanaged>D3D10_STENCIL_OP_REPLACE</unmanaged>
        Replace = unchecked((int)3),			
        
        /// <summary>	
        /// Increment the stencil value by 1, and clamp the result.	
        /// </summary>	
        /// <unmanaged>D3D10_STENCIL_OP_INCR_SAT</unmanaged>
        IncrementSaturate = unchecked((int)4),			
        
        /// <summary>	
        /// Decrement the stencil value by 1, and clamp the result.	
        /// </summary>	
        /// <unmanaged>D3D10_STENCIL_OP_DECR_SAT</unmanaged>
        DecrementSaturate = unchecked((int)5),			
        
        /// <summary>	
        /// Invert the stencil data.	
        /// </summary>	
        /// <unmanaged>D3D10_STENCIL_OP_INVERT</unmanaged>
        Invert = unchecked((int)6),			
        
        /// <summary>	
        /// Increment the stencil value by 1, and wrap the result if necessary.	
        /// </summary>	
        /// <unmanaged>D3D10_STENCIL_OP_INCR</unmanaged>
        Increment = unchecked((int)7),			
        
        /// <summary>	
        /// Increment the stencil value by 1, and wrap the result if necessary.	
        /// </summary>	
        /// <unmanaged>D3D10_STENCIL_OP_DECR</unmanaged>
        Decrement = unchecked((int)8),			
    }
    
    /// <summary>	
    /// Blend options. A blend option identifies the data source and an optional pre-blend operation.	
    /// </summary>	
    /// <remarks>	
    /// Blend operations are specified in a {{blend description}}.	
    /// </remarks>	
    /// <unmanaged>D3D10_BLEND</unmanaged>
    public enum BlendOption : int {	
        
        /// <summary>	
        /// The data source is the color black (0, 0, 0, 0). No pre-blend operation.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_ZERO</unmanaged>
        Zero = unchecked((int)1),			
        
        /// <summary>	
        /// The data source is the color white (1, 1, 1, 1). No pre-blend operation.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_ONE</unmanaged>
        One = unchecked((int)2),			
        
        /// <summary>	
        /// The data source is color data (RGB) from a pixel shader. No pre-blend operation.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_SRC_COLOR</unmanaged>
        SourceColor = unchecked((int)3),			
        
        /// <summary>	
        /// The data source is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_INV_SRC_COLOR</unmanaged>
        InverseSourceColor = unchecked((int)4),			
        
        /// <summary>	
        /// The data source is alpha data (A) from a pixel shader. No pre-blend operation.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_SRC_ALPHA</unmanaged>
        SourceAlpha = unchecked((int)5),			
        
        /// <summary>	
        /// The data source is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_INV_SRC_ALPHA</unmanaged>
        InverseSourceAlpha = unchecked((int)6),			
        
        /// <summary>	
        /// The data source is alpha data from a rendertarget. No pre-blend operation.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_DEST_ALPHA</unmanaged>
        DestinationAlpha = unchecked((int)7),			
        
        /// <summary>	
        /// The data source is alpha data from a rendertarget. The pre-blend operation inverts the data, generating 1 - A.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_INV_DEST_ALPHA</unmanaged>
        InverseDestinationAlpha = unchecked((int)8),			
        
        /// <summary>	
        /// The data source is color data from a rendertarget. No pre-blend operation.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_DEST_COLOR</unmanaged>
        DestinationColor = unchecked((int)9),			
        
        /// <summary>	
        /// The data source is color data from a rendertarget. The pre-blend operation inverts the data, generating 1 - RGB.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_INV_DEST_COLOR</unmanaged>
        InverseDestinationColor = unchecked((int)10),			
        
        /// <summary>	
        /// The data source is alpha data from a pixel shader. The pre-blend operation clamps the data to 1 or less. 	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_SRC_ALPHA_SAT</unmanaged>
        SourceAlphaSaturate = unchecked((int)11),			
        
        /// <summary>	
        /// The data source is the blend factor set with <see cref="SlimDX2.Direct3D10.Device.OutputMergerStage.SetBlendState"/>. No pre-blend operation.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_BLEND_FACTOR</unmanaged>
        BlendFactor = unchecked((int)14),			
        
        /// <summary>	
        /// The data source is the blend factor set with <see cref="SlimDX2.Direct3D10.Device.OutputMergerStage.SetBlendState"/>. The pre-blend operation inverts the blend factor, generating 1 - blend_factor.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_INV_BLEND_FACTOR</unmanaged>
        InverseBlendFactor = unchecked((int)15),			
        
        /// <summary>	
        /// The data sources are both color data output by a pixel shader. There is no pre-blend operation. This options supports {{dual-source color blending}}.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_SRC1_COLOR</unmanaged>
        SecondarySourceColor = unchecked((int)16),			
        
        /// <summary>	
        /// The data sources are both color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This options supports {{dual-source color blending}}.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_INV_SRC1_COLOR</unmanaged>
        InverseSecondarySourceColor = unchecked((int)17),			
        
        /// <summary>	
        /// The data sources are alpha data output by a pixel shader. There is no pre-blend operation. This options supports {{dual-source color blending}}.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_SRC1_ALPHA</unmanaged>
        SecondarySourceAlpha = unchecked((int)18),			
        
        /// <summary>	
        /// The data sources are alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This options supports {{dual-source color blending}}.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_INV_SRC1_ALPHA</unmanaged>
        InverseSecondarySourceAlpha = unchecked((int)19),			
    }
    
    /// <summary>	
    /// RGB or alpha blending operation.	
    /// </summary>	
    /// <remarks>	
    /// The runtime implements RGB blending and alpha blending separately. Therefore, blend state requires separate blend operations for RGB data and alpha data. These blend operations are specified in a {{blend description}}. The two sources ? Source 1, called SrcBlend and SrcBlendAlpha, and Source 2, called DestBlend and DestBlendAlpha ? are shown in the {{blending block diagram}}.	
    /// </remarks>	
    /// <unmanaged>D3D10_BLEND_OP</unmanaged>
    public enum BlendOperation : int {	
        
        /// <summary>	
        /// Add source 1 and source 2.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_OP_ADD</unmanaged>
        Add = unchecked((int)1),			
        
        /// <summary>	
        /// Subtract source 1 from source 2.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_OP_SUBTRACT</unmanaged>
        Subtract = unchecked((int)2),			
        
        /// <summary>	
        /// Subtract source 2 from source 1.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_OP_REV_SUBTRACT</unmanaged>
        ReverseSubtract = unchecked((int)3),			
        
        /// <summary>	
        /// Find the minimum of source 1 and source 2.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_OP_MIN</unmanaged>
        Minimum = unchecked((int)4),			
        
        /// <summary>	
        /// Find the maximum of source 1 and source 2.	
        /// </summary>	
        /// <unmanaged>D3D10_BLEND_OP_MAX</unmanaged>
        Maximum = unchecked((int)5),			
    }
    
    /// <summary>	
    /// Identify which components of each pixel of a render target are writable during {{blending}}.	
    /// </summary>	
    /// <remarks>	
    /// These flags can be combined with a bitwise OR.	
    /// </remarks>	
    /// <unmanaged>D3D10_COLOR_WRITE_ENABLE</unmanaged>
    [Flags]
    public enum ColorWriteMaskFlags : int {	
        
        /// <summary>	
        /// Allow data to be stored in the red component.	
        /// </summary>	
        /// <unmanaged>D3D10_COLOR_WRITE_ENABLE_RED</unmanaged>
        Red = unchecked((int)1),			
        
        /// <summary>	
        /// Allow data to be stored in the green component.	
        /// </summary>	
        /// <unmanaged>D3D10_COLOR_WRITE_ENABLE_GREEN</unmanaged>
        Green = unchecked((int)2),			
        
        /// <summary>	
        /// Allow data to be stored in the blue component.	
        /// </summary>	
        /// <unmanaged>D3D10_COLOR_WRITE_ENABLE_BLUE</unmanaged>
        Blue = unchecked((int)4),			
        
        /// <summary>	
        /// Allow data to be stored in the alpha component.	
        /// </summary>	
        /// <unmanaged>D3D10_COLOR_WRITE_ENABLE_ALPHA</unmanaged>
        Alpha = unchecked((int)8),			
        
        /// <summary>	
        /// Allow data to be stored in all components.	
        /// </summary>	
        /// <unmanaged>D3D10_COLOR_WRITE_ENABLE_ALL</unmanaged>
        All = unchecked((int)15),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// The different faces of a cube texture.	
    /// </summary>	
    /// <unmanaged>D3D10_TEXTURECUBE_FACE</unmanaged>
    public enum TexturecubeFace : int {	
        
        /// <summary>	
        /// Positive X face.	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURECUBE_FACE_POSITIVE_X</unmanaged>
        PositiveX = unchecked((int)0),			
        
        /// <summary>	
        /// Negative X face.	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURECUBE_FACE_NEGATIVE_X</unmanaged>
        NegativeX = unchecked((int)1),			
        
        /// <summary>	
        /// Positive Y face.	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURECUBE_FACE_POSITIVE_Y</unmanaged>
        PositiveY = unchecked((int)2),			
        
        /// <summary>	
        /// Negative Y face.	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURECUBE_FACE_NEGATIVE_Y</unmanaged>
        NegativeY = unchecked((int)3),			
        
        /// <summary>	
        /// Positive Z face.	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURECUBE_FACE_POSITIVE_Z</unmanaged>
        PositiveZ = unchecked((int)4),			
        
        /// <summary>	
        /// Negative Z face.	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURECUBE_FACE_NEGATIVE_Z</unmanaged>
        NegativeZ = unchecked((int)5),			
    }
    
    /// <summary>	
    /// Filtering options during texture sampling.	
    /// </summary>	
    /// <remarks>	
    /// During texture sampling, one or more texels are read and combined (this is calling filtering) to produce a single value. Point sampling reads a single texel while linear sampling reads two texels (endpoints) and linearly interpolates a third value between the endpoints.HLSL texture-sampling functions also support comparison filtering during texture sampling. Comparison filtering compares each sampled texel against a comparison value. The boolean result is blended the same way that normal texture filtering is blended.You can use HLSL intrinsic texture-sampling functions that implement texture filtering only or companion functions that use texture filtering with comparison filtering.Texture Sampling FunctionTexture Sampling Function with Comparison Filtering{{sample}}{{samplecmp}} or {{samplecmplevelzero}}?Comparison filters only work with textures that have the following {{formats}}: R32_FLOAT_X8X24_TYPELESS, R32_FLOAT, R24_UNORM_X8_TYPELESS, R16_UNORM.	
    /// </remarks>	
    /// <unmanaged>D3D10_FILTER</unmanaged>
    public enum Filter : int {	
        
        /// <summary>	
        /// Use point sampling for minification, magnification, and mip-level sampling.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_MIN_MAG_MIP_POINT</unmanaged>
        MinimumMagMipPoint = unchecked((int)0),			
        
        /// <summary>	
        /// Use point sampling for minification and magnification; use linear interpolation for mip-level sampling.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        MinimumMagPointMipLinear = unchecked((int)1),			
        
        /// <summary>	
        /// Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        MinimumPointMagLinearMipPoint = unchecked((int)4),			
        
        /// <summary>	
        /// Use point sampling for minification; use linear interpolation for magnification and mip-level sampling.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        MinimumPointMagMipLinear = unchecked((int)5),			
        
        /// <summary>	
        /// Use linear interpolation for minification; use point sampling for magnification and mip-level sampling.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        MinimumLinearMagMipPoint = unchecked((int)16),			
        
        /// <summary>	
        /// Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        MinimumLinearMagPointMipLinear = unchecked((int)17),			
        
        /// <summary>	
        /// Use linear interpolation for minification and magnification; use point sampling for mip-level sampling.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        MinimumMagLinearMipPoint = unchecked((int)20),			
        
        /// <summary>	
        /// Use linear interpolation for minification, magnification, and mip-level sampling.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_MIN_MAG_MIP_LINEAR</unmanaged>
        MinimumMagMipLinear = unchecked((int)21),			
        
        /// <summary>	
        /// Use anisotropic interpolation for minification, magnification, and mip-level sampling.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_ANISOTROPIC</unmanaged>
        Anisotropic = unchecked((int)85),			
        
        /// <summary>	
        /// Use point sampling for minification, magnification, and mip-level sampling. Compare the result to the comparison value.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT</unmanaged>
        ComparisonMinimumMagMipPoint = unchecked((int)128),			
        
        /// <summary>	
        /// Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR</unmanaged>
        ComparisonMinimumMagPointMipLinear = unchecked((int)129),			
        
        /// <summary>	
        /// Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT</unmanaged>
        ComparisonMinimumPointMagLinearMipPoint = unchecked((int)132),			
        
        /// <summary>	
        /// Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. Compare the result to the comparison value.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR</unmanaged>
        ComparisonMinimumPointMagMipLinear = unchecked((int)133),			
        
        /// <summary>	
        /// Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. Compare the result to the comparison value.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT</unmanaged>
        ComparisonMinimumLinearMagMipPoint = unchecked((int)144),			
        
        /// <summary>	
        /// Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR</unmanaged>
        ComparisonMinimumLinearMagPointMipLinear = unchecked((int)145),			
        
        /// <summary>	
        /// Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT</unmanaged>
        ComparisonMinimumMagLinearMipPoint = unchecked((int)148),			
        
        /// <summary>	
        /// Use linear interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR</unmanaged>
        ComparisonMinimumMagMipLinear = unchecked((int)149),			
        
        /// <summary>	
        /// Use anisotropic interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_COMPARISON_ANISOTROPIC</unmanaged>
        ComparisonAnisotropic = unchecked((int)213),			
        
        /// <summary>	
        /// For use in pixel shaders with textures that have the R1_UNORM format.	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_TEXT_1BIT</unmanaged>
        Text1bit = unchecked((int)2147483648),			
    }
    
    /// <summary>	
    /// Types of magnification or minification sampler filters.	
    /// </summary>	
    /// <unmanaged>D3D10_FILTER_TYPE</unmanaged>
    public enum FilterType : int {	
        
        /// <summary>	
        /// Point filtering used as a texture magnification or minification filter. The texel with coordinates nearest to the desired pixel value is used. The texture filter to be used between mipmap levels is nearest-point mipmap filtering. The rasterizer uses the color from the texel of the nearest mipmap texture. 	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_TYPE_POINT</unmanaged>
        Point = unchecked((int)0),			
        
        /// <summary>	
        /// Bilinear interpolation filtering used as a texture magnification or minification filter. A weighted average of a 2 x 2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is trilinear mipmap interpolation. The rasterizer linearly interpolates pixel color, using the texels of the two nearest mipmap textures. 	
        /// </summary>	
        /// <unmanaged>D3D10_FILTER_TYPE_LINEAR</unmanaged>
        Linear = unchecked((int)1),			
    }
    
    /// <summary>	
    /// Identify a technique for resolving texture coordinates that are outside of the boundaries of a texture.	
    /// </summary>	
    /// <unmanaged>D3D10_TEXTURE_ADDRESS_MODE</unmanaged>
    public enum TextureAddressMode : int {	
        
        /// <summary>	
        /// Tile the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times.	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURE_ADDRESS_WRAP</unmanaged>
        Wrap = unchecked((int)1),			
        
        /// <summary>	
        /// Flip the texture at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on. 	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURE_ADDRESS_MIRROR</unmanaged>
        Mirror = unchecked((int)2),			
        
        /// <summary>	
        /// Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURE_ADDRESS_CLAMP</unmanaged>
        Clamp = unchecked((int)3),			
        
        /// <summary>	
        /// Texture coordinates outside the range [0.0, 1.0] are set to the border color specified in <see cref="SlimDX2.Direct3D10.SamplerStateDescription"/> or HLSL code.	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURE_ADDRESS_BORDER</unmanaged>
        Border = unchecked((int)4),			
        
        /// <summary>	
        /// Similar to D3D10_TEXTURE_ADDRESS_MIRROR and D3D10_TEXTURE_ADDRESS_CLAMP. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value.	
        /// </summary>	
        /// <unmanaged>D3D10_TEXTURE_ADDRESS_MIRROR_ONCE</unmanaged>
        MirrorOnce = unchecked((int)5),			
    }
    
    /// <summary>	
    /// Which resources are supported for a given format and given device (see <see cref="SlimDX2.Direct3D10.Device.CheckFormatSupport"/>).	
    /// </summary>	
    /// <unmanaged>D3D10_FORMAT_SUPPORT</unmanaged>
    [Flags]
    public enum FormatSupport : int {	
        
        /// <summary>	
        /// Buffer resources supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_BUFFER</unmanaged>
        Buffer = unchecked((int)1),			
        
        /// <summary>	
        /// Vertex buffers supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER</unmanaged>
        InputAssemblyVertexBuffer = unchecked((int)2),			
        
        /// <summary>	
        /// Index buffers supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER</unmanaged>
        InputAssemblyIndexBuffer = unchecked((int)4),			
        
        /// <summary>	
        /// Streaming output buffers supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_SO_BUFFER</unmanaged>
        StreamOutputBuffer = unchecked((int)8),			
        
        /// <summary>	
        /// 1D texture resources supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_TEXTURE1D</unmanaged>
        Texture1D = unchecked((int)16),			
        
        /// <summary>	
        /// 2D texture resources supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_TEXTURE2D</unmanaged>
        Texture2D = unchecked((int)32),			
        
        /// <summary>	
        /// 3D texture resources supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_TEXTURE3D</unmanaged>
        Texture3D = unchecked((int)64),			
        
        /// <summary>	
        /// Cube texture resources supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_TEXTURECUBE</unmanaged>
        Texturecube = unchecked((int)128),			
        
        /// <summary>	
        /// The intrinsic HLSL function {{load}} is supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_SHADER_LOAD</unmanaged>
        ShaderLoad = unchecked((int)256),			
        
        /// <summary>	
        /// The intrinsic HLSL functions {{Sample}} supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_SHADER_SAMPLE</unmanaged>
        ShaderSample = unchecked((int)512),			
        
        /// <summary>	
        /// The intrinsic HLSL functions {{SampleCmp}} and {{SampleCmpLevelZero}} are supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON</unmanaged>
        ShaderSampleComparison = unchecked((int)1024),			
        
        /// <summary>	
        /// Reserved.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT</unmanaged>
        ShaderSampleMonoText = unchecked((int)2048),			
        
        /// <summary>	
        /// Mipmaps are supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_MIP</unmanaged>
        Mip = unchecked((int)4096),			
        
        /// <summary>	
        /// Automatic generation of mipmaps is supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_MIP_AUTOGEN</unmanaged>
        MipAutogen = unchecked((int)8192),			
        
        /// <summary>	
        /// Rendertargets are supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_RENDER_TARGET</unmanaged>
        RenderTarget = unchecked((int)16384),			
        
        /// <summary>	
        /// Render target blend operations supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_BLENDABLE</unmanaged>
        Blendable = unchecked((int)32768),			
        
        /// <summary>	
        /// Depth stencils supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_DEPTH_STENCIL</unmanaged>
        DepthStencil = unchecked((int)65536),			
        
        /// <summary>	
        /// CPU locking supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_CPU_LOCKABLE</unmanaged>
        CpuLockable = unchecked((int)131072),			
        
        /// <summary>	
        /// Multisampling resolution supported.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE</unmanaged>
        MultisampleResolve = unchecked((int)262144),			
        
        /// <summary>	
        /// Format can be displayed on screen.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_DISPLAY</unmanaged>
        Display = unchecked((int)524288),			
        
        /// <summary>	
        /// Format cannot be cast to another format.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT</unmanaged>
        CastWithinBitLayout = unchecked((int)1048576),			
        
        /// <summary>	
        /// Format can be used as a multisampled rendertarget.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET</unmanaged>
        MultisampleRendertarget = unchecked((int)2097152),			
        
        /// <summary>	
        /// Format can be used as a multisampled texture and read into a shader with the {{load}} function.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD</unmanaged>
        MultisampleLoad = unchecked((int)4194304),			
        
        /// <summary>	
        /// Format can be used with the {{gather}} function. This value is available in DirectX 10.1 or higher.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_SHADER_GATHER</unmanaged>
        ShaderGather = unchecked((int)8388608),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST</unmanaged>
        BackBufferCast = unchecked((int)16777216),			
    }
    
    /// <summary>	
    /// Optional flags that control the behavior of <see cref="SlimDX2.Direct3D10.Asynchronous.GetData"/>.	
    /// </summary>	
    /// <unmanaged>D3D10_ASYNC_GETDATA_FLAG</unmanaged>
    [Flags]
    public enum AsynchronousFlags : int {	
        
        /// <summary>	
        /// Do not flush the command buffer. This can potentially cause an infinite loop if GetData is continually called until it returns S_OK as there may still be commands in the command buffer that need to be processed in order for GetData to return S_OK. Since the commands in the command buffer are not flushed they will not be processed and therefore GetData will never return S_OK.	
        /// </summary>	
        /// <unmanaged>D3D10_ASYNC_GETDATA_DONOTFLUSH</unmanaged>
        Donotflush = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Query types.	
    /// </summary>	
    /// <unmanaged>D3D10_QUERY</unmanaged>
    public enum QueryType : int {	
        
        /// <summary>	
        /// Determines whether or not the GPU is finished processing commands. When the GPU is finished processing commands {{GetData}} will return S_OK, and pData will point to a BOOL with a value of TRUE. When using this type of query, {{Begin}} is disabled.	
        /// </summary>	
        /// <unmanaged>D3D10_QUERY_EVENT</unmanaged>
        Event = unchecked((int)0),			
        
        /// <summary>	
        /// Get the number of samples that passed the depth and stencil tests in between {{Begin}} and {{End}}. {{GetData}} returns a UINT64. If a depth or stencil test is disabled, then each of those tests will be counted as a pass.	
        /// </summary>	
        /// <unmanaged>D3D10_QUERY_OCCLUSION</unmanaged>
        Occlusion = unchecked((int)1),			
        
        /// <summary>	
        /// Get a timestamp value where {{GetData}} returns a UINT64. This kind of query is only useful if two timestamp queries are done in the middle of a D3D10_QUERY_TIMESTAMP_DISJOINT query. The difference of two timestamps can be used to determine how many ticks have elapsed, and the D3D10_QUERY_TIMESTAMP_DISJOINT query will determine if that difference is a reliable value and also has a value that shows how to convert the number of ticks into seconds. See <see cref="SlimDX2.Direct3D10.QueryDataTimestampDisjoint"/>. When using this type of query, {{Begin}} is disabled.	
        /// </summary>	
        /// <unmanaged>D3D10_QUERY_TIMESTAMP</unmanaged>
        Timestamp = unchecked((int)2),			
        
        /// <summary>	
        /// Determines whether or not a D3D10_QUERY_TIMESTAMP is returning reliable values, and also gives the frequency of the processor enabling you to convert the number of elapsed ticks into seconds. {{GetData}} will return a <see cref="SlimDX2.Direct3D10.QueryDataTimestampDisjoint"/>. This type of query should only be invoked once per frame or less.	
        /// </summary>	
        /// <unmanaged>D3D10_QUERY_TIMESTAMP_DISJOINT</unmanaged>
        TimestampDisjoint = unchecked((int)3),			
        
        /// <summary>	
        /// Get pipeline statistics, such as the number of pixel shader invocations in between {{Begin}} and {{End}}. {{GetData}} will return a <see cref="SlimDX2.Direct3D10.QueryDataPipelineStatistics"/>.	
        /// </summary>	
        /// <unmanaged>D3D10_QUERY_PIPELINE_STATISTICS</unmanaged>
        PipelineStatistics = unchecked((int)4),			
        
        /// <summary>	
        /// Similar to D3D10_QUERY_OCCLUSION, except {{GetData}} returns a BOOL indicating whether or not any samples passed the depth and stencil tests - TRUE meaning at least one passed, FALSE meaning none passed.	
        /// </summary>	
        /// <unmanaged>D3D10_QUERY_OCCLUSION_PREDICATE</unmanaged>
        OcclusionPredicate = unchecked((int)5),			
        
        /// <summary>	
        /// Get streaming output statistics, such as the number of primitives streamed out in between {{Begin}} and {{End}}. {{GetData}} will return a <see cref="SlimDX2.Direct3D10.StreamOutputStatistics"/> structure.	
        /// </summary>	
        /// <unmanaged>D3D10_QUERY_SO_STATISTICS</unmanaged>
        StreamOutputStatistics = unchecked((int)6),			
        
        /// <summary>	
        /// Determines whether or not any of the streaming output buffers overflowed in between {{Begin}} and {{End}}. {{GetData}} returns a BOOL - TRUE meaning there was an overflow, FALSE meaning there was not an overflow. If streaming output writes to multiple buffers, and one of the buffers overflows, then it will stop writing to all the output buffers. When an overflow is detected by Direct3D it is prevented from happening - no memory is corrupted. This predication may be used in conjunction with an SO_STATISTICS query so that when an overflow occurs the SO_STATISTIC query will let the application know how much memory was needed to prevent an overflow.	
        /// </summary>	
        /// <unmanaged>D3D10_QUERY_SO_OVERFLOW_PREDICATE</unmanaged>
        StreamOutputOverflowPredicate = unchecked((int)7),			
    }
    
    /// <summary>	
    /// Flags that describe miscellaneous query behavior.	
    /// </summary>	
    /// <remarks>	
    /// This flag is part of a query description (see <see cref="SlimDX2.Direct3D10.QueryDescription"/>).	
    /// </remarks>	
    /// <unmanaged>D3D10_QUERY_MISC_FLAG</unmanaged>
    [Flags]
    public enum QueryFlags : int {	
        
        /// <summary>	
        /// Tell the hardware that if it is not yet sure if something is hidden or not to draw it anyway. This is only used with an occlusion predicate. Predication data cannot be returned to your application via <see cref="SlimDX2.Direct3D10.Asynchronous.GetData"/> when using this flag.	
        /// </summary>	
        /// <unmanaged>D3D10_QUERY_MISC_PREDICATEHINT</unmanaged>
        Predicatehint = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Performance counter types.	
    /// </summary>	
    /// <remarks>	
    /// In addition to these performance counters, independent hardware vendors may define their own set of performance counters for their devices. The enum values for these counters would start after D3D10_COUNTER_DEVICE_DEPENDENT_0 and would be defined by those hardware vendors.	
    /// </remarks>	
    /// <unmanaged>D3D10_COUNTER</unmanaged>
    public enum CounterKind : int {	
        
        /// <summary>	
        /// Percentage of the time that the GPU is idle.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_GPU_IDLE</unmanaged>
        GpuIdle = unchecked((int)0),			
        
        /// <summary>	
        /// Percentage of the time that the GPU does vertex processing.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_VERTEX_PROCESSING</unmanaged>
        VertexProcessing = unchecked((int)1),			
        
        /// <summary>	
        /// Percentage of the time that the GPU does geometry processing.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_GEOMETRY_PROCESSING</unmanaged>
        GeometryProcessing = unchecked((int)2),			
        
        /// <summary>	
        /// Percentage of the time that the GPU does pixel processing.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_PIXEL_PROCESSING</unmanaged>
        PixelProcessing = unchecked((int)3),			
        
        /// <summary>	
        /// Percentage of the time that the GPU does other processing (not vertex, geometry, or pixel processing).	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_OTHER_GPU_PROCESSING</unmanaged>
        OtherGpuProcessing = unchecked((int)4),			
        
        /// <summary>	
        /// Percentage of bandwidth used on a host adapter. Value returned by <see cref="SlimDX2.Direct3D10.Asynchronous.GetData"/> between 0.0 and 1.0 when using this counter.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION</unmanaged>
        HostAdapterBandwidthUtilization = unchecked((int)5),			
        
        /// <summary>	
        /// Percentage of bandwidth used by the local video memory. Value returned by <see cref="SlimDX2.Direct3D10.Asynchronous.GetData"/> between 0.0 and 1.0 when using this counter	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION</unmanaged>
        LocalVidmemBandwidthUtilization = unchecked((int)6),			
        
        /// <summary>	
        /// Percentage of throughput used for vertices. Value returned by <see cref="SlimDX2.Direct3D10.Asynchronous.GetData"/> between 0.0 and 1.0 when using this counter	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION</unmanaged>
        VertexThroughputUtilization = unchecked((int)7),			
        
        /// <summary>	
        /// Percentage of throughput used for triangle setup. Value returned by <see cref="SlimDX2.Direct3D10.Asynchronous.GetData"/> between 0.0 and 1.0 when using this counter	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION</unmanaged>
        TriangleSetupThroughputUtilization = unchecked((int)8),			
        
        /// <summary>	
        /// Percentage of throughput used for the fillrate. Value returned by <see cref="SlimDX2.Direct3D10.Asynchronous.GetData"/> between 0.0 and 1.0 when using this counter.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION</unmanaged>
        FillrateThroughputUtilization = unchecked((int)9),			
        
        /// <summary>	
        /// Percentage of time that a vertex shader spends sampling resources.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_VS_MEMORY_LIMITED</unmanaged>
        VsMemoryLimited = unchecked((int)10),			
        
        /// <summary>	
        /// Percentage of time that a vertex shader spends doing computations.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_VS_COMPUTATION_LIMITED</unmanaged>
        VsComputationLimited = unchecked((int)11),			
        
        /// <summary>	
        /// Percentage of time that a geometry shader spends sampling resources.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_GS_MEMORY_LIMITED</unmanaged>
        GsMemoryLimited = unchecked((int)12),			
        
        /// <summary>	
        /// Percentage of time that a geometry shader spends doing computations.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_GS_COMPUTATION_LIMITED</unmanaged>
        GsComputationLimited = unchecked((int)13),			
        
        /// <summary>	
        /// Percentage of time that a pixel shader spends sampling resources.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_PS_MEMORY_LIMITED</unmanaged>
        PsMemoryLimited = unchecked((int)14),			
        
        /// <summary>	
        /// Percentage of time that a pixel shader spends doing computations.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_PS_COMPUTATION_LIMITED</unmanaged>
        PsComputationLimited = unchecked((int)15),			
        
        /// <summary>	
        /// Percentage of vertex data that was read from the vertex cache. For example, if 6 vertices were added to the cache and 3 of them were read from the cache, then the hit rate would be 0.5.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE</unmanaged>
        PostTransformCacheHitRate = unchecked((int)16),			
        
        /// <summary>	
        /// Percentage of texel data that was read from the vertex cache. For example, if 6 texels were added to the cache and 3 of them were read from the cache, then the hit rate would be 0.5.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE</unmanaged>
        TextureCacheHitRate = unchecked((int)17),			
        
        /// <summary>	
        /// Start of the device-dependent counters. See remarks.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_DEVICE_DEPENDENT_0</unmanaged>
        DeviceDependent0 = unchecked((int)1073741824),			
    }
    
    /// <summary>	
    /// Data type of a performance counter.	
    /// </summary>	
    /// <remarks>	
    /// These flags are an output parameter in <see cref="SlimDX2.Direct3D10.Device.CheckCounter"/>.	
    /// </remarks>	
    /// <unmanaged>D3D10_COUNTER_TYPE</unmanaged>
    public enum CounterType : int {	
        
        /// <summary>	
        /// 32-bit floating point.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_TYPE_FLOAT32</unmanaged>
        Float32 = unchecked((int)0),			
        
        /// <summary>	
        /// 16-bit unsigned integer.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_TYPE_UINT16</unmanaged>
        Uint16 = unchecked((int)1),			
        
        /// <summary>	
        /// 32-bit unsigned integer.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_TYPE_UINT32</unmanaged>
        Uint32 = unchecked((int)2),			
        
        /// <summary>	
        /// 64-bit unsigned integer.	
        /// </summary>	
        /// <unmanaged>D3D10_COUNTER_TYPE_UINT64</unmanaged>
        Uint64 = unchecked((int)3),			
    }
    
    /// <summary>	
    /// Device creation flags.	
    /// </summary>	
    /// <remarks>	
    /// Device creation flags are used by <see cref="SlimDX2.Direct3D10.D3D10.CreateDevice"/> and <see cref="SlimDX2.Direct3D10.D3D10.CreateDeviceAndSwapChain"/>.An application might dynamically create (and destroy) threads to improve performance especially on a machine with multiple CPU cores.  There may be cases, however, when an application needs to prevent extra threads from being created. This can happen when you want to simplify  debugging, profile code or develop a tool for instance. For these cases, use D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS to request  that the runtime and video driver not create any additional threads that might interfere with the application.	
    /// </remarks>	
    /// <unmanaged>D3D10_CREATE_DEVICE_FLAG</unmanaged>
    [Flags]
    public enum DeviceCreationFlags : int {	
        
        /// <summary>	
        /// Use this flag if an application will only be calling D3D10 from a single thread. If this flag is not specified, the default behavior of D3D10  is to enter a lock during each API call to prevent multiple threads altering internal state. By using this flag no locks will be taken which can  slightly increase performance, but could result in undefine behavior if D3D10 is called from multiple threads.	
        /// </summary>	
        /// <unmanaged>D3D10_CREATE_DEVICE_SINGLETHREADED</unmanaged>
        Singlethreaded = unchecked((int)1),			
        
        /// <summary>	
        /// Create a device that supports the {{debug layer}}.	
        /// </summary>	
        /// <unmanaged>D3D10_CREATE_DEVICE_DEBUG</unmanaged>
        Debug = unchecked((int)2),			
        
        /// <summary>	
        /// Create both a software (REF) and hardware (HAL) version of the device simultaneously, which allows an application to switch to a  reference device to enable debugging. See <see cref="SlimDX2.Direct3D10.SwitchToRef"/> for more information.	
        /// </summary>	
        /// <unmanaged>D3D10_CREATE_DEVICE_SWITCH_TO_REF</unmanaged>
        SwitchToRef = unchecked((int)4),			
        
        /// <summary>	
        /// Prevents multiple threads from being created. When this flag is used with a WARP device, no additional threads will be created by WARP and all rasterization will occur on the calling thread. This flag is not recommended for general use. See remarks. 	
        /// </summary>	
        /// <unmanaged>D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS</unmanaged>
        PreventInternalThreadingOptimizations = unchecked((int)8),			
        
        /// <summary>	
        /// Return a NULL pointer instead of triggering an exception on memory exhaustion during invocations to Map.   Without this flag an exception will be raised on memory exhaustion.  Only valid on Winodws 7.	
        /// </summary>	
        /// <unmanaged>D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP</unmanaged>
        AllowNullFromMap = unchecked((int)16),			
        
        /// <summary>	
        /// Causes device creation to fail if BGRA support is not available.BGRA support enables the following formats.DXGI_FORMAT_B8G8R8A8_TYPELESSDXGI_FORMAT_B8G8R8A8_UNORMDXGI_FORMAT_B8G8R8A8_UNORM_SRGBDXGI_FORMAT_B8G8R8X8_TYPELESSDXGI_FORMAT_B8G8R8X8_UNORMDXGI_FORMAT_B8G8R8X8_UNORM_SRGBD3D10_CREATE_DEVICE_BGRA_SUPPORT is only relevant when a device is created with <see cref="SlimDX2.Direct3D10.D3D10.CreateDevice1"/> or <see cref="SlimDX2.Direct3D10.D3D10.CreateDeviceAndSwapChain1"/> using the D3D10_FEATURE_LEVEL_10_0 or D3D10_FEATURE_LEVEL_10_1 feature levels, the flag will be ignored when a device is created with other feature levels.Note that BGRA support may be present even if the application didn't specify D3D10_CREATE_DEVICE_BGRA_SUPPORT.  The flag merely causes device creation to fail if BGRA support isn't available.D3D10_CREATE_DEVICE_BGRA_SUPPORT is only valid on Windows 7, Windows Server 2008 R2, and updated Windows Vista (KB971644) systems.	
        /// </summary>	
        /// <unmanaged>D3D10_CREATE_DEVICE_BGRA_SUPPORT</unmanaged>
        BgraSupport = unchecked((int)32),			
        
        /// <summary>	
        /// Reserved. This flag is currently not supported. Do not use.	
        /// </summary>	
        /// <unmanaged>D3D10_CREATE_DEVICE_STRICT_VALIDATION</unmanaged>
        StrictValidation = unchecked((int)512),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Categories of debug messages. This will identify the category of a message when retrieving a message with <see cref="SlimDX2.Direct3D10.InfoQueue.GetMessage"/> and when adding a message with <see cref="SlimDX2.Direct3D10.InfoQueue.AddMessage"/>. When creating an {{info queue filter}}, these values can be used to allow or deny any categories of messages to pass through the storage and retrieval filters.	
    /// </summary>	
    /// <remarks>	
    /// This is part of the Information Queue feature. See <see cref="SlimDX2.Direct3D10.InfoQueue"/>.	
    /// </remarks>	
    /// <unmanaged>D3D10_MESSAGE_CATEGORY</unmanaged>
    public enum MessageCategory : int {	
        
        /// <summary>	
        /// User defined message. See <see cref="SlimDX2.Direct3D10.InfoQueue.AddMessage"/>.	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_CATEGORY_APPLICATION_DEFINED</unmanaged>
        ApplicationDefined = unchecked((int)0),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_CATEGORY_MISCELLANEOUS</unmanaged>
        Miscellaneous = unchecked((int)1),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_CATEGORY_INITIALIZATION</unmanaged>
        Initialization = unchecked((int)2),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_CATEGORY_CLEANUP</unmanaged>
        Cleanup = unchecked((int)3),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_CATEGORY_COMPILATION</unmanaged>
        Compilation = unchecked((int)4),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_CATEGORY_STATE_CREATION</unmanaged>
        StateCreation = unchecked((int)5),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_CATEGORY_STATE_SETTING</unmanaged>
        StateSetting = unchecked((int)6),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_CATEGORY_STATE_GETTING</unmanaged>
        StateGetting = unchecked((int)7),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_CATEGORY_RESOURCE_MANIPULATION</unmanaged>
        ResourceManipulation = unchecked((int)8),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_CATEGORY_EXECUTION</unmanaged>
        Execution = unchecked((int)9),			
    }
    
    /// <summary>	
    /// Debug message severity levels for an information queue.	
    /// </summary>	
    /// <remarks>	
    /// Use these values to allow or deny message categories to pass through the storage and retrieval filters for an information queue (see <see cref="SlimDX2.Direct3D10.InformationQueueFilter"/>). This API is used by <see cref="SlimDX2.Direct3D10.InfoQueue.AddApplicationMessage"/>.	
    /// </remarks>	
    /// <unmanaged>D3D10_MESSAGE_SEVERITY</unmanaged>
    public enum MessageSeverity : int {	
        
        /// <summary>	
        /// Defines some type of corruption which has occurred.	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_SEVERITY_CORRUPTION</unmanaged>
        Corruption = unchecked((int)0),			
        
        /// <summary>	
        /// Defines an error message.	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_SEVERITY_ERROR</unmanaged>
        Error = unchecked((int)1),			
        
        /// <summary>	
        /// Defines a warning message.	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_SEVERITY_WARNING</unmanaged>
        Warning = unchecked((int)2),			
        
        /// <summary>	
        /// Defines an information message.	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_SEVERITY_INFO</unmanaged>
        Information = unchecked((int)3),			
    }
    
    /// <summary>	
    /// Debug messages for setting up an info-queue filter (see <see cref="SlimDX2.Direct3D10.InformationQueueFilter"/>); use these messages to allow or deny message categories to pass through the storage and retrieval filters. These IDs are used by methods such as <see cref="SlimDX2.Direct3D10.InfoQueue.GetMessage"/> or <see cref="SlimDX2.Direct3D10.InfoQueue.AddMessage"/>. 	
    /// </summary>	
    /// <unmanaged>D3D10_MESSAGE_ID</unmanaged>
    public enum MessageId : int {	
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_UNKNOWN</unmanaged>
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD</unmanaged>
        DeviceIasetvertexbuffersHazard = unchecked((int)1),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD</unmanaged>
        DeviceIasetindexbufferHazard = unchecked((int)2),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD</unmanaged>
        DeviceVssetshaderresourcesHazard = unchecked((int)3),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD</unmanaged>
        DeviceVssetconstantbuffersHazard = unchecked((int)4),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD</unmanaged>
        DeviceGssetshaderresourcesHazard = unchecked((int)5),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD</unmanaged>
        DeviceGssetconstantbuffersHazard = unchecked((int)6),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD</unmanaged>
        DevicePssetshaderresourcesHazard = unchecked((int)7),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD</unmanaged>
        DevicePssetconstantbuffersHazard = unchecked((int)8),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD</unmanaged>
        DeviceOmsetrendertargetsHazard = unchecked((int)9),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD</unmanaged>
        DeviceSosettargetsHazard = unchecked((int)10),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_STRING_FROM_APPLICATION</unmanaged>
        StringFromApplication = unchecked((int)11),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_THIS</unmanaged>
        CorruptedThis = unchecked((int)12),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER1</unmanaged>
        CorruptedParameter1 = unchecked((int)13),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER2</unmanaged>
        CorruptedParameter2 = unchecked((int)14),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER3</unmanaged>
        CorruptedParameter3 = unchecked((int)15),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER4</unmanaged>
        CorruptedParameter4 = unchecked((int)16),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER5</unmanaged>
        CorruptedParameter5 = unchecked((int)17),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER6</unmanaged>
        CorruptedParameter6 = unchecked((int)18),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER7</unmanaged>
        CorruptedParameter7 = unchecked((int)19),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER8</unmanaged>
        CorruptedParameter8 = unchecked((int)20),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER9</unmanaged>
        CorruptedParameter9 = unchecked((int)21),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER10</unmanaged>
        CorruptedParameter10 = unchecked((int)22),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER11</unmanaged>
        CorruptedParameter11 = unchecked((int)23),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER12</unmanaged>
        CorruptedParameter12 = unchecked((int)24),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER13</unmanaged>
        CorruptedParameter13 = unchecked((int)25),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER14</unmanaged>
        CorruptedParameter14 = unchecked((int)26),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_PARAMETER15</unmanaged>
        CorruptedParameter15 = unchecked((int)27),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CORRUPTED_MULTITHREADING</unmanaged>
        CorruptedMultithreading = unchecked((int)28),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY</unmanaged>
        MessageReportingOutofmemory = unchecked((int)29),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT</unmanaged>
        IasetinputlayoutUnbinddeletingobject = unchecked((int)30),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        IasetvertexbuffersUnbinddeletingobject = unchecked((int)31),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT</unmanaged>
        IasetindexbufferUnbinddeletingobject = unchecked((int)32),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT</unmanaged>
        VssetshaderUnbinddeletingobject = unchecked((int)33),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT</unmanaged>
        VssetshaderresourcesUnbinddeletingobject = unchecked((int)34),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        VssetconstantbuffersUnbinddeletingobject = unchecked((int)35),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT</unmanaged>
        VssetsamplersUnbinddeletingobject = unchecked((int)36),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT</unmanaged>
        GssetshaderUnbinddeletingobject = unchecked((int)37),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT</unmanaged>
        GssetshaderresourcesUnbinddeletingobject = unchecked((int)38),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        GssetconstantbuffersUnbinddeletingobject = unchecked((int)39),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT</unmanaged>
        GssetsamplersUnbinddeletingobject = unchecked((int)40),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT</unmanaged>
        SosettargetsUnbinddeletingobject = unchecked((int)41),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT</unmanaged>
        PssetshaderUnbinddeletingobject = unchecked((int)42),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT</unmanaged>
        PssetshaderresourcesUnbinddeletingobject = unchecked((int)43),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT</unmanaged>
        PssetconstantbuffersUnbinddeletingobject = unchecked((int)44),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT</unmanaged>
        PssetsamplersUnbinddeletingobject = unchecked((int)45),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT</unmanaged>
        RssetstateUnbinddeletingobject = unchecked((int)46),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT</unmanaged>
        OmsetblendstateUnbinddeletingobject = unchecked((int)47),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT</unmanaged>
        OmsetdepthstencilstateUnbinddeletingobject = unchecked((int)48),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT</unmanaged>
        OmsetrendertargetsUnbinddeletingobject = unchecked((int)49),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT</unmanaged>
        SetpredicationUnbinddeletingobject = unchecked((int)50),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_GETPRIVATEDATA_MOREDATA</unmanaged>
        GetprivatedataMoredata = unchecked((int)51),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA</unmanaged>
        SetprivatedataInvalidfreedata = unchecked((int)52),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN</unmanaged>
        SetprivatedataInvalidiunknown = unchecked((int)53),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS</unmanaged>
        SetprivatedataInvalidflags = unchecked((int)54),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS</unmanaged>
        SetprivatedataChangingparams = unchecked((int)55),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY</unmanaged>
        SetprivatedataOutofmemory = unchecked((int)56),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT</unmanaged>
        CreatebufferUnrecognizedformat = unchecked((int)57),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES</unmanaged>
        CreatebufferInvalidsamples = unchecked((int)58),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE</unmanaged>
        CreatebufferUnrecognizedusage = unchecked((int)59),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS</unmanaged>
        CreatebufferUnrecognizedbindflags = unchecked((int)60),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS</unmanaged>
        CreatebufferUnrecognizedcpuaccessflags = unchecked((int)61),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS</unmanaged>
        CreatebufferUnrecognizedmiscflags = unchecked((int)62),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS</unmanaged>
        CreatebufferInvalidcpuaccessflags = unchecked((int)63),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS</unmanaged>
        CreatebufferInvalidbindflags = unchecked((int)64),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA</unmanaged>
        CreatebufferInvalidinitialdata = unchecked((int)65),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS</unmanaged>
        CreatebufferInvaliddimensions = unchecked((int)66),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS</unmanaged>
        CreatebufferInvalidmiplevels = unchecked((int)67),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS</unmanaged>
        CreatebufferInvalidmiscflags = unchecked((int)68),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN</unmanaged>
        CreatebufferInvalidargReturn = unchecked((int)69),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN</unmanaged>
        CreatebufferOutofmemoryReturn = unchecked((int)70),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_NULLDESC</unmanaged>
        CreatebufferNulldesc = unchecked((int)71),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS</unmanaged>
        CreatebufferInvalidconstantbufferbindings = unchecked((int)72),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION</unmanaged>
        CreatebufferLargeallocation = unchecked((int)73),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT</unmanaged>
        Createtexture1dUnrecognizedformat = unchecked((int)74),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT</unmanaged>
        Createtexture1dUnsupportedformat = unchecked((int)75),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES</unmanaged>
        Createtexture1dInvalidsamples = unchecked((int)76),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE</unmanaged>
        Createtexture1dUnrecognizedusage = unchecked((int)77),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS</unmanaged>
        Createtexture1dUnrecognizedbindflags = unchecked((int)78),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS</unmanaged>
        Createtexture1dUnrecognizedcpuaccessflags = unchecked((int)79),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS</unmanaged>
        Createtexture1dUnrecognizedmiscflags = unchecked((int)80),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS</unmanaged>
        Createtexture1dInvalidcpuaccessflags = unchecked((int)81),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS</unmanaged>
        Createtexture1dInvalidbindflags = unchecked((int)82),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA</unmanaged>
        Createtexture1dInvalidinitialdata = unchecked((int)83),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS</unmanaged>
        Createtexture1dInvaliddimensions = unchecked((int)84),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS</unmanaged>
        Createtexture1dInvalidmiplevels = unchecked((int)85),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS</unmanaged>
        Createtexture1dInvalidmiscflags = unchecked((int)86),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN</unmanaged>
        Createtexture1dInvalidargReturn = unchecked((int)87),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN</unmanaged>
        Createtexture1dOutofmemoryReturn = unchecked((int)88),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_NULLDESC</unmanaged>
        Createtexture1dNulldesc = unchecked((int)89),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION</unmanaged>
        Createtexture1dLargeallocation = unchecked((int)90),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT</unmanaged>
        Createtexture2dUnrecognizedformat = unchecked((int)91),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT</unmanaged>
        Createtexture2dUnsupportedformat = unchecked((int)92),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES</unmanaged>
        Createtexture2dInvalidsamples = unchecked((int)93),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE</unmanaged>
        Createtexture2dUnrecognizedusage = unchecked((int)94),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS</unmanaged>
        Createtexture2dUnrecognizedbindflags = unchecked((int)95),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS</unmanaged>
        Createtexture2dUnrecognizedcpuaccessflags = unchecked((int)96),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS</unmanaged>
        Createtexture2dUnrecognizedmiscflags = unchecked((int)97),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS</unmanaged>
        Createtexture2dInvalidcpuaccessflags = unchecked((int)98),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS</unmanaged>
        Createtexture2dInvalidbindflags = unchecked((int)99),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA</unmanaged>
        Createtexture2dInvalidinitialdata = unchecked((int)100),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS</unmanaged>
        Createtexture2dInvaliddimensions = unchecked((int)101),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS</unmanaged>
        Createtexture2dInvalidmiplevels = unchecked((int)102),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS</unmanaged>
        Createtexture2dInvalidmiscflags = unchecked((int)103),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN</unmanaged>
        Createtexture2dInvalidargReturn = unchecked((int)104),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN</unmanaged>
        Createtexture2dOutofmemoryReturn = unchecked((int)105),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_NULLDESC</unmanaged>
        Createtexture2dNulldesc = unchecked((int)106),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION</unmanaged>
        Createtexture2dLargeallocation = unchecked((int)107),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT</unmanaged>
        Createtexture3dUnrecognizedformat = unchecked((int)108),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT</unmanaged>
        Createtexture3dUnsupportedformat = unchecked((int)109),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES</unmanaged>
        Createtexture3dInvalidsamples = unchecked((int)110),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE</unmanaged>
        Createtexture3dUnrecognizedusage = unchecked((int)111),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS</unmanaged>
        Createtexture3dUnrecognizedbindflags = unchecked((int)112),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS</unmanaged>
        Createtexture3dUnrecognizedcpuaccessflags = unchecked((int)113),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS</unmanaged>
        Createtexture3dUnrecognizedmiscflags = unchecked((int)114),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS</unmanaged>
        Createtexture3dInvalidcpuaccessflags = unchecked((int)115),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS</unmanaged>
        Createtexture3dInvalidbindflags = unchecked((int)116),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA</unmanaged>
        Createtexture3dInvalidinitialdata = unchecked((int)117),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS</unmanaged>
        Createtexture3dInvaliddimensions = unchecked((int)118),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS</unmanaged>
        Createtexture3dInvalidmiplevels = unchecked((int)119),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS</unmanaged>
        Createtexture3dInvalidmiscflags = unchecked((int)120),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN</unmanaged>
        Createtexture3dInvalidargReturn = unchecked((int)121),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN</unmanaged>
        Createtexture3dOutofmemoryReturn = unchecked((int)122),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_NULLDESC</unmanaged>
        Createtexture3dNulldesc = unchecked((int)123),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION</unmanaged>
        Createtexture3dLargeallocation = unchecked((int)124),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        CreateshaderresourceviewUnrecognizedformat = unchecked((int)125),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC</unmanaged>
        CreateshaderresourceviewInvaliddesc = unchecked((int)126),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT</unmanaged>
        CreateshaderresourceviewInvalidformat = unchecked((int)127),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS</unmanaged>
        CreateshaderresourceviewInvaliddimensions = unchecked((int)128),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE</unmanaged>
        CreateshaderresourceviewInvalidresource = unchecked((int)129),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS</unmanaged>
        CreateshaderresourceviewToomanyobjects = unchecked((int)130),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN</unmanaged>
        CreateshaderresourceviewInvalidargReturn = unchecked((int)131),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN</unmanaged>
        CreateshaderresourceviewOutofmemoryReturn = unchecked((int)132),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        CreaterendertargetviewUnrecognizedformat = unchecked((int)133),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT</unmanaged>
        CreaterendertargetviewUnsupportedformat = unchecked((int)134),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC</unmanaged>
        CreaterendertargetviewInvaliddesc = unchecked((int)135),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT</unmanaged>
        CreaterendertargetviewInvalidformat = unchecked((int)136),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS</unmanaged>
        CreaterendertargetviewInvaliddimensions = unchecked((int)137),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE</unmanaged>
        CreaterendertargetviewInvalidresource = unchecked((int)138),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS</unmanaged>
        CreaterendertargetviewToomanyobjects = unchecked((int)139),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN</unmanaged>
        CreaterendertargetviewInvalidargReturn = unchecked((int)140),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN</unmanaged>
        CreaterendertargetviewOutofmemoryReturn = unchecked((int)141),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT</unmanaged>
        CreatedepthstencilviewUnrecognizedformat = unchecked((int)142),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC</unmanaged>
        CreatedepthstencilviewInvaliddesc = unchecked((int)143),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT</unmanaged>
        CreatedepthstencilviewInvalidformat = unchecked((int)144),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS</unmanaged>
        CreatedepthstencilviewInvaliddimensions = unchecked((int)145),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE</unmanaged>
        CreatedepthstencilviewInvalidresource = unchecked((int)146),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS</unmanaged>
        CreatedepthstencilviewToomanyobjects = unchecked((int)147),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN</unmanaged>
        CreatedepthstencilviewInvalidargReturn = unchecked((int)148),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN</unmanaged>
        CreatedepthstencilviewOutofmemoryReturn = unchecked((int)149),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY</unmanaged>
        CreateinputlayoutOutofmemory = unchecked((int)150),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS</unmanaged>
        CreateinputlayoutToomanyelements = unchecked((int)151),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT</unmanaged>
        CreateinputlayoutInvalidformat = unchecked((int)152),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT</unmanaged>
        CreateinputlayoutIncompatibleformat = unchecked((int)153),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT</unmanaged>
        CreateinputlayoutInvalidslot = unchecked((int)154),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS</unmanaged>
        CreateinputlayoutInvalidinputslotclass = unchecked((int)155),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH</unmanaged>
        CreateinputlayoutSteprateslotclassmismatch = unchecked((int)156),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE</unmanaged>
        CreateinputlayoutInvalidslotclasschange = unchecked((int)157),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE</unmanaged>
        CreateinputlayoutInvalidstepratechange = unchecked((int)158),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT</unmanaged>
        CreateinputlayoutInvalidalignment = unchecked((int)159),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC</unmanaged>
        CreateinputlayoutDuplicatesemantic = unchecked((int)160),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE</unmanaged>
        CreateinputlayoutUnparseableinputsignature = unchecked((int)161),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC</unmanaged>
        CreateinputlayoutNullsemantic = unchecked((int)162),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT</unmanaged>
        CreateinputlayoutMissingelement = unchecked((int)163),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC</unmanaged>
        CreateinputlayoutNulldesc = unchecked((int)164),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY</unmanaged>
        CreatevertexshaderOutofmemory = unchecked((int)165),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE</unmanaged>
        CreatevertexshaderInvalidshaderbytecode = unchecked((int)166),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE</unmanaged>
        CreatevertexshaderInvalidshadertype = unchecked((int)167),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY</unmanaged>
        CreategeometryshaderOutofmemory = unchecked((int)168),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE</unmanaged>
        CreategeometryshaderInvalidshaderbytecode = unchecked((int)169),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE</unmanaged>
        CreategeometryshaderInvalidshadertype = unchecked((int)170),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY</unmanaged>
        CreategeometryshaderwithstreamoutputOutofmemory = unchecked((int)171),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE</unmanaged>
        CreategeometryshaderwithstreamoutputInvalidshaderbytecode = unchecked((int)172),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE</unmanaged>
        CreategeometryshaderwithstreamoutputInvalidshadertype = unchecked((int)173),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES</unmanaged>
        CreategeometryshaderwithstreamoutputInvalidnumentries = unchecked((int)174),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED</unmanaged>
        CreategeometryshaderwithstreamoutputOutputstreamstrideunused = unchecked((int)175),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL</unmanaged>
        CreategeometryshaderwithstreamoutputUnexpecteddecl = unchecked((int)176),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL</unmanaged>
        CreategeometryshaderwithstreamoutputExpecteddecl = unchecked((int)177),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED</unmanaged>
        CreategeometryshaderwithstreamoutputOutputslot0expected = unchecked((int)178),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT</unmanaged>
        CreategeometryshaderwithstreamoutputInvalidoutputslot = unchecked((int)179),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT</unmanaged>
        CreategeometryshaderwithstreamoutputOnlyoneelementperslot = unchecked((int)180),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT</unmanaged>
        CreategeometryshaderwithstreamoutputInvalidcomponentcount = unchecked((int)181),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT</unmanaged>
        CreategeometryshaderwithstreamoutputInvalidstartcomponentandcomponentcount = unchecked((int)182),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION</unmanaged>
        CreategeometryshaderwithstreamoutputInvalidgapdefinition = unchecked((int)183),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT</unmanaged>
        CreategeometryshaderwithstreamoutputRepeatedoutput = unchecked((int)184),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE</unmanaged>
        CreategeometryshaderwithstreamoutputInvalidoutputstreamstride = unchecked((int)185),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC</unmanaged>
        CreategeometryshaderwithstreamoutputMissingsemantic = unchecked((int)186),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH</unmanaged>
        CreategeometryshaderwithstreamoutputMaskmismatch = unchecked((int)187),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS</unmanaged>
        CreategeometryshaderwithstreamoutputCanthaveonlygaps = unchecked((int)188),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX</unmanaged>
        CreategeometryshaderwithstreamoutputDecltoocomplex = unchecked((int)189),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE</unmanaged>
        CreategeometryshaderwithstreamoutputMissingoutputsignature = unchecked((int)190),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY</unmanaged>
        CreatepixelshaderOutofmemory = unchecked((int)191),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE</unmanaged>
        CreatepixelshaderInvalidshaderbytecode = unchecked((int)192),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE</unmanaged>
        CreatepixelshaderInvalidshadertype = unchecked((int)193),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE</unmanaged>
        CreaterasterizerstateInvalidfillmode = unchecked((int)194),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE</unmanaged>
        CreaterasterizerstateInvalidcullmode = unchecked((int)195),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP</unmanaged>
        CreaterasterizerstateInvaliddepthbiasclamp = unchecked((int)196),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS</unmanaged>
        CreaterasterizerstateInvalidslopescaleddepthbias = unchecked((int)197),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS</unmanaged>
        CreaterasterizerstateToomanyobjects = unchecked((int)198),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC</unmanaged>
        CreaterasterizerstateNulldesc = unchecked((int)199),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK</unmanaged>
        CreatedepthstencilstateInvaliddepthwritemask = unchecked((int)200),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC</unmanaged>
        CreatedepthstencilstateInvaliddepthfunc = unchecked((int)201),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP</unmanaged>
        CreatedepthstencilstateInvalidfrontfacestencilfailop = unchecked((int)202),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP</unmanaged>
        CreatedepthstencilstateInvalidfrontfacestencilzfailop = unchecked((int)203),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP</unmanaged>
        CreatedepthstencilstateInvalidfrontfacestencilpassop = unchecked((int)204),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC</unmanaged>
        CreatedepthstencilstateInvalidfrontfacestencilfunc = unchecked((int)205),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP</unmanaged>
        CreatedepthstencilstateInvalidbackfacestencilfailop = unchecked((int)206),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP</unmanaged>
        CreatedepthstencilstateInvalidbackfacestencilzfailop = unchecked((int)207),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP</unmanaged>
        CreatedepthstencilstateInvalidbackfacestencilpassop = unchecked((int)208),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC</unmanaged>
        CreatedepthstencilstateInvalidbackfacestencilfunc = unchecked((int)209),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS</unmanaged>
        CreatedepthstencilstateToomanyobjects = unchecked((int)210),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC</unmanaged>
        CreatedepthstencilstateNulldesc = unchecked((int)211),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND</unmanaged>
        CreateblendstateInvalidsrcblend = unchecked((int)212),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND</unmanaged>
        CreateblendstateInvaliddestblend = unchecked((int)213),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP</unmanaged>
        CreateblendstateInvalidblendop = unchecked((int)214),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA</unmanaged>
        CreateblendstateInvalidsrcblendalpha = unchecked((int)215),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA</unmanaged>
        CreateblendstateInvaliddestblendalpha = unchecked((int)216),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA</unmanaged>
        CreateblendstateInvalidblendopalpha = unchecked((int)217),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK</unmanaged>
        CreateblendstateInvalidrendertargetwritemask = unchecked((int)218),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS</unmanaged>
        CreateblendstateToomanyobjects = unchecked((int)219),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC</unmanaged>
        CreateblendstateNulldesc = unchecked((int)220),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER</unmanaged>
        CreatesamplerstateInvalidfilter = unchecked((int)221),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU</unmanaged>
        CreatesamplerstateInvalidaddressu = unchecked((int)222),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV</unmanaged>
        CreatesamplerstateInvalidaddressv = unchecked((int)223),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW</unmanaged>
        CreatesamplerstateInvalidaddressw = unchecked((int)224),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS</unmanaged>
        CreatesamplerstateInvalidmiplodbias = unchecked((int)225),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY</unmanaged>
        CreatesamplerstateInvalidmaxanisotropy = unchecked((int)226),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC</unmanaged>
        CreatesamplerstateInvalidcomparisonfunc = unchecked((int)227),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD</unmanaged>
        CreatesamplerstateInvalidminlod = unchecked((int)228),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD</unmanaged>
        CreatesamplerstateInvalidmaxlod = unchecked((int)229),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS</unmanaged>
        CreatesamplerstateToomanyobjects = unchecked((int)230),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC</unmanaged>
        CreatesamplerstateNulldesc = unchecked((int)231),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY</unmanaged>
        CreatequeryorpredicateInvalidquery = unchecked((int)232),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS</unmanaged>
        CreatequeryorpredicateInvalidmiscflags = unchecked((int)233),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG</unmanaged>
        CreatequeryorpredicateUnexpectedmiscflag = unchecked((int)234),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC</unmanaged>
        CreatequeryorpredicateNulldesc = unchecked((int)235),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED</unmanaged>
        DeviceIasetprimitivetopologyTopologyUnrecognized = unchecked((int)236),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED</unmanaged>
        DeviceIasetprimitivetopologyTopologyUndefined = unchecked((int)237),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER</unmanaged>
        IasetvertexbuffersInvalidbuffer = unchecked((int)238),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE</unmanaged>
        DeviceIasetvertexbuffersOffsetTooLarge = unchecked((int)239),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY</unmanaged>
        DeviceIasetvertexbuffersBuffersEmpty = unchecked((int)240),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER</unmanaged>
        IasetindexbufferInvalidbuffer = unchecked((int)241),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID</unmanaged>
        DeviceIasetindexbufferFormatInvalid = unchecked((int)242),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE</unmanaged>
        DeviceIasetindexbufferOffsetTooLarge = unchecked((int)243),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED</unmanaged>
        DeviceIasetindexbufferOffsetUnaligned = unchecked((int)244),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        DeviceVssetshaderresourcesViewsEmpty = unchecked((int)245),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged>
        VssetconstantbuffersInvalidbuffer = unchecked((int)246),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        DeviceVssetconstantbuffersBuffersEmpty = unchecked((int)247),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        DeviceVssetsamplersSamplersEmpty = unchecked((int)248),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        DeviceGssetshaderresourcesViewsEmpty = unchecked((int)249),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged>
        GssetconstantbuffersInvalidbuffer = unchecked((int)250),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        DeviceGssetconstantbuffersBuffersEmpty = unchecked((int)251),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        DeviceGssetsamplersSamplersEmpty = unchecked((int)252),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER</unmanaged>
        SosettargetsInvalidbuffer = unchecked((int)253),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED</unmanaged>
        DeviceSosettargetsOffsetUnaligned = unchecked((int)254),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        DevicePssetshaderresourcesViewsEmpty = unchecked((int)255),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER</unmanaged>
        PssetconstantbuffersInvalidbuffer = unchecked((int)256),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        DevicePssetconstantbuffersBuffersEmpty = unchecked((int)257),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        DevicePssetsamplersSamplersEmpty = unchecked((int)258),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT</unmanaged>
        DeviceRssetviewportsInvalidviewport = unchecked((int)259),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR</unmanaged>
        DeviceRssetscissorrectsInvalidscissor = unchecked((int)260),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH</unmanaged>
        ClearrendertargetviewDenormflush = unchecked((int)261),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH</unmanaged>
        CleardepthstencilviewDenormflush = unchecked((int)262),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID</unmanaged>
        CleardepthstencilviewInvalid = unchecked((int)263),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY</unmanaged>
        DeviceIagetvertexbuffersBuffersEmpty = unchecked((int)264),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        DeviceVsgetshaderresourcesViewsEmpty = unchecked((int)265),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        DeviceVsgetconstantbuffersBuffersEmpty = unchecked((int)266),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        DeviceVsgetsamplersSamplersEmpty = unchecked((int)267),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        DeviceGsgetshaderresourcesViewsEmpty = unchecked((int)268),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        DeviceGsgetconstantbuffersBuffersEmpty = unchecked((int)269),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        DeviceGsgetsamplersSamplersEmpty = unchecked((int)270),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY</unmanaged>
        DeviceSogettargetsBuffersEmpty = unchecked((int)271),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY</unmanaged>
        DevicePsgetshaderresourcesViewsEmpty = unchecked((int)272),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY</unmanaged>
        DevicePsgetconstantbuffersBuffersEmpty = unchecked((int)273),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY</unmanaged>
        DevicePsgetsamplersSamplersEmpty = unchecked((int)274),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY</unmanaged>
        DeviceRsgetviewportsViewportsEmpty = unchecked((int)275),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY</unmanaged>
        DeviceRsgetscissorrectsRectsEmpty = unchecked((int)276),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID</unmanaged>
        DeviceGeneratemipsResourceInvalid = unchecked((int)277),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE</unmanaged>
        CopysubresourceregionInvaliddestinationsubresource = unchecked((int)278),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE</unmanaged>
        CopysubresourceregionInvalidsourcesubresource = unchecked((int)279),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX</unmanaged>
        CopysubresourceregionInvalidsourcebox = unchecked((int)280),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE</unmanaged>
        CopysubresourceregionInvalidsource = unchecked((int)281),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE</unmanaged>
        CopysubresourceregionInvaliddestinationstate = unchecked((int)282),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE</unmanaged>
        CopysubresourceregionInvalidsourcestate = unchecked((int)283),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE</unmanaged>
        CopyresourceInvalidsource = unchecked((int)284),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE</unmanaged>
        CopyresourceInvaliddestinationstate = unchecked((int)285),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE</unmanaged>
        CopyresourceInvalidsourcestate = unchecked((int)286),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE</unmanaged>
        UpdatesubresourceInvaliddestinationsubresource = unchecked((int)287),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX</unmanaged>
        UpdatesubresourceInvaliddestinationbox = unchecked((int)288),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE</unmanaged>
        UpdatesubresourceInvaliddestinationstate = unchecked((int)289),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID</unmanaged>
        DeviceResolvesubresourceDestinationInvalid = unchecked((int)290),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID</unmanaged>
        DeviceResolvesubresourceDestinationSubResourceInvalid = unchecked((int)291),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID</unmanaged>
        DeviceResolvesubresourceSourceInvalid = unchecked((int)292),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID</unmanaged>
        DeviceResolvesubresourceSourceSubResourceInvalid = unchecked((int)293),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID</unmanaged>
        DeviceResolvesubresourceFormatInvalid = unchecked((int)294),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE</unmanaged>
        BufferMapInvalidmaptype = unchecked((int)295),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS</unmanaged>
        BufferMapInvalidflags = unchecked((int)296),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED</unmanaged>
        BufferMapAlreadymapped = unchecked((int)297),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN</unmanaged>
        BufferMapDeviceremovedReturn = unchecked((int)298),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED</unmanaged>
        BufferUnmapNotmapped = unchecked((int)299),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE</unmanaged>
        Texture1DMapInvalidmaptype = unchecked((int)300),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE</unmanaged>
        Texture1DMapInvalidsubresource = unchecked((int)301),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS</unmanaged>
        Texture1DMapInvalidflags = unchecked((int)302),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED</unmanaged>
        Texture1DMapAlreadymapped = unchecked((int)303),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN</unmanaged>
        Texture1DMapDeviceremovedReturn = unchecked((int)304),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        Texture1DUnmapInvalidsubresource = unchecked((int)305),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED</unmanaged>
        Texture1DUnmapNotmapped = unchecked((int)306),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE</unmanaged>
        Texture2DMapInvalidmaptype = unchecked((int)307),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE</unmanaged>
        Texture2DMapInvalidsubresource = unchecked((int)308),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS</unmanaged>
        Texture2DMapInvalidflags = unchecked((int)309),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED</unmanaged>
        Texture2DMapAlreadymapped = unchecked((int)310),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN</unmanaged>
        Texture2DMapDeviceremovedReturn = unchecked((int)311),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        Texture2DUnmapInvalidsubresource = unchecked((int)312),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED</unmanaged>
        Texture2DUnmapNotmapped = unchecked((int)313),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE</unmanaged>
        Texture3DMapInvalidmaptype = unchecked((int)314),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE</unmanaged>
        Texture3DMapInvalidsubresource = unchecked((int)315),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS</unmanaged>
        Texture3DMapInvalidflags = unchecked((int)316),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED</unmanaged>
        Texture3DMapAlreadymapped = unchecked((int)317),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN</unmanaged>
        Texture3DMapDeviceremovedReturn = unchecked((int)318),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE</unmanaged>
        Texture3DUnmapInvalidsubresource = unchecked((int)319),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED</unmanaged>
        Texture3DUnmapNotmapped = unchecked((int)320),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED</unmanaged>
        CheckformatsupportFormatDeprecated = unchecked((int)321),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED</unmanaged>
        CheckmultisamplequalitylevelsFormatDeprecated = unchecked((int)322),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS</unmanaged>
        SetexceptionmodeUnrecognizedflags = unchecked((int)323),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN</unmanaged>
        SetexceptionmodeInvalidargReturn = unchecked((int)324),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN</unmanaged>
        SetexceptionmodeDeviceremovedReturn = unchecked((int)325),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE</unmanaged>
        RefSimulatingInfinitelyFastHardware = unchecked((int)326),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_REF_THREADING_MODE</unmanaged>
        RefThreadingMode = unchecked((int)327),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_REF_UMDRIVER_EXCEPTION</unmanaged>
        RefUmdriverException = unchecked((int)328),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_REF_KMDRIVER_EXCEPTION</unmanaged>
        RefKmdriverException = unchecked((int)329),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_REF_HARDWARE_EXCEPTION</unmanaged>
        RefHardwareException = unchecked((int)330),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE</unmanaged>
        RefAccessingIndexableTempOutOfRange = unchecked((int)331),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER</unmanaged>
        RefProblemParsingShader = unchecked((int)332),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_REF_OUT_OF_MEMORY</unmanaged>
        RefOutOfMemory = unchecked((int)333),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_REF_INFO</unmanaged>
        RefInformation = unchecked((int)334),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW</unmanaged>
        DeviceDrawVertexposOverflow = unchecked((int)335),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW</unmanaged>
        DeviceDrawindexedIndexposOverflow = unchecked((int)336),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW</unmanaged>
        DeviceDrawinstancedVertexposOverflow = unchecked((int)337),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW</unmanaged>
        DeviceDrawinstancedInstanceposOverflow = unchecked((int)338),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW</unmanaged>
        DeviceDrawindexedinstancedInstanceposOverflow = unchecked((int)339),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW</unmanaged>
        DeviceDrawindexedinstancedIndexposOverflow = unchecked((int)340),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET</unmanaged>
        DeviceDrawVertexShaderNotSet = unchecked((int)341),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND</unmanaged>
        DeviceShaderLinkageSemanticnameNotFound = unchecked((int)342),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX</unmanaged>
        DeviceShaderLinkageRegisterindex = unchecked((int)343),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE</unmanaged>
        DeviceShaderLinkageComponenttype = unchecked((int)344),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK</unmanaged>
        DeviceShaderLinkageRegistermask = unchecked((int)345),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE</unmanaged>
        DeviceShaderLinkageSystemvalue = unchecked((int)346),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS</unmanaged>
        DeviceShaderLinkageNeverwrittenAlwaysreads = unchecked((int)347),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET</unmanaged>
        DeviceDrawVertexBufferNotSet = unchecked((int)348),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET</unmanaged>
        DeviceDrawInputlayoutNotSet = unchecked((int)349),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET</unmanaged>
        DeviceDrawConstantBufferNotSet = unchecked((int)350),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL</unmanaged>
        DeviceDrawConstantBufferTooSmall = unchecked((int)351),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET</unmanaged>
        DeviceDrawSamplerNotSet = unchecked((int)352),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET</unmanaged>
        DeviceDrawShaderresourceviewNotSet = unchecked((int)353),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH</unmanaged>
        DeviceDrawViewDimensionMismatch = unchecked((int)354),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL</unmanaged>
        DeviceDrawVertexBufferStrideTooSmall = unchecked((int)355),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL</unmanaged>
        DeviceDrawVertexBufferTooSmall = unchecked((int)356),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET</unmanaged>
        DeviceDrawIndexBufferNotSet = unchecked((int)357),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID</unmanaged>
        DeviceDrawIndexBufferFormatInvalid = unchecked((int)358),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL</unmanaged>
        DeviceDrawIndexBufferTooSmall = unchecked((int)359),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH</unmanaged>
        DeviceDrawGsInputPrimitiveMismatch = unchecked((int)360),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH</unmanaged>
        DeviceDrawResourceReturnTypeMismatch = unchecked((int)361),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT</unmanaged>
        DeviceDrawPositionNotPresent = unchecked((int)362),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET</unmanaged>
        DeviceDrawOutputStreamNotSet = unchecked((int)363),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED</unmanaged>
        DeviceDrawBoundResourceMapped = unchecked((int)364),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY</unmanaged>
        DeviceDrawInvalidPrimitivetopology = unchecked((int)365),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED</unmanaged>
        DeviceDrawVertexOffsetUnaligned = unchecked((int)366),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED</unmanaged>
        DeviceDrawVertexStrideUnaligned = unchecked((int)367),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED</unmanaged>
        DeviceDrawIndexOffsetUnaligned = unchecked((int)368),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED</unmanaged>
        DeviceDrawOutputStreamOffsetUnaligned = unchecked((int)369),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED</unmanaged>
        DeviceDrawResourceFormatLdUnsupported = unchecked((int)370),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED</unmanaged>
        DeviceDrawResourceFormatSampleUnsupported = unchecked((int)371),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED</unmanaged>
        DeviceDrawResourceFormatSampleCUnsupported = unchecked((int)372),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED</unmanaged>
        DeviceDrawResourceMultisampleUnsupported = unchecked((int)373),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE</unmanaged>
        DeviceDrawStreamOutputTargetsBoundWithoutSource = unchecked((int)374),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER</unmanaged>
        DeviceDrawStreamOutputStrideLargerThanBuffer = unchecked((int)375),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING</unmanaged>
        DeviceDrawOmRenderTargetDoesNotSupportBlending = unchecked((int)376),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0</unmanaged>
        DeviceDrawOmDualSourceBlendingCanOnlyHaveRenderTarget0 = unchecked((int)377),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT</unmanaged>
        DeviceRemovalProcessAtFault = unchecked((int)378),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT</unmanaged>
        DeviceRemovalProcessPossiblyAtFault = unchecked((int)379),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT</unmanaged>
        DeviceRemovalProcessNotAtFault = unchecked((int)380),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN</unmanaged>
        DeviceOpenSharedResourceInvalidargReturn = unchecked((int)381),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN</unmanaged>
        DeviceOpenSharedResourceOutofmemoryReturn = unchecked((int)382),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN</unmanaged>
        DeviceOpenSharedResourceBadinterfaceReturn = unchecked((int)383),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET</unmanaged>
        DeviceDrawViewportNotSet = unchecked((int)384),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC</unmanaged>
        CreateinputlayoutTrailingDigitInSemantic = unchecked((int)385),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC</unmanaged>
        CreategeometryshaderwithstreamoutputTrailingDigitInSemantic = unchecked((int)386),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH</unmanaged>
        DeviceRssetviewportsDenormflush = unchecked((int)387),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW</unmanaged>
        OmsetrendertargetsInvalidview = unchecked((int)388),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS</unmanaged>
        DeviceSettextfiltersizeInvaliddimensions = unchecked((int)389),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH</unmanaged>
        DeviceDrawSamplerMismatch = unchecked((int)390),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH</unmanaged>
        CreateinputlayoutTypeMismatch = unchecked((int)391),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY</unmanaged>
        BlendstateGetdescLegacy = unchecked((int)392),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY</unmanaged>
        ShaderresourceviewGetdescLegacy = unchecked((int)393),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN</unmanaged>
        CreatequeryOutofmemoryReturn = unchecked((int)394),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN</unmanaged>
        CreatepredicateOutofmemoryReturn = unchecked((int)395),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER</unmanaged>
        CreatecounterOutofrangeCounter = unchecked((int)396),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED</unmanaged>
        CreatecounterSimultaneousActiveCountersExhausted = unchecked((int)397),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER</unmanaged>
        CreatecounterUnsupportedWellknownCounter = unchecked((int)398),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN</unmanaged>
        CreatecounterOutofmemoryReturn = unchecked((int)399),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN</unmanaged>
        CreatecounterNonexclusiveReturn = unchecked((int)400),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATECOUNTER_NULLDESC</unmanaged>
        CreatecounterNulldesc = unchecked((int)401),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER</unmanaged>
        CheckcounterOutofrangeCounter = unchecked((int)402),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER</unmanaged>
        CheckcounterUnsupportedWellknownCounter = unchecked((int)403),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE</unmanaged>
        SetpredicationInvalidPredicateState = unchecked((int)404),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED</unmanaged>
        QueryBeginUnsupported = unchecked((int)405),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION</unmanaged>
        PredicateBeginDuringPredication = unchecked((int)406),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_QUERY_BEGIN_DUPLICATE</unmanaged>
        QueryBeginDuplicate = unchecked((int)407),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS</unmanaged>
        QueryBeginAbandoningPreviousResults = unchecked((int)408),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION</unmanaged>
        PredicateEndDuringPredication = unchecked((int)409),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS</unmanaged>
        QueryEndAbandoningPreviousResults = unchecked((int)410),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN</unmanaged>
        QueryEndWithoutBegin = unchecked((int)411),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE</unmanaged>
        QueryGetdataInvalidDatasize = unchecked((int)412),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS</unmanaged>
        QueryGetdataInvalidFlags = unchecked((int)413),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL</unmanaged>
        QueryGetdataInvalidCall = unchecked((int)414),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH</unmanaged>
        DeviceDrawPsOutputTypeMismatch = unchecked((int)415),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED</unmanaged>
        DeviceDrawResourceFormatGatherUnsupported = unchecked((int)416),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN</unmanaged>
        DeviceDrawInvalidUseOfCenterMultisamplePattern = unchecked((int)417),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE</unmanaged>
        DeviceIasetvertexbuffersStrideTooLarge = unchecked((int)418),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE</unmanaged>
        DeviceIasetvertexbuffersInvalidrange = unchecked((int)419),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT</unmanaged>
        CreateinputlayoutEmptyLayout = unchecked((int)420),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH</unmanaged>
        DeviceDrawResourceSampleCountMismatch = unchecked((int)421),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_D3D10_MESSAGES_END</unmanaged>
        D3D10MessagesEnd = unchecked((int)422),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_D3D10L9_MESSAGES_START</unmanaged>
        D3D10L9MessagesStart = unchecked((int)1048576),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED</unmanaged>
        CreatedepthstencilstateStencilNoTwoSided = unchecked((int)1048577),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED</unmanaged>
        CreaterasterizerstateDepthBiasClampNotSupported = unchecked((int)1048578),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT</unmanaged>
        CreatesamplerstateNoComparisonSupport = unchecked((int)1048579),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY</unmanaged>
        CreatesamplerstateExcessiveAnisotropy = unchecked((int)1048580),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE</unmanaged>
        CreatesamplerstateBorderOutOfRange = unchecked((int)1048581),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED</unmanaged>
        VssetsamplersNotSupported = unchecked((int)1048582),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS</unmanaged>
        VssetsamplersTooManySamplers = unchecked((int)1048583),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS</unmanaged>
        PssetsamplersTooManySamplers = unchecked((int)1048584),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS</unmanaged>
        CreateresourceNoArrays = unchecked((int)1048585),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND</unmanaged>
        CreateresourceNoVbAndIbBind = unchecked((int)1048586),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D</unmanaged>
        CreateresourceNoTexture1d = unchecked((int)1048587),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE</unmanaged>
        CreateresourceDimensionOutOfRange = unchecked((int)1048588),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE</unmanaged>
        CreateresourceNotBindableAsShaderResource = unchecked((int)1048589),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS</unmanaged>
        OmsetrendertargetsTooManyRenderTargets = unchecked((int)1048590),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS</unmanaged>
        OmsetrendertargetsNoDifferingBitDepths = unchecked((int)1048591),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX</unmanaged>
        IasetvertexbuffersBadBufferIndex = unchecked((int)1048592),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS</unmanaged>
        DeviceRssetviewportsTooManyViewports = unchecked((int)1048593),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED</unmanaged>
        DeviceIasetprimitivetopologyAdjacencyUnsupported = unchecked((int)1048594),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS</unmanaged>
        DeviceRssetscissorrectsTooManyScissors = unchecked((int)1048595),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY</unmanaged>
        CopyresourceOnlyTexture2dWithinGpuMemory = unchecked((int)1048596),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK</unmanaged>
        CopyresourceNoTexture3dReadback = unchecked((int)1048597),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK</unmanaged>
        CopyresourceNoTextureOnlyReadback = unchecked((int)1048598),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT</unmanaged>
        CreateinputlayoutUnsupportedFormat = unchecked((int)1048599),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE</unmanaged>
        CreateblendstateNoAlphaToCoverage = unchecked((int)1048600),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE</unmanaged>
        CreaterasterizerstateDepthClipEnableMustBeTrue = unchecked((int)1048601),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE</unmanaged>
        DrawindexedStartindexlocationMustBePositive = unchecked((int)1048602),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD</unmanaged>
        CreateshaderresourceviewMustUseLowestLod = unchecked((int)1048603),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL</unmanaged>
        CreatesamplerstateMinlodMustNotBeFractional = unchecked((int)1048604),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX</unmanaged>
        CreatesamplerstateMaxlodMustBeFltMaximum = unchecked((int)1048605),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO</unmanaged>
        CreateshaderresourceviewFirstarraysliceMustBeZero = unchecked((int)1048606),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES</unmanaged>
        CreateshaderresourceviewCubesMustHave6Sides = unchecked((int)1048607),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET</unmanaged>
        CreateresourceNotBindableAsRenderTarget = unchecked((int)1048608),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER</unmanaged>
        CreateresourceNoDwordIndexBuffer = unchecked((int)1048609),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE</unmanaged>
        CreateresourceMsaaPrecludesShaderResource = unchecked((int)1048610),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE</unmanaged>
        CreateresourcePresentationPrecludesShaderResource = unchecked((int)1048611),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE</unmanaged>
        CreateblendstateNoIndependentBlendEnable = unchecked((int)1048612),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS</unmanaged>
        CreateblendstateNoIndependentWriteMasks = unchecked((int)1048613),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT</unmanaged>
        CreateresourceNoStreamOut = unchecked((int)1048614),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS</unmanaged>
        CreateresourceOnlyVbIbForBuffers = unchecked((int)1048615),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES</unmanaged>
        CreateresourceNoAutogenForVolumes = unchecked((int)1048616),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED</unmanaged>
        CreateresourceDxgiFormatR8G8B8A8CannotBeShared = unchecked((int)1048617),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED</unmanaged>
        VsshaderresourcesNotSupported = unchecked((int)1048618),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED</unmanaged>
        GeometryShaderNotSupported = unchecked((int)1048619),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED</unmanaged>
        StreamOutNotSupported = unchecked((int)1048620),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED</unmanaged>
        TextFilterNotSupported = unchecked((int)1048621),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND</unmanaged>
        CreateblendstateNoSeparateAlphaBlend = unchecked((int)1048622),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND</unmanaged>
        CreateblendstateNoMrtBlend = unchecked((int)1048623),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED</unmanaged>
        CreateblendstateOperationNotSupported = unchecked((int)1048624),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE</unmanaged>
        CreatesamplerstateNoMirroronce = unchecked((int)1048625),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED</unmanaged>
        DrawinstancedNotSupported = unchecked((int)1048626),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3</unmanaged>
        DrawindexedinstancedNotSupportedBelow93 = unchecked((int)1048627),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED</unmanaged>
        DrawindexedPointlistUnsupported = unchecked((int)1048628),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO</unmanaged>
        SetblendstateSampleMaskCannotBeZero = unchecked((int)1048629),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION</unmanaged>
        CreateresourceDimensionExceedsFeatureLevelDefinition = unchecked((int)1048630),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED</unmanaged>
        CreateresourceOnlySingleMipLevelDepthStencilSupported = unchecked((int)1048631),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR</unmanaged>
        DeviceRssetscissorrectsNegativescissor = unchecked((int)1048632),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA</unmanaged>
        SlotZeroMustBeD3D10InputPerVertexData = unchecked((int)1048633),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP</unmanaged>
        CreateresourceNonPow2Mipmap = unchecked((int)1048634),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED</unmanaged>
        CreatesamplerstateBorderNotSupported = unchecked((int)1048635),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT</unmanaged>
        OmsetrendertargetsNoSRgbMrt = unchecked((int)1048636),			
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>D3D10_MESSAGE_ID_D3D10L9_MESSAGES_END</unmanaged>
        D3D10L9MessagesEnd = unchecked((int)1048637),			
    }
    
    /// <summary>	
    /// The device-driver type.	
    /// </summary>	
    /// <remarks>	
    /// The device-driver type needs to be specified when the device is created (using <see cref="SlimDX2.Direct3D10.D3D10.CreateDevice"/> or <see cref="SlimDX2.Direct3D10.D3D10.CreateDeviceAndSwapChain"/>). For information about limitations creating nonhardware-type devices on certain feature levels, see {{Limitations Creating WARP and Reference Devices}}.	
    /// </remarks>	
    /// <unmanaged>D3D10_DRIVER_TYPE</unmanaged>
    public enum DriverType : int {	
        
        /// <summary>	
        /// A hardware device; commonly called a HAL device.	
        /// </summary>	
        /// <unmanaged>D3D10_DRIVER_TYPE_HARDWARE</unmanaged>
        Hardware = unchecked((int)0),			
        
        /// <summary>	
        /// A reference device; commonly called a REF device.	
        /// </summary>	
        /// <unmanaged>D3D10_DRIVER_TYPE_REFERENCE</unmanaged>
        Reference = unchecked((int)1),			
        
        /// <summary>	
        /// A NULL device; which is a reference device without render capability.	
        /// </summary>	
        /// <unmanaged>D3D10_DRIVER_TYPE_NULL</unmanaged>
        Null = unchecked((int)2),			
        
        /// <summary>	
        /// Reserved for later use.	
        /// </summary>	
        /// <unmanaged>D3D10_DRIVER_TYPE_SOFTWARE</unmanaged>
        Software = unchecked((int)3),			
        
        /// <summary>	
        /// A WARP driver, which is a high-performance software rasterizer. The rasterizer supports feature level 9_1 through level 10.1 with a  high performance software implementation when hardware is not available. For more information about using a WARP driver, see  {{Windows Advanced Rasterization Platform (WARP) In-Depth Guide}}. Note that WARP is only available with the DirectX 11 Runtime (Windows 7, Windows Server 2008 R2, updated Windows Vista [KB971644]).	
        /// </summary>	
        /// <unmanaged>D3D10_DRIVER_TYPE_WARP</unmanaged>
        Warp = unchecked((int)5),			
    }
    
    /// <summary>	
    /// Effect device-state types.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is used by {{D3D10StateBlockMaskDisableCapture}}, {{D3D10StateBlockMaskEnableCapture}}, and {{D3D10StateBlockMaskGetSetting}}.	
    /// </remarks>	
    /// <unmanaged>D3D10_DEVICE_STATE_TYPES</unmanaged>
    public enum DeviceStateTypes : int {	
        
        /// <summary>	
        /// Stream-output buffer.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_SO_BUFFERS</unmanaged>
        StStreamOutputBuffers = unchecked((int)1),			
        
        /// <summary>	
        /// Render target.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_OM_RENDER_TARGETS</unmanaged>
        StOmRenderTargets,
        
        /// <summary>	
        /// Depth-stencil state.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_OM_DEPTH_STENCIL_STATE</unmanaged>
        StOmDepthStencilState,
        
        /// <summary>	
        /// Blend state.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_OM_BLEND_STATE</unmanaged>
        StOmBlendState,
        
        /// <summary>	
        /// Vertex shader.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_VS</unmanaged>
        StVs,
        
        /// <summary>	
        /// Vertex shader sampler.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_VS_SAMPLERS</unmanaged>
        StVsSamplers,
        
        /// <summary>	
        /// Vertex shader resource.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_VS_SHADER_RESOURCES</unmanaged>
        StVsShaderResources,
        
        /// <summary>	
        /// Vertex shader constant buffer.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_VS_CONSTANT_BUFFERS</unmanaged>
        StVsConstantBuffers,
        
        /// <summary>	
        /// Geometry shader.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_GS</unmanaged>
        StGs,
        
        /// <summary>	
        /// Geometry shader sampler.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_GS_SAMPLERS</unmanaged>
        StGsSamplers,
        
        /// <summary>	
        /// Geometry shader resource.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_GS_SHADER_RESOURCES</unmanaged>
        StGsShaderResources,
        
        /// <summary>	
        /// Geometry shader constant buffer.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_GS_CONSTANT_BUFFERS</unmanaged>
        StGsConstantBuffers,
        
        /// <summary>	
        /// Pixel shader.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_PS</unmanaged>
        StPs,
        
        /// <summary>	
        /// Pixel shader sampler.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_PS_SAMPLERS</unmanaged>
        StPsSamplers,
        
        /// <summary>	
        /// Pixel shader resource.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_PS_SHADER_RESOURCES</unmanaged>
        StPsShaderResources,
        
        /// <summary>	
        /// Pixel shader constant buffer.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_PS_CONSTANT_BUFFERS</unmanaged>
        StPsConstantBuffers,
        
        /// <summary>	
        /// Input-assembler vertex buffer.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_IA_VERTEX_BUFFERS</unmanaged>
        StInputAssemblyVertexBuffers,
        
        /// <summary>	
        /// Input-assembler index buffer.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_IA_INDEX_BUFFER</unmanaged>
        StInputAssemblyIndexBuffer,
        
        /// <summary>	
        /// Input-assembler input layout.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_IA_INPUT_LAYOUT</unmanaged>
        StInputAssemblyInputLayout,
        
        /// <summary>	
        /// Input-assembler primitive topology.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_IA_PRIMITIVE_TOPOLOGY</unmanaged>
        StInputAssemblyPrimitiveTopology,
        
        /// <summary>	
        /// Viewport.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_RS_VIEWPORTS</unmanaged>
        StRsViewports,
        
        /// <summary>	
        /// Scissor rectangle.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_RS_SCISSOR_RECTS</unmanaged>
        StRsScissorRects,
        
        /// <summary>	
        /// Rasterizer state.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_RS_RASTERIZER_STATE</unmanaged>
        StRsRasterizerState,
        
        /// <summary>	
        /// Predication state.	
        /// </summary>	
        /// <unmanaged>D3D10_DST_PREDICATION</unmanaged>
        StPredication,
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS</unmanaged>
    public enum StandardMultisampleQualityLevels : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3D10_STANDARD_MULTISAMPLE_PATTERN</unmanaged>
        StandardMultisamplePattern = unchecked((int)4294967295),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3D10_CENTER_MULTISAMPLE_PATTERN</unmanaged>
        CenterMultisamplePattern = unchecked((int)4294967294),			
    }
    
    /// <summary>	
    /// Shader register types.	
    /// </summary>	
    /// <remarks>	
    /// The D3D10_SHADER_DEBUG_REGTYPE enumeration is used to specify register types  in {{D3D10_SHADER_DEBUG_INPUT_INFO}} and {{D3D10_SHADER_DEBUG_OUTPUTREG_INFO}}.	
    /// </remarks>	
    /// <unmanaged>D3D10_SHADER_DEBUG_REGTYPE</unmanaged>
    public enum ShaderDebugRegisterType : int {	
        
        /// <summary>	
        /// Input register.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_INPUT</unmanaged>
        Input,
        
        /// <summary>	
        /// Output register.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_OUTPUT</unmanaged>
        Output,
        
        /// <summary>	
        /// Constant buffer register.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_CBUFFER</unmanaged>
        ConstantBuffer,
        
        /// <summary>	
        /// Texture buffer register.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_TBUFFER</unmanaged>
        TextureBuffer,
        
        /// <summary>	
        /// Temporary register.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_TEMP</unmanaged>
        Temp,
        
        /// <summary>	
        /// Array of temporary registers.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_TEMPARRAY</unmanaged>
        Temparray,
        
        /// <summary>	
        /// Texture register.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_TEXTURE</unmanaged>
        Texture,
        
        /// <summary>	
        /// Sampler register.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_SAMPLER</unmanaged>
        Sampler,
        
        /// <summary>	
        /// Immediate constant buffer register.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_IMMEDIATECBUFFER</unmanaged>
        Immediatecbuffer,
        
        /// <summary>	
        /// Literal register.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_LITERAL</unmanaged>
        Literal,
        
        /// <summary>	
        /// Unused register.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_REG_UNUSED</unmanaged>
        Unused,
        
        /// <summary>	
        /// Interface register.	
        /// </summary>	
        /// <unmanaged>D3D11_SHADER_DEBUG_REG_INTERFACE_POINTERS</unmanaged>
        InterfacePointers,
        
        /// <summary>	
        /// Unordered Access View (UAV) register.	
        /// </summary>	
        /// <unmanaged>D3D11_SHADER_DEBUG_REG_UAV</unmanaged>
        UnorderedAccessView,
    }
    
    /// <summary>	
    /// Scope types.	
    /// </summary>	
    /// <remarks>	
    /// The D3D10_SHADER_DEBUG_SCOPETYPE enumeration is used to specify scope type in the {{D3D10_SHADER_DEBUG_SCOPE_INFO}} structure.	
    /// </remarks>	
    /// <unmanaged>D3D10_SHADER_DEBUG_SCOPETYPE</unmanaged>
    public enum ShaderDebugScopetype : int {	
        
        /// <summary>	
        /// Global scope.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_SCOPE_GLOBAL</unmanaged>
        Global,
        
        /// <summary>	
        /// Block scope.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_SCOPE_BLOCK</unmanaged>
        Block,
        
        /// <summary>	
        /// For loop scope.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_SCOPE_FORLOOP</unmanaged>
        Forloop,
        
        /// <summary>	
        /// Structure scope.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_SCOPE_STRUCT</unmanaged>
        Struct,
        
        /// <summary>	
        /// Function parameter scope.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_SCOPE_FUNC_PARAMS</unmanaged>
        FunctionParams,
        
        /// <summary>	
        /// State block scope.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_SCOPE_STATEBLOCK</unmanaged>
        Stateblock,
        
        /// <summary>	
        /// Name space scope.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_SCOPE_NAMESPACE</unmanaged>
        Namespace,
        
        /// <summary>	
        /// Annotation scope.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_SCOPE_ANNOTATION</unmanaged>
        Annotation,
    }
    
    /// <summary>	
    /// Distinguishes variables from functions in a scope.	
    /// </summary>	
    /// <unmanaged>D3D10_SHADER_DEBUG_VARTYPE</unmanaged>
    public enum ShaderDebugVartype : int {	
        
        /// <summary>	
        /// Element is a variable.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_VAR_VARIABLE</unmanaged>
        Variable,
        
        /// <summary>	
        /// Element is a function.	
        /// </summary>	
        /// <unmanaged>D3D10_SHADER_DEBUG_VAR_FUNCTION</unmanaged>
        Function,
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>_D3DX10_ERR</unmanaged>
    public enum D3DX10Err : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DX10_ERR_CANNOT_MODIFY_INDEX_BUFFER</unmanaged>
        D3DX10ErrCannotModifyIndexBuffer = unchecked((int)-2005529772),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DX10_ERR_INVALID_MESH</unmanaged>
        D3DX10ErrInvalidMesh = unchecked((int)-2005529771),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DX10_ERR_CANNOT_ATTR_SORT</unmanaged>
        D3DX10ErrCannotAttrSort = unchecked((int)-2005529770),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DX10_ERR_SKINNING_NOT_SUPPORTED</unmanaged>
        D3DX10ErrSkinningNotSupported = unchecked((int)-2005529769),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DX10_ERR_TOO_MANY_INFLUENCES</unmanaged>
        D3DX10ErrTooManyInfluences = unchecked((int)-2005529768),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DX10_ERR_INVALID_DATA</unmanaged>
        D3DX10ErrInvalidData = unchecked((int)-2005529767),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DX10_ERR_LOADED_MESH_HAS_NO_DATA</unmanaged>
        D3DX10ErrLoadedMeshHasNoData = unchecked((int)-2005529766),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DX10_ERR_DUPLICATE_NAMED_FRAGMENT</unmanaged>
        D3DX10ErrDuplicateNamedFragment = unchecked((int)-2005529765),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DX10_ERR_CANNOT_REMOVE_LAST_ITEM</unmanaged>
        D3DX10ErrCannotRemoveLastItem = unchecked((int)-2005529764),			
    }
    
    /// <summary>	
    /// Sprite flags that tell the sprite drawing API how to behave. These are passed into <see cref="SlimDX2.Direct3D10.Sprite.Begin"/>.	
    /// </summary>	
    /// <remarks>	
    /// After a front-to-back or back-to-front sort is done, it will automatically do a secondary sort by texture. This is helpful for when there are many sprites with the same texture all on the same plane, such as when drawing the user interface in a game.	
    /// </remarks>	
    /// <unmanaged>D3DX10_SPRITE_FLAG</unmanaged>
    [Flags]
    public enum SpriteFlags : int {	
        
        /// <summary>	
        /// Sort the sprites by texture before rendering so that when there are many sprites with the same texture that texture all of those sprites will be rendered at the same time, thereby improving performance.	
        /// </summary>	
        /// <unmanaged>D3DX10_SPRITE_SORT_TEXTURE</unmanaged>
        SortTexture = unchecked((int)1),			
        
        /// <summary>	
        /// Sort the sprites from back to front to that those farther away from the camera will be drawn first.	
        /// </summary>	
        /// <unmanaged>D3DX10_SPRITE_SORT_DEPTH_BACK_TO_FRONT</unmanaged>
        SortDepthBackToFront = unchecked((int)2),			
        
        /// <summary>	
        /// Sort the sprites from front to back so that those closer to the camera will be drawn first.	
        /// </summary>	
        /// <unmanaged>D3DX10_SPRITE_SORT_DEPTH_FRONT_TO_BACK</unmanaged>
        SortDepthFrontToBack = unchecked((int)4),			
        
        /// <summary>	
        /// Saves the state so that when <see cref="SlimDX2.Direct3D10.Sprite.End"/> is called, it will restore the state to the way it was before <see cref="SlimDX2.Direct3D10.Sprite.Begin"/> was called.	
        /// </summary>	
        /// <unmanaged>D3DX10_SPRITE_SAVE_STATE</unmanaged>
        SaveState = unchecked((int)8),			
        
        /// <summary>	
        /// Calls AddRef on all of the textures when they are passed into <see cref="SlimDX2.Direct3D10.Sprite.DrawSpritesBuffered"/>.	
        /// </summary>	
        /// <unmanaged>D3DX10_SPRITE_ADDREF_TEXTURES</unmanaged>
        AddrefTextures = unchecked((int)16),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Texture filtering flags.	
    /// </summary>	
    /// <remarks>	
    /// D3DX10 automatically performs gamma correction (to convert color data from RGB space to standard RGB space) when loading texture data. This is automatically done for instance when RGB data is loaded from a .png file into an sRGB texture. Use the SRGB filter flags to indicate if the data does not need to be converted into sRGB space.	
    /// </remarks>	
    /// <unmanaged>D3DX10_FILTER_FLAG</unmanaged>
    [Flags]
    public enum FilterFlags : int {	
        
        /// <summary>	
        /// No scaling or filtering will take place. Pixels outside the bounds of the source image are assumed to be transparent black.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_NONE</unmanaged>
        None = unchecked((int)1),			
        
        /// <summary>	
        /// Each destination pixel is computed by sampling the nearest pixel from the source image.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_POINT</unmanaged>
        Point = unchecked((int)2),			
        
        /// <summary>	
        /// Each destination pixel is computed by sampling the four nearest pixels from the source image. This filter works best when the scale on both axes is less than two.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_LINEAR</unmanaged>
        Linear = unchecked((int)3),			
        
        /// <summary>	
        /// Every pixel in the source image contributes equally to the destination image. This is the slowest of the filters.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_TRIANGLE</unmanaged>
        Triangle = unchecked((int)4),			
        
        /// <summary>	
        /// Each pixel is computed by averaging a 2x2(x2) box of pixels from the source image. This filter works only when the dimensions of the destination are half those of the source, as is the case with mipmaps.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_BOX</unmanaged>
        Box = unchecked((int)5),			
        
        /// <summary>	
        /// Pixels off the edge of the texture on the u-axis should be mirrored, not wrapped.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_MIRROR_U</unmanaged>
        MirrorU = unchecked((int)65536),			
        
        /// <summary>	
        /// Pixels off the edge of the texture on the v-axis should be mirrored, not wrapped.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_MIRROR_V</unmanaged>
        MirrorV = unchecked((int)131072),			
        
        /// <summary>	
        /// Pixels off the edge of the texture on the w-axis should be mirrored, not wrapped.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_MIRROR_W</unmanaged>
        MirrorW = unchecked((int)262144),			
        
        /// <summary>	
        /// Specifying this flag is the same as specifying the D3DX_FILTER_MIRROR_U, D3DX_FILTER_MIRROR_V, and D3DX_FILTER_MIRROR_W flags.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_MIRROR</unmanaged>
        Mirror = unchecked((int)458752),			
        
        /// <summary>	
        /// The resulting image must be dithered using a 4x4 ordered dither algorithm. This happens when converting from one format to another.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_DITHER</unmanaged>
        Dither = unchecked((int)524288),			
        
        /// <summary>	
        /// Do diffuse dithering on the image when changing from one format to another.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_DITHER_DIFFUSION</unmanaged>
        DitherDiffusion = unchecked((int)1048576),			
        
        /// <summary>	
        /// Input data is in standard RGB (sRGB) color space. See remarks.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_SRGB_IN</unmanaged>
        SRgbIn = unchecked((int)2097152),			
        
        /// <summary>	
        /// Output data is in standard RGB (sRGB) color space. See remarks.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_SRGB_OUT</unmanaged>
        SRgbOut = unchecked((int)4194304),			
        
        /// <summary>	
        /// Same as specifying D3DX_FILTER_SRGB_IN | D3DX_FILTER_SRGB_OUT. See remarks.	
        /// </summary>	
        /// <unmanaged>D3DX10_FILTER_SRGB</unmanaged>
        SRgb = unchecked((int)6291456),			
    }
    
    /// <summary>	
    /// These flags are used to control how <see cref="SlimDX2.Direct3D10.D3DX10.ComputeNormalMap"/> generates normal maps.  Any number of these flags may be OR'd together in any combination.	
    /// </summary>	
    /// <unmanaged>D3DX10_NORMALMAP_FLAG</unmanaged>
    [Flags]
    public enum NormalMapFlags : int {	
        
        /// <summary>	
        /// Indicates that pixels off the edge of the texture on the U-axis should be mirrored, not wraped.	
        /// </summary>	
        /// <unmanaged>D3DX10_NORMALMAP_MIRROR_U</unmanaged>
        MirrorU = unchecked((int)65536),			
        
        /// <summary>	
        /// Indicates that pixels off the edge of the texture on the V-axis should be mirrored, not wraped.	
        /// </summary>	
        /// <unmanaged>D3DX10_NORMALMAP_MIRROR_V</unmanaged>
        MirrorV = unchecked((int)131072),			
        
        /// <summary>	
        /// Same as D3DX10_NORMALMAP_MIRROR_U | D3DX10_NORMALMAP_MIRROR_V.	
        /// </summary>	
        /// <unmanaged>D3DX10_NORMALMAP_MIRROR</unmanaged>
        Mirror = unchecked((int)196608),			
        
        /// <summary>	
        /// Inverts the direction of each normal.	
        /// </summary>	
        /// <unmanaged>D3DX10_NORMALMAP_INVERTSIGN</unmanaged>
        Invertsign = unchecked((int)524288),			
        
        /// <summary>	
        /// Computes the per pixel occlusion term and encodes it into the alpha. An Alpha of 1 means that the pixel is not obscured in any way, and an alpha of 0 would mean that the pixel is completly obscured.	
        /// </summary>	
        /// <unmanaged>D3DX10_NORMALMAP_COMPUTE_OCCLUSION</unmanaged>
        ComputeOcclusion = unchecked((int)1048576),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// These flags are used by functions which operate on one or more channels in a texture.	
    /// </summary>	
    /// <unmanaged>D3DX10_CHANNEL_FLAG</unmanaged>
    [Flags]
    public enum ChannelFlags : int {	
        
        /// <summary>	
        /// Indicates the red channel should be used.	
        /// </summary>	
        /// <unmanaged>D3DX10_CHANNEL_RED</unmanaged>
        Red = unchecked((int)1),			
        
        /// <summary>	
        /// Indicates the blue channel should be used.	
        /// </summary>	
        /// <unmanaged>D3DX10_CHANNEL_BLUE</unmanaged>
        Blue = unchecked((int)2),			
        
        /// <summary>	
        /// Indicates the green channel should be used.	
        /// </summary>	
        /// <unmanaged>D3DX10_CHANNEL_GREEN</unmanaged>
        Green = unchecked((int)4),			
        
        /// <summary>	
        /// Indicates the alpha channel should be used.	
        /// </summary>	
        /// <unmanaged>D3DX10_CHANNEL_ALPHA</unmanaged>
        Alpha = unchecked((int)8),			
        
        /// <summary>	
        /// Indicates the luminaces of the red, green, and blue channels should be used.	
        /// </summary>	
        /// <unmanaged>D3DX10_CHANNEL_LUMINANCE</unmanaged>
        Luminance = unchecked((int)16),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Image file formats supported by D3DXCreatexxx and D3DX10Savexxx functions.	
    /// </summary>	
    /// <remarks>	
    /// See {{Types of Bitmaps (GDI+)}} for more information on some of these formats.D3DX10 makes use of the Windows Imaging Component to implement the majority of the supported bitmap file types. See {{Windows Imaging Component Overview}} for additional information.	
    /// </remarks>	
    /// <unmanaged>D3DX10_IMAGE_FILE_FORMAT</unmanaged>
    public enum ImageFileFormat : int {	
        
        /// <summary>	
        /// Windows bitmap (BMP) file format. Contains a header that describes the resolution of the device on which the rectangle of pixels was created, the dimensions of the rectangle, the size of the array of bits, a logical palette, and an array of bits that defines the relationship between pixels in the bitmapped image and entries in the logical palette.	
        /// </summary>	
        /// <unmanaged>D3DX10_IFF_BMP</unmanaged>
        Bmp = unchecked((int)0),			
        
        /// <summary>	
        /// Joint Photographic Experts Group (JPEG) compressed file format. Specifies variable compression of 24-bit RGB color and 8-bit gray-scale Tagged Image File Format (TIFF) image document files.	
        /// </summary>	
        /// <unmanaged>D3DX10_IFF_JPG</unmanaged>
        Jpg = unchecked((int)1),			
        
        /// <summary>	
        /// Portable Network Graphics (PNG) file format. A non-proprietary bitmap format using lossless compression.	
        /// </summary>	
        /// <unmanaged>D3DX10_IFF_PNG</unmanaged>
        Png = unchecked((int)3),			
        
        /// <summary>	
        /// DirectDraw surface (DDS) file format. Stores textures, volume textures, and cubic environment maps, with or without mipmap levels, and with or without pixel compression.	
        /// </summary>	
        /// <unmanaged>D3DX10_IFF_DDS</unmanaged>
        Dds = unchecked((int)4),			
        
        /// <summary>	
        /// Tagged Image File Format (TIFF).	
        /// </summary>	
        /// <unmanaged>D3DX10_IFF_TIFF</unmanaged>
        Tiff = unchecked((int)10),			
        
        /// <summary>	
        /// Graphics Interchange Format (GIF).	
        /// </summary>	
        /// <unmanaged>D3DX10_IFF_GIF</unmanaged>
        Gif = unchecked((int)11),			
        
        /// <summary>	
        /// Windows Media Player format (WMP).	
        /// </summary>	
        /// <unmanaged>D3DX10_IFF_WMP</unmanaged>
        Wmp = unchecked((int)12),			
    }
    
    /// <summary>	
    /// Texture save options.	
    /// </summary>	
    /// <unmanaged>D3DX10_SAVE_TEXTURE_FLAG</unmanaged>
    [Flags]
    public enum SaveTextureFlags : int {	
        
        /// <summary>	
        /// Do not optimize.	
        /// </summary>	
        /// <unmanaged>D3DX10_STF_USEINPUTBLOB</unmanaged>
        Useinputblob = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
}
