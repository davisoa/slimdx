// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Functions for SlimDX2.Direct3D10 namespace.
//     This code was generated by a tool.
//     Date : 11/08/2010 15:18:19
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SlimDX2.Direct3D10 {


	/// <summary>
    /// D3D10 Functions.
    /// </summary>
    static partial class D3D10 {   
        
        /// <summary>Constant D3D10_SDK_VERSION.</summary>
        public const int SdkVersion = ( 29 );
        
        /// <summary>Constant D3D10_1_SDK_VERSION.</summary>
        public const int SdkVersion1 = ( ( 0 + 0x20 )  );
        
        /// <summary>	
        /// Create a Direct3D 10.0 device that represents the display adapter.	
        /// </summary>	
        /// <remarks>	
        /// This example creates a reference device.	
        /// <code> ID3D10Device* g_pd3dDevice = NULL;	
        /// D3D10CreateDevice( NULL, D3D10_DRIVER_TYPE_REFERENCE, NULL, 0,  D3D10_SDK_VERSION, &amp;g_pd3dDevice );              </code>	
        /// 	
        /// To create a device and a swap chain at the same time, see <see cref="SlimDX2.Direct3D10.D3D10.CreateDeviceAndSwapChain"/>.The object returned by D3D10CreateDevice implements the <see cref="SlimDX2.ComObject"/> interface and can be queried for other  interfaces the object supports. To retrieve the <see cref="SlimDX2.DXGI.Device"/> interface of the object the following code could be used.	
        /// <code> IDXGIDevice * pDXGIDevice;	
        /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(IDXGIDevice), (void **)&amp;pDXGIDevice); </code>	
        /// 	
        /// </remarks>	
        /// <param name="adapterRef">Pointer to the display adapter (see <see cref="SlimDX2.DXGI.Adapter"/>) when creating a hardware device; otherwise set this parameter to NULL.  If NULL is specified when creating a hardware device, Direct3D will use the first adapter enumerated by {{EnumAdapters}}.</param>
        /// <param name="driverType">The device-driver type (see <see cref="SlimDX2.Direct3D10.DriverType"/>). The driver type determines the type of device you will create.</param>
        /// <param name="software">Reserved. Set to NULL.</param>
        /// <param name="flags">Optional. Device creation flags (see <see cref="SlimDX2.Direct3D10.DeviceCreationFlags"/>) that  enable {{API layers}}. These flags can be bitwise OR'd together.</param>
        /// <param name="sDKVersion">Bit flag that indicates the version of the SDK. Should always be D3D10_SDK_VERSION.</param>
        /// <param name="deviceRef">Address of a pointer to the device created (see <see cref="SlimDX2.Direct3D10.Device"/>).</param>
        /// <returns>This method returns one of the following {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3D10CreateDevice([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] UINT SDKVersion,[Out] ID3D10Device** ppDevice)</unmanaged>
		public static SlimDX2.Result CreateDevice(SlimDX2.DXGI.Adapter adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, SlimDX2.Direct3D10.DeviceCreationFlags flags, int sDKVersion, out SlimDX2.Direct3D10.Device deviceRef) {
            unsafe {
                IntPtr deviceRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3D10CreateDevice_((adapterRef == null)?IntPtr.Zero:adapterRef.NativePointer,  driverType,  software,  flags,  sDKVersion, out deviceRef_);
                deviceRef = (deviceRef_ == IntPtr.Zero)?null:new SlimDX2.Direct3D10.Device(deviceRef_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3D10CreateDevice([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] UINT SDKVersion,[Out] ID3D10Device** ppDevice)</unmanaged>
		[DllImport("d3d10.dll", EntryPoint = "D3D10CreateDevice", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3D10CreateDevice_(IntPtr adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, SlimDX2.Direct3D10.DeviceCreationFlags flags, int sDKVersion, out IntPtr deviceRef);		
        
        /// <summary>	
        /// Create a Direct3D 10.0 device and a swap chain.	
        /// </summary>	
        /// <remarks>	
        /// To create a device without creating a swap chain, see <see cref="SlimDX2.Direct3D10.D3D10.CreateDevice"/>.	
        /// </remarks>	
        /// <param name="adapterRef">Pointer to a <see cref="SlimDX2.DXGI.Adapter"/>.</param>
        /// <param name="driverType">The type of driver for the device. See <see cref="SlimDX2.Direct3D10.DriverType"/>.</param>
        /// <param name="software">A handle to the DLL that implements a software rasterizer. Must be NULL if DriverType is non-software. The HMODULE of a DLL can be obtained with {{LoadLibrary}}, {{LoadLibraryEx}}, or {{GetModuleHandle}}.</param>
        /// <param name="flags">Optional. Device creation flags (see <see cref="SlimDX2.Direct3D10.DeviceCreationFlags"/>) that enable {{API layers}}. These flags can be bitwise OR'd together.</param>
        /// <param name="sDKVersion">Bit flag that indicates the version of the SDK. Should be D3D10_SDK_VERSION, defined in d3d10.h.</param>
        /// <param name="swapChainDescRef">Description of the swap chain. See <see cref="SlimDX2.DXGI.SwapChainDescription"/>.</param>
        /// <param name="swapChainRef">Address of a pointer to an <see cref="SlimDX2.DXGI.SwapChain"/>.</param>
        /// <param name="deviceRef">Address of a pointer to an <see cref="SlimDX2.Direct3D10.Device"/> that will receive the newly created device.</param>
        /// <returns>This method returns one of the following {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3D10CreateDeviceAndSwapChain([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] UINT SDKVersion,[None] DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[Out] IDXGISwapChain** ppSwapChain,[Out] ID3D10Device** ppDevice)</unmanaged>
		public static SlimDX2.Result CreateDeviceAndSwapChain(SlimDX2.DXGI.Adapter adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, SlimDX2.Direct3D10.DeviceCreationFlags flags, int sDKVersion, ref SlimDX2.DXGI.SwapChainDescription swapChainDescRef, out SlimDX2.DXGI.SwapChain swapChainRef, out SlimDX2.Direct3D10.Device deviceRef) {
            unsafe {
                IntPtr swapChainRef_ = IntPtr.Zero;
                IntPtr deviceRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3D10CreateDeviceAndSwapChain_((adapterRef == null)?IntPtr.Zero:adapterRef.NativePointer,  driverType,  software,  flags,  sDKVersion, ref  swapChainDescRef, out swapChainRef_, out deviceRef_);
                swapChainRef = (swapChainRef_ == IntPtr.Zero)?null:new SlimDX2.DXGI.SwapChain(swapChainRef_);
                deviceRef = (deviceRef_ == IntPtr.Zero)?null:new SlimDX2.Direct3D10.Device(deviceRef_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3D10CreateDeviceAndSwapChain([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] UINT SDKVersion,[None] DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[Out] IDXGISwapChain** ppSwapChain,[Out] ID3D10Device** ppDevice)</unmanaged>
		[DllImport("d3d10.dll", EntryPoint = "D3D10CreateDeviceAndSwapChain", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3D10CreateDeviceAndSwapChain_(IntPtr adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, SlimDX2.Direct3D10.DeviceCreationFlags flags, int sDKVersion, ref SlimDX2.DXGI.SwapChainDescription swapChainDescRef, out IntPtr swapChainRef, out IntPtr deviceRef);		
        
        /// <summary>	
        /// Creates an ID3D10Effect from a buffer containing a compiled effect.	
        /// </summary>	
        /// <remarks>	
        /// This method is used to create an <see cref="SlimDX2.Direct3D10.Effect"/> object from an effect that has been compiled before runtime and loaded into memory.   For help precompiling an effect, see {{Offline Compiling}}.   To load and compile an ASCII .fx file see {{Compile an Effect (Direct3D 10)}}.	
        /// </remarks>	
        /// <param name="dataRef">A pointer to a compiled effect.</param>
        /// <param name="dataLength">Length of pData.</param>
        /// <param name="fXFlags">Effect {{compile options}}.</param>
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>).</param>
        /// <param name="effectPoolRef">Optional. A pointer to an memory space for effect variables that are shared across effects (see <see cref="SlimDX2.Direct3D10.EffectPool"/>).</param>
        /// <param name="effectRef">A pointer to an <see cref="SlimDX2.Direct3D10.Effect"/> which contains the created effect.</param>
        /// <returns>Returns one of the following {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3D10CreateEffectFromMemory([None] void* pData,[None] SIZE_T DataLength,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[Out] ID3D10Effect** ppEffect)</unmanaged>
		public static SlimDX2.Result CreateEffectFromMemory(IntPtr dataRef, SlimDX2.Size dataLength, int fXFlags, SlimDX2.Direct3D10.Device deviceRef, SlimDX2.Direct3D10.EffectPool effectPoolRef, out IntPtr effectRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3D10CreateEffectFromMemory_( dataRef,  dataLength,  fXFlags, (deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer, (effectPoolRef == null)?IntPtr.Zero:effectPoolRef.NativePointer, out effectRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3D10CreateEffectFromMemory([None] void* pData,[None] SIZE_T DataLength,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[Out] ID3D10Effect** ppEffect)</unmanaged>
		[DllImport("d3d10.dll", EntryPoint = "D3D10CreateEffectFromMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3D10CreateEffectFromMemory_(IntPtr dataRef, SlimDX2.Size dataLength, int fXFlags, IntPtr deviceRef, IntPtr effectPoolRef, out IntPtr effectRef);		
        
        /// <summary>	
        /// Create an effect pool (or shared memory location), to enable sharing variables between effects.	
        /// </summary>	
        /// <remarks>	
        /// A pool is a shared location in memory. Effect variables that are located in a pool can be updated once, and the effect system will take care of updating each effect that uses that variable. To pool an effect variable, tell the effect to locate the variable in a pool when the effect is created, using a helper function such as {{D3DX10CreateEffectFromFile}}.For help compiling an effect, see {{Compile an Effect (Direct3D 10)}}.	
        /// </remarks>	
        /// <param name="dataRef">A pointer to a compiled effect.</param>
        /// <param name="dataLength">Length of pData.</param>
        /// <param name="fXFlags">Effect {{compile options}}.</param>
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>).</param>
        /// <param name="effectPoolRef">A pointer to the <see cref="SlimDX2.Direct3D10.EffectPool"/> that contains the effect pool.</param>
        /// <returns>Returns one of the following {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3D10CreateEffectPoolFromMemory([None] void* pData,[None] SIZE_T DataLength,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool** ppEffectPool)</unmanaged>
		public static SlimDX2.Result CreateEffectPoolFromMemory(IntPtr dataRef, SlimDX2.Size dataLength, int fXFlags, SlimDX2.Direct3D10.Device deviceRef, SlimDX2.Direct3D10.EffectPool effectPoolRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3D10CreateEffectPoolFromMemory_( dataRef,  dataLength,  fXFlags, (deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer, (effectPoolRef == null)?IntPtr.Zero:effectPoolRef.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3D10CreateEffectPoolFromMemory([None] void* pData,[None] SIZE_T DataLength,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool** ppEffectPool)</unmanaged>
		[DllImport("d3d10.dll", EntryPoint = "D3D10CreateEffectPoolFromMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3D10CreateEffectPoolFromMemory_(IntPtr dataRef, SlimDX2.Size dataLength, int fXFlags, IntPtr deviceRef, IntPtr effectPoolRef);		
        
        /// <summary>	
        /// Create a Direct3D 10.1 device that represents the display adapter.	
        /// </summary>	
        /// <remarks>	
        /// To create a device and a swap chain at the same time, see <see cref="SlimDX2.Direct3D10.D3D10.CreateDeviceAndSwapChain1"/>.This method requires Windows Vista Service Pack 1, Windows Server 2008, or later release of Windows.The object returned by D3D10CreateDevice1 implements the <see cref="SlimDX2.ComObject"/> interface  and can be queried for other  interfaces the object supports. To retrieve the <see cref="SlimDX2.DXGI.Device"/> interface of the object the following code could be used.	
        /// <code> IDXGIDevice * pDXGIDevice;	
        /// hr = g_pd3dDevice-&gt;QueryInterface(__uuidof(IDXGIDevice), (void **)&amp;pDXGIDevice); </code>	
        /// 	
        /// </remarks>	
        /// <param name="adapterRef">Pointer to the display adapter (see <see cref="SlimDX2.DXGI.Adapter"/>) when creating a hardware device; otherwise set this parameter to  NULL. If NULL is specified when creating a hardware device, Direct3D will use the first adapter enumerated  by {{EnumAdapters}}.</param>
        /// <param name="driverType">The device-driver type (see <see cref="SlimDX2.Direct3D10.DriverType"/>). The driver type determines the type of device you will create.</param>
        /// <param name="software">This is set to NULL except for D3D10_DRIVER_TYPE_SOFTWARE driver types.</param>
        /// <param name="flags">Optional. Device creation flags (see <see cref="SlimDX2.Direct3D10.DeviceCreationFlags"/>) that  enable {{API layers}}. These flags can be bitwise OR'd together.</param>
        /// <param name="hardwareLevel">The version of hardware that is available for acceleration (see {{D3D10_FEATURE_LEVEL1}}).</param>
        /// <param name="sDKVersion">Bit flag that indicates the version of the SDK. Should be D3D10_1_SDK_VERSION, defined in D3D10.h.</param>
        /// <param name="deviceRef">Address of a pointer to the device created (see <see cref="SlimDX2.Direct3D10.Device1"/>).</param>
        /// <returns>This method returns one of the following {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3D10CreateDevice1([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] D3D_FEATURE_LEVEL HardwareLevel,[None] UINT SDKVersion,[Out] ID3D10Device1** ppDevice)</unmanaged>
		public static SlimDX2.Result CreateDevice1(SlimDX2.DXGI.Adapter adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, SlimDX2.Direct3D10.DeviceCreationFlags flags, SlimDX2.Direct3D.FeatureLevel hardwareLevel, int sDKVersion, out SlimDX2.Direct3D10.Device1 deviceRef) {
            unsafe {
                IntPtr deviceRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3D10CreateDevice1_((adapterRef == null)?IntPtr.Zero:adapterRef.NativePointer,  driverType,  software,  flags,  hardwareLevel,  sDKVersion, out deviceRef_);
                deviceRef = (deviceRef_ == IntPtr.Zero)?null:new SlimDX2.Direct3D10.Device1(deviceRef_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3D10CreateDevice1([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] D3D_FEATURE_LEVEL HardwareLevel,[None] UINT SDKVersion,[Out] ID3D10Device1** ppDevice)</unmanaged>
		[DllImport("d3d10_1.dll", EntryPoint = "D3D10CreateDevice1", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3D10CreateDevice1_(IntPtr adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, SlimDX2.Direct3D10.DeviceCreationFlags flags, SlimDX2.Direct3D.FeatureLevel hardwareLevel, int sDKVersion, out IntPtr deviceRef);		
        
        /// <summary>	
        /// Create a Direct3D 10.1 device and a swap chain.	
        /// </summary>	
        /// <remarks>	
        /// To create a device without creating a swap chain, see <see cref="SlimDX2.Direct3D10.D3D10.CreateDevice1"/>.This method requires Windows Vista Service Pack 1, Windows Server 2008, or later release of Windows.	
        /// </remarks>	
        /// <param name="adapterRef">Pointer to a <see cref="SlimDX2.DXGI.Adapter"/>.</param>
        /// <param name="driverType">The type of driver for the device. See <see cref="SlimDX2.Direct3D10.DriverType"/>.</param>
        /// <param name="software">A handle to the DLL that implements a software rasterizer. Must be NULL if DriverType is non-software.  The HMODULE of a DLL can be obtained with {{LoadLibrary}},  {{LoadLibraryEx}},  or {{GetModuleHandle}}.</param>
        /// <param name="flags">Optional. Device creation flags (see <see cref="SlimDX2.Direct3D10.DeviceCreationFlags"/>) that  enable {{API layers}}. These flags can be bitwise OR'd together.</param>
        /// <param name="hardwareLevel">The version of hardware that is available for acceleration (see {{D3D10_FEATURE_LEVEL1}}).</param>
        /// <param name="sDKVersion">Bit flag that indicates the version of the SDK. Should be D3D10_1_SDK_VERSION, defined in D3D10.h.</param>
        /// <param name="swapChainDescRef">Description of the swap chain. See <see cref="SlimDX2.DXGI.SwapChainDescription"/>.</param>
        /// <param name="swapChainRef">Address of a pointer to an <see cref="SlimDX2.DXGI.SwapChain"/>.</param>
        /// <param name="deviceRef">Address of a pointer to an <see cref="SlimDX2.Direct3D10.Device1"/> that will receive the newly created device.</param>
        /// <returns>This method returns one of the following {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3D10CreateDeviceAndSwapChain1([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] D3D_FEATURE_LEVEL HardwareLevel,[None] UINT SDKVersion,[None] DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[Out] IDXGISwapChain** ppSwapChain,[Out] ID3D10Device1** ppDevice)</unmanaged>
		public static SlimDX2.Result CreateDeviceAndSwapChain1(SlimDX2.DXGI.Adapter adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, SlimDX2.Direct3D10.DeviceCreationFlags flags, SlimDX2.Direct3D.FeatureLevel hardwareLevel, int sDKVersion, ref SlimDX2.DXGI.SwapChainDescription swapChainDescRef, out SlimDX2.DXGI.SwapChain swapChainRef, out SlimDX2.Direct3D10.Device1 deviceRef) {
            unsafe {
                IntPtr swapChainRef_ = IntPtr.Zero;
                IntPtr deviceRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3D10CreateDeviceAndSwapChain1_((adapterRef == null)?IntPtr.Zero:adapterRef.NativePointer,  driverType,  software,  flags,  hardwareLevel,  sDKVersion, ref  swapChainDescRef, out swapChainRef_, out deviceRef_);
                swapChainRef = (swapChainRef_ == IntPtr.Zero)?null:new SlimDX2.DXGI.SwapChain(swapChainRef_);
                deviceRef = (deviceRef_ == IntPtr.Zero)?null:new SlimDX2.Direct3D10.Device1(deviceRef_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3D10CreateDeviceAndSwapChain1([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] D3D_FEATURE_LEVEL HardwareLevel,[None] UINT SDKVersion,[None] DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[Out] IDXGISwapChain** ppSwapChain,[Out] ID3D10Device1** ppDevice)</unmanaged>
		[DllImport("d3d10_1.dll", EntryPoint = "D3D10CreateDeviceAndSwapChain1", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3D10CreateDeviceAndSwapChain1_(IntPtr adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, SlimDX2.Direct3D10.DeviceCreationFlags flags, SlimDX2.Direct3D.FeatureLevel hardwareLevel, int sDKVersion, ref SlimDX2.DXGI.SwapChainDescription swapChainDescRef, out IntPtr swapChainRef, out IntPtr deviceRef);		
    }

	/// <summary>
    /// D3DX10 Functions.
    /// </summary>
    static partial class D3DX10 {   
        
        /// <summary>	
        /// Create the best Direct3D 10 device that represents the display adapter.  If a Direct3D 10.1-compatible device can be created, it will be possible to acquire an <see cref="SlimDX2.Direct3D10.Device1"/> pointer from the returned device interface pointer.	
        /// </summary>	
        /// <remarks>	
        /// This function attempts to create the best device for the hardware. First, the function attempts to create a 10.1 device. If a 10.1 device cannot be created, the function attempts to create a 10.0 device. If neither device is successfully created, the function returns E_FAIL.If your application needs to create only a 10.1 device, or a 10.0 device only, use the following functions instead:Use the <see cref="SlimDX2.Direct3D10.D3D10.CreateDevice"/> function to create a Direct3D 10.0 device only.Use the <see cref="SlimDX2.Direct3D10.D3D10.CreateDevice1"/> function to create a Direct3D 10.1 device only.Use the <see cref="SlimDX2.Direct3D10.D3DX10.GetFeatureLevel1"/> function to get an <see cref="SlimDX2.Direct3D10.Device1"/> interface pointer from an <see cref="SlimDX2.Direct3D10.Device"/> interface pointer.A Direct3D 10.1 device can only be created on computers running Windows Vista Service Pack 1 or later, and with Direct3D 10.1-compatible hardware installed. However, it is legal to call this function on computers running any version of Windows that has the D3DX10 DLL installed.	
        /// </remarks>	
        /// <param name="adapterRef">Pointer to the display adapter (see the <see cref="SlimDX2.DXGI.Adapter"/> interface) when creating a hardware device; otherwise set this parameter to NULL. If NULL is specified when creating a hardware device, Direct3D will use the first adapter enumerated by the <see cref="SlimDX2.DXGI.Factory"/> interface.</param>
        /// <param name="driverType">The device-driver type (see the <see cref="SlimDX2.Direct3D10.DriverType"/> enumeration). The driver type determines the type of device you will create.</param>
        /// <param name="software">A handle to a loaded module that implements a software driver (such as D3D10Ref.dll). To get a handle, call the {{GetModuleHandle}} function.</param>
        /// <param name="flags">Device creation flags (see the <see cref="SlimDX2.Direct3D10.DeviceCreationFlags"/> enumeration) that enable {{API layers}}. These flags can be bitwise OR'd together.</param>
        /// <param name="deviceRef">Address of a pointer to the device created (see the <see cref="SlimDX2.Direct3D10.Device"/> interface).</param>
        /// <returns>This function returns one of the following {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateDevice([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] ID3D10Device** ppDevice)</unmanaged>
		public static SlimDX2.Result CreateDevice(SlimDX2.DXGI.Adapter adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, int flags, SlimDX2.Direct3D10.Device deviceRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateDevice_((adapterRef == null)?IntPtr.Zero:adapterRef.NativePointer,  driverType,  software,  flags, (deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateDevice([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] ID3D10Device** ppDevice)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateDevice", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateDevice_(IntPtr adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, int flags, IntPtr deviceRef);		
        
        /// <summary>	
        /// Create the best Direct3D device and a swap chain.	
        /// </summary>	
        /// <remarks>	
        /// To create the best device, this method implements more than one device creation option. First, the method attempts to create a 10.1 device (and swap chain). If that fails, the method attempts to create a 10.0 device. If that fails, the method will fail. If your application needs to create only a 10.1 device, or a 10.0 device only, use these APIs instead:Use <see cref="SlimDX2.Direct3D10.D3D10.CreateDeviceAndSwapChain"/> to create a Direct3D 10.0 (only) device and swap chain.Use <see cref="SlimDX2.Direct3D10.D3D10.CreateDeviceAndSwapChain1"/> to create a Direct3D 10.1 (only) device and swap chain.This method requires Windows Vista Service Pack 1.	
        /// </remarks>	
        /// <param name="adapterRef">Pointer to a <see cref="SlimDX2.DXGI.Adapter"/>.</param>
        /// <param name="driverType">The type of driver for the device. See <see cref="SlimDX2.Direct3D10.DriverType"/>.</param>
        /// <param name="software">A handle to the DLL that implements a software rasterizer. Must be NULL if DriverType is non-software. The HMODULE of a DLL can be obtained with {{LoadLibrary}}, {{LoadLibraryEx}}, or {{GetModuleHandle}}.</param>
        /// <param name="flags">Optional. Device creation flags (see <see cref="SlimDX2.Direct3D10.DeviceCreationFlags"/>) that enable {{API layers}}. These flags can be bitwise OR'd together.</param>
        /// <param name="swapChainDescRef">Description of the swap chain. See <see cref="SlimDX2.DXGI.SwapChainDescription"/>.</param>
        /// <param name="swapChainRef">Address of a pointer to an <see cref="SlimDX2.DXGI.SwapChain"/>.</param>
        /// <param name="deviceRef">Address of a pointer to an <see cref="SlimDX2.Direct3D10.Device"/> that will receive the newly created device.</param>
        /// <returns>This method returns one of the following {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateDeviceAndSwapChain([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[None] IDXGISwapChain** ppSwapChain,[None] ID3D10Device** ppDevice)</unmanaged>
		public static SlimDX2.Result CreateDeviceAndSwapChain(SlimDX2.DXGI.Adapter adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, int flags, ref SlimDX2.DXGI.SwapChainDescription swapChainDescRef, SlimDX2.DXGI.SwapChain swapChainRef, SlimDX2.Direct3D10.Device deviceRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateDeviceAndSwapChain_((adapterRef == null)?IntPtr.Zero:adapterRef.NativePointer,  driverType,  software,  flags, ref  swapChainDescRef, (swapChainRef == null)?IntPtr.Zero:swapChainRef.NativePointer, (deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateDeviceAndSwapChain([None] IDXGIAdapter* pAdapter,[None] D3D10_DRIVER_TYPE DriverType,[None] HMODULE Software,[None] UINT Flags,[None] DXGI_SWAP_CHAIN_DESC* pSwapChainDesc,[None] IDXGISwapChain** ppSwapChain,[None] ID3D10Device** ppDevice)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateDeviceAndSwapChain", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateDeviceAndSwapChain_(IntPtr adapterRef, SlimDX2.Direct3D10.DriverType driverType, IntPtr software, int flags, ref SlimDX2.DXGI.SwapChainDescription swapChainDescRef, IntPtr swapChainRef, IntPtr deviceRef);		
        
        /// <summary>	
        /// Get a Direct3D 10.1 device interface pointer from a Direct3D 10.0 interface pointer.	
        /// </summary>	
        /// <remarks>	
        /// For this function to succeed, you must have acquired the supplied <see cref="SlimDX2.Direct3D10.Device"/> pointer using a call to the <see cref="SlimDX2.Direct3D10.D3DX10.CreateDevice"/> function, the <see cref="SlimDX2.Direct3D10.D3DX10.CreateDeviceAndSwapChain"/> function, the <see cref="SlimDX2.Direct3D10.D3D10.CreateDevice1"/> function, or the <see cref="SlimDX2.Direct3D10.D3D10.CreateDeviceAndSwapChain1"/> function.You can only create a Direct3D 10.1 device on computers running Windows Vista Service Pack 1 or later, and with Direct3D 10.1-compatible hardware installed. This function will return E_FAIL on any computer not meeting these requirements.	
        /// However, you can call this function on any version of Windows that has the D3DX10 DLL installed.	
        /// </remarks>	
        /// <param name="deviceRef">Pointer to the Direct3D 10.0 device (see the <see cref="SlimDX2.Direct3D10.Device"/> interface).</param>
        /// <param name="device1Ref">Pointer to the Direct3D 10.1 device (see the <see cref="SlimDX2.Direct3D10.Device1"/> interface).</param>
        /// <returns>This function returns one of the following {{Direct3D 10 Return Codes}}.  If a Direct3D 10.1 device interface can be acquired, this function succeeds and passes a pointer to the 10.1 interface using the ppDevice parameter. If a Direct3D 10.1 device interface cannot be acquired, this function returns E_FAIL, and will not return anything for the ppDevice parameter.</returns>
        /// <unmanaged>HRESULT D3DX10GetFeatureLevel1([None] ID3D10Device* pDevice,[None] ID3D10Device1** ppDevice1)</unmanaged>
		public static SlimDX2.Result GetFeatureLevel1(SlimDX2.Direct3D10.Device deviceRef, SlimDX2.Direct3D10.Device1 device1Ref) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10GetFeatureLevel1_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer, (device1Ref == null)?IntPtr.Zero:device1Ref.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10GetFeatureLevel1([None] ID3D10Device* pDevice,[None] ID3D10Device1** ppDevice1)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10GetFeatureLevel1", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10GetFeatureLevel1_(IntPtr deviceRef, IntPtr device1Ref);		
        
        /// <summary>	
        /// Verify that the version of D3DX you compiled with is the version that you are running.	
        /// </summary>	
        /// <remarks>	
        /// Use this function during the initialization of your application.	
        /// <code> HRESULT hr; if( FAILED( D3DX10CheckVersion(D3D10_SDK_VERSION, D3DX10_SDK_VERSION) ) ) return E_FAIL; </code>	
        /// 	
        /// </remarks>	
        /// <param name="d3DSdkVersion">Use D3D10_SDK_VERSION. See remarks.</param>
        /// <param name="d3DX10SdkVersion">Use D3DX10_SDK_VERSION. See remarks.</param>
        /// <returns>If the version doesn't match, the function will return FALSE (a number less than or equal to 0, the number itself has no meaning).</returns>
        /// <unmanaged>HRESULT D3DX10CheckVersion([None] UINT D3DSdkVersion,[None] UINT D3DX10SdkVersion)</unmanaged>
		public static SlimDX2.Result CheckVersion(int d3DSdkVersion, int d3DX10SdkVersion) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CheckVersion_( d3DSdkVersion,  d3DX10SdkVersion);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CheckVersion([None] UINT D3DSdkVersion,[None] UINT D3DX10SdkVersion)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CheckVersion", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CheckVersion_(int d3DSdkVersion, int d3DX10SdkVersion);		
        
        /// <summary>	
        /// Create a sprite for drawing a 2D texture.	
        /// </summary>	
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will draw the sprite.</param>
        /// <param name="cDeviceBufferSize">The size of the vertex buffer, in number of sprites, that will be sent to the device when <see cref="SlimDX2.Direct3D10.Sprite.Flush"/> or <see cref="SlimDX2.Direct3D10.Sprite.DrawSpritesImmediate"/> is called. This should be a small number if you know you will be rendering a small number of sprites at a time (to save memory) and a large number if you know you will be rendering a large number of sprites at a time. The maximum value is 4096. If 0 is specified, the vertex buffer size will automatically be set to 4096.</param>
        /// <param name="spriteRef">The address of a pointer to a sprite interface (see <see cref="SlimDX2.Direct3D10.Sprite"/>).</param>
        /// <returns>If the function succeeds, the return value is S_OK. If the function fails, the return value can be one of the following: D3DERR_INVALIDCALL, E_OUTOFMEMORY.</returns>
        /// <unmanaged>HRESULT D3DX10CreateSprite([None] ID3D10Device* pDevice,[None] UINT cDeviceBufferSize,[None] LPD3DX10SPRITE* ppSprite)</unmanaged>
		public static SlimDX2.Result CreateSprite(SlimDX2.Direct3D10.Device deviceRef, int cDeviceBufferSize, SlimDX2.Direct3D10.Sprite spriteRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateSprite_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  cDeviceBufferSize, (spriteRef == null)?IntPtr.Zero:spriteRef.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateSprite([None] ID3D10Device* pDevice,[None] UINT cDeviceBufferSize,[None] LPD3DX10SPRITE* ppSprite)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateSprite", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateSprite_(IntPtr deviceRef, int cDeviceBufferSize, IntPtr spriteRef);		
        
        /// <summary>	
        /// Creates a font object for a device and font.	
        /// </summary>	
        /// <remarks>	
        /// The compiler setting also determines the function version. If Unicode is defined, the function call resolves to D3DXCreateFontW. Otherwise, the function call resolves to D3DXCreateFontA because ANSI strings are being used.If you want more information about font parameters, see {{The Logical Font}}.	
        /// </remarks>	
        /// <param name="deviceRef">Pointer to an ID3D10Device interface, the device to be associated with the font object.</param>
        /// <param name="height">The height of the characters in logical units.</param>
        /// <param name="width">The width of the characters in logical units.</param>
        /// <param name="weight">Typeface weight. One example is bold.</param>
        /// <param name="mipLevels">The number of mipmap levels.</param>
        /// <param name="italic">True for italic font, false otherwise.</param>
        /// <param name="charSet">The character set of the font.</param>
        /// <param name="outputPrecision">Specifies how Windows should attempt to match the desired font sizes and characteristics with actual fonts. Use OUT_TT_ONLY_PRECIS for instance, to ensure that you always get a TrueType font.</param>
        /// <param name="quality">Specifies how Windows should match the desired font with a real font. It applies to raster fonts only and should not affect TrueType fonts.</param>
        /// <param name="pitchAndFamily">Pitch and family index.</param>
        /// <param name="faceNameRef">String containing the typeface name. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. See Remarks. </param>
        /// <param name="fontRef">Returns a pointer to an ID3DX10Font interface, representing the created font object.</param>
        /// <returns>If the function succeeds, the return value is S_OK. If the function fails, the return value can be one of the following: D3DERR_INVALIDCALL, D3DXERR_INVALIDDATA, E_OUTOFMEMORY.</returns>
        /// <unmanaged>HRESULT D3DX10CreateFontW([None] ID3D10Device* pDevice,[None] INT Height,[None] UINT Width,[None] UINT Weight,[None] UINT MipLevels,[None] BOOL Italic,[None] UINT CharSet,[None] UINT OutputPrecision,[None] UINT Quality,[None] UINT PitchAndFamily,[None] const wchar* pFaceName,[None] LPD3DX10FONT* ppFont)</unmanaged>
		public static SlimDX2.Result CreateFont(SlimDX2.Direct3D10.Device deviceRef, int height, int width, int weight, int mipLevels, bool italic, int charSet, int outputPrecision, int quality, int pitchAndFamily, string faceNameRef, SlimDX2.Direct3D10.Font fontRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateFontW_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  height,  width,  weight,  mipLevels,  italic,  charSet,  outputPrecision,  quality,  pitchAndFamily,  faceNameRef, (fontRef == null)?IntPtr.Zero:fontRef.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateFontW([None] ID3D10Device* pDevice,[None] INT Height,[None] UINT Width,[None] UINT Weight,[None] UINT MipLevels,[None] BOOL Italic,[None] UINT CharSet,[None] UINT OutputPrecision,[None] UINT Quality,[None] UINT PitchAndFamily,[None] const wchar* pFaceName,[None] LPD3DX10FONT* ppFont)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateFontW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateFontW_(IntPtr deviceRef, int height, int width, int weight, int mipLevels, bool italic, int charSet, int outputPrecision, int quality, int pitchAndFamily, [MarshalAs(UnmanagedType.LPWStr),In] string faceNameRef, IntPtr fontRef);		
        
        /// <summary>	
        /// Creates a font object.	
        /// </summary>	
        /// <param name="deviceRef">Pointer to an <see cref="SlimDX2.Direct3D10.Device"/> interface.</param>
        /// <param name="descRef">Pointer to a {{D3DX10_FONT_DESC}} structure, describing the attributes of the font object to create. If Unicode is defined, the function call resolves to D3DXCreateFontIndirectW. Otherwise, the function call resolves to D3DXCreateFontIndirectA because ANSI strings are being used.</param>
        /// <param name="fontRef">Returns a pointer to an <see cref="SlimDX2.Direct3D10.Font"/>.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateFontIndirectW([None] ID3D10Device* pDevice,[None] const D3DX10_FONT_DESCW* pDesc,[None] LPD3DX10FONT* ppFont)</unmanaged>
		public static SlimDX2.Result CreateFontIndirect(SlimDX2.Direct3D10.Device deviceRef, ref SlimDX2.Direct3D10.FontDescription descRef, SlimDX2.Direct3D10.Font fontRef) {
            unsafe {
                SlimDX2.Direct3D10.FontDescription.__Native descRef_ = new SlimDX2.Direct3D10.FontDescription.__Native();
                descRef.__MarshalTo(ref descRef_);
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateFontIndirectW_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer, ref  descRef_, (fontRef == null)?IntPtr.Zero:fontRef.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateFontIndirectW([None] ID3D10Device* pDevice,[None] const D3DX10_FONT_DESCW* pDesc,[None] LPD3DX10FONT* ppFont)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateFontIndirectW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateFontIndirectW_(IntPtr deviceRef, ref SlimDX2.Direct3D10.FontDescription.__Native descRef, IntPtr fontRef);		
        
        /// <summary>	
        /// Removes all resources from the device by setting their pointers to NULL. This should be called during shutdown of your application. It helps ensure that when one is releasing all of their resources that none of them are bound to the device.	
        /// </summary>	
        /// <param name="deviceRef">Pointer to the device. See <see cref="SlimDX2.Direct3D10.Device"/>.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10UnsetAllDeviceObjects([None] ID3D10Device* pDevice)</unmanaged>
		public static SlimDX2.Result UnsetAllDeviceObjects(SlimDX2.Direct3D10.Device deviceRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10UnsetAllDeviceObjects_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10UnsetAllDeviceObjects([None] ID3D10Device* pDevice)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10UnsetAllDeviceObjects", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10UnsetAllDeviceObjects_(IntPtr deviceRef);		
        
        /// <summary>	
        /// Retrieves information about a given image file.	
        /// </summary>	
        /// <remarks>	
        /// This function supports both Unicode and ANSI strings.	
        /// </remarks>	
        /// <param name="srcFileRef">File name of image to retrieve information about. If UNICODE or _UNICODE are defined, this parameter type is LPCWSTR, otherwise, the type is LPCSTR.</param>
        /// <param name="pumpRef">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See {{ID3DX10ThreadPump}}.</param>
        /// <param name="srcInfoRef">Pointer to a D3DX10_IMAGE_INFO structure to be filled with the description of the data in the source file.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following: D3DERR_INVALIDCALL</returns>
        /// <unmanaged>HRESULT D3DX10GetImageInfoFromFileW([None] const wchar* pSrcFile,[None] void* pPump,[None] D3DX10_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result GetImageInfoFromFile(string srcFileRef, IntPtr pumpRef, ref SlimDX2.Direct3D10.ImageInformation srcInfoRef, int hResultRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10GetImageInfoFromFileW_( srcFileRef,  pumpRef, ref  srcInfoRef, ref  hResultRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10GetImageInfoFromFileW([None] const wchar* pSrcFile,[None] void* pPump,[None] D3DX10_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10GetImageInfoFromFileW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10GetImageInfoFromFileW_([MarshalAs(UnmanagedType.LPWStr),In] string srcFileRef, IntPtr pumpRef, ref SlimDX2.Direct3D10.ImageInformation srcInfoRef, ref int hResultRef);		
        
        /// <summary>	
        /// Retrieves information about a given image in a resource.	
        /// </summary>	
        /// <remarks>	
        /// The compiler setting also determines the function version. If Unicode is defined, the function call resolves to D3DX10GetImageInfoFromResourceW. Otherwise, the function call resolves to D3DX10GetImageInfoFromResourceA because ANSI strings are being used.	
        /// </remarks>	
        /// <param name="hSrcModule">Module where the resource is loaded. Set this parameter to NULL to specify the module associated with the image that the operating system used to create the current process.</param>
        /// <param name="srcResourceRef">Pointer to a string that specifies the filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. See Remarks.</param>
        /// <param name="pumpRef">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See {{ID3DX10ThreadPump}}.</param>
        /// <param name="srcInfoRef">Pointer to a D3DX10_IMAGE_INFO structure to be filled with the description of the data in the source file.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following: D3DERR_INVALIDCALL</returns>
        /// <unmanaged>HRESULT D3DX10GetImageInfoFromResourceW([None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[None] void* pPump,[None] D3DX10_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result GetImageInfoFromResource(IntPtr hSrcModule, string srcResourceRef, IntPtr pumpRef, ref SlimDX2.Direct3D10.ImageInformation srcInfoRef, int hResultRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10GetImageInfoFromResourceW_( hSrcModule,  srcResourceRef,  pumpRef, ref  srcInfoRef, ref  hResultRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10GetImageInfoFromResourceW([None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[None] void* pPump,[None] D3DX10_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10GetImageInfoFromResourceW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10GetImageInfoFromResourceW_(IntPtr hSrcModule, [MarshalAs(UnmanagedType.LPWStr),In] string srcResourceRef, IntPtr pumpRef, ref SlimDX2.Direct3D10.ImageInformation srcInfoRef, ref int hResultRef);		
        
        /// <summary>	
        /// Get information about an image already loaded into memory.	
        /// </summary>	
        /// <param name="pSrcData">Pointer to the image in memory.</param>
        /// <param name="srcDataSize">Size of the image in memory, in bytes.</param>
        /// <param name="pumpRef">Optional thread pump that can be used to load the info asynchronously. Can be NULL. See {{ID3DX10ThreadPump}}.</param>
        /// <param name="srcInfoRef">Information about the image in memory.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10GetImageInfoFromMemory([None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[None] void* pPump,[None] D3DX10_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result GetImageInfoFromMemory(IntPtr pSrcData, SlimDX2.Size srcDataSize, IntPtr pumpRef, ref SlimDX2.Direct3D10.ImageInformation srcInfoRef, int hResultRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10GetImageInfoFromMemory_( pSrcData,  srcDataSize,  pumpRef, ref  srcInfoRef, ref  hResultRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10GetImageInfoFromMemory([None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[None] void* pPump,[None] D3DX10_IMAGE_INFO* pSrcInfo,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10GetImageInfoFromMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10GetImageInfoFromMemory_(IntPtr pSrcData, SlimDX2.Size srcDataSize, IntPtr pumpRef, ref SlimDX2.Direct3D10.ImageInformation srcInfoRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create a shader-resource view from a file.	
        /// </summary>	
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resource.</param>
        /// <param name="srcFileRef">Name of the file that contains the shader-resource view. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D10.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pumpRef">Pointer to a thread-pump interface (see {{ID3DX10ThreadPump Interface}}). If NULL is specified, this function will behave synchronously and will not return until it is finished.</param>
        /// <param name="shaderResourceViewRef">Address of a pointer to the shader-resource view (see <see cref="SlimDX2.Direct3D10.ShaderResourceView"/>).</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromFileW([None] ID3D10Device* pDevice,[None] const wchar* pSrcFile,[None] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateShaderResourceViewFromFile(SlimDX2.Direct3D10.Device deviceRef, string srcFileRef, ref SlimDX2.Direct3D10.ImageLoadInformation loadInfoRef, IntPtr pumpRef, SlimDX2.Direct3D10.ShaderResourceView shaderResourceViewRef, int hResultRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateShaderResourceViewFromFileW_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  srcFileRef, ref  loadInfoRef,  pumpRef, (shaderResourceViewRef == null)?IntPtr.Zero:shaderResourceViewRef.NativePointer, ref  hResultRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromFileW([None] ID3D10Device* pDevice,[None] const wchar* pSrcFile,[None] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateShaderResourceViewFromFileW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateShaderResourceViewFromFileW_(IntPtr deviceRef, [MarshalAs(UnmanagedType.LPWStr),In] string srcFileRef, ref SlimDX2.Direct3D10.ImageLoadInformation loadInfoRef, IntPtr pumpRef, IntPtr shaderResourceViewRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create a texture resource from a file.	
        /// </summary>	
        /// <remarks>	
        /// For a list of supported image formats see <see cref="SlimDX2.Direct3D10.ImageFileFormat"/>.	
        /// </remarks>	
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resource.</param>
        /// <param name="srcFileRef">The name of the file containing the resource. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise,  the data type resolves to LPCSTR.</param>
        /// <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D10.ImageLoadInformation"/>) when the data processor is created;  set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). If NULL is specified, this function will behave synchronously  and will not return until it is finished.</param>
        /// <param name="textureRef">The address of a pointer to the texture resource (see <see cref="SlimDX2.Direct3D10.Resource"/>).</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid  memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateTextureFromFileW([None] ID3D10Device* pDevice,[None] const wchar* pSrcFile,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D10Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		internal static SlimDX2.Result CreateTextureFromFile(SlimDX2.Direct3D10.Device deviceRef, string srcFileRef, SlimDX2.Direct3D10.ImageLoadInformation? loadInfoRef, IntPtr pumpRef, out SlimDX2.Direct3D10.Resource textureRef, int hResultRef) {
            unsafe {
							
                SlimDX2.Direct3D10.ImageLoadInformation loadInfoRef_ = new SlimDX2.Direct3D10.ImageLoadInformation();
                if (loadInfoRef.HasValue)
                    loadInfoRef_ = loadInfoRef.Value;								
                IntPtr textureRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateTextureFromFileW_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  srcFileRef, (loadInfoRef.HasValue)?new IntPtr(&loadInfoRef_):IntPtr.Zero,  pumpRef, out textureRef_, ref  hResultRef);
                textureRef = (textureRef_ == IntPtr.Zero)?null:new SlimDX2.Direct3D10.Resource(textureRef_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateTextureFromFileW([None] ID3D10Device* pDevice,[None] const wchar* pSrcFile,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D10Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateTextureFromFileW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateTextureFromFileW_(IntPtr deviceRef, [MarshalAs(UnmanagedType.LPWStr),In] string srcFileRef, IntPtr loadInfoRef, IntPtr pumpRef, out IntPtr textureRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create a shader-resource view from a resource.	
        /// </summary>	
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resource.</param>
        /// <param name="hSrcModule">Handle to the resource module containing the shader-resource view. HMODULE can be obtained with {{GetModuleHandle Function}}.</param>
        /// <param name="srcResourceRef">Name of the shader resource view in hSrcModule. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D10.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). If NULL is specified, this function will behave synchronously and will not return until it is finished.</param>
        /// <param name="shaderResourceViewRef">Address of a pointer to the shader-resource view (see <see cref="SlimDX2.Direct3D10.ShaderResourceView"/>).</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromResourceW([None] ID3D10Device* pDevice,[None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[None] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateShaderResourceViewFromResource(SlimDX2.Direct3D10.Device deviceRef, IntPtr hSrcModule, string srcResourceRef, ref SlimDX2.Direct3D10.ImageLoadInformation loadInfoRef, IntPtr pumpRef, SlimDX2.Direct3D10.ShaderResourceView shaderResourceViewRef, int hResultRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateShaderResourceViewFromResourceW_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  hSrcModule,  srcResourceRef, ref  loadInfoRef,  pumpRef, (shaderResourceViewRef == null)?IntPtr.Zero:shaderResourceViewRef.NativePointer, ref  hResultRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromResourceW([None] ID3D10Device* pDevice,[None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[None] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateShaderResourceViewFromResourceW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateShaderResourceViewFromResourceW_(IntPtr deviceRef, IntPtr hSrcModule, [MarshalAs(UnmanagedType.LPWStr),In] string srcResourceRef, ref SlimDX2.Direct3D10.ImageLoadInformation loadInfoRef, IntPtr pumpRef, IntPtr shaderResourceViewRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create a texture from another resource.	
        /// </summary>	
        /// <remarks>	
        /// For a list of supported image formats see <see cref="SlimDX2.Direct3D10.ImageFileFormat"/>.	
        /// </remarks>	
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resource.</param>
        /// <param name="hSrcModule">A handle to the source resource. HMODULE can be obtained with  {{GetModuleHandle Function}}.</param>
        /// <param name="srcResourceRef">A string that contains the name of the source resource.  If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR. </param>
        /// <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D10.ImageLoadInformation"/>) when the data processor is created;  set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). If NULL is specified, this function will behave synchronously  and will not return until it is finished.</param>
        /// <param name="textureRef">The address of a pointer to the texture resource (see <see cref="SlimDX2.Direct3D10.Resource"/>).</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a  valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateTextureFromResourceW([None] ID3D10Device* pDevice,[None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D10Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		internal static SlimDX2.Result CreateTextureFromResource(SlimDX2.Direct3D10.Device deviceRef, IntPtr hSrcModule, string srcResourceRef, SlimDX2.Direct3D10.ImageLoadInformation? loadInfoRef, IntPtr pumpRef, out SlimDX2.Direct3D10.Resource textureRef, int hResultRef) {
            unsafe {
							
                SlimDX2.Direct3D10.ImageLoadInformation loadInfoRef_ = new SlimDX2.Direct3D10.ImageLoadInformation();
                if (loadInfoRef.HasValue)
                    loadInfoRef_ = loadInfoRef.Value;								
                IntPtr textureRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateTextureFromResourceW_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  hSrcModule,  srcResourceRef, (loadInfoRef.HasValue)?new IntPtr(&loadInfoRef_):IntPtr.Zero,  pumpRef, out textureRef_, ref  hResultRef);
                textureRef = (textureRef_ == IntPtr.Zero)?null:new SlimDX2.Direct3D10.Resource(textureRef_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateTextureFromResourceW([None] ID3D10Device* pDevice,[None] HMODULE hSrcModule,[None] const wchar* pSrcResource,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D10Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateTextureFromResourceW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateTextureFromResourceW_(IntPtr deviceRef, IntPtr hSrcModule, [MarshalAs(UnmanagedType.LPWStr),In] string srcResourceRef, IntPtr loadInfoRef, IntPtr pumpRef, out IntPtr textureRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create a shader-resource view from a file in memory.	
        /// </summary>	
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resource.</param>
        /// <param name="pSrcData">Pointer to the file in memory that contains the shader-resource view.</param>
        /// <param name="srcDataSize">Size of the file in memory.</param>
        /// <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D10.ImageLoadInformation"/>) when the data processor is created; set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). If NULL is specified, this function will behave synchronously and will not return until it is finished.</param>
        /// <param name="shaderResourceViewRef">Address of a pointer to the newly created shader resource view. See <see cref="SlimDX2.Direct3D10.ShaderResourceView"/>.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[None] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateShaderResourceViewFromMemory(SlimDX2.Direct3D10.Device deviceRef, IntPtr pSrcData, SlimDX2.Size srcDataSize, ref SlimDX2.Direct3D10.ImageLoadInformation loadInfoRef, IntPtr pumpRef, SlimDX2.Direct3D10.ShaderResourceView shaderResourceViewRef, int hResultRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateShaderResourceViewFromMemory_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  pSrcData,  srcDataSize, ref  loadInfoRef,  pumpRef, (shaderResourceViewRef == null)?IntPtr.Zero:shaderResourceViewRef.NativePointer, ref  hResultRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateShaderResourceViewFromMemory([None] ID3D10Device* pDevice,[None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[None] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[None] ID3D10ShaderResourceView** ppShaderResourceView,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateShaderResourceViewFromMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateShaderResourceViewFromMemory_(IntPtr deviceRef, IntPtr pSrcData, SlimDX2.Size srcDataSize, ref SlimDX2.Direct3D10.ImageLoadInformation loadInfoRef, IntPtr pumpRef, IntPtr shaderResourceViewRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create a texture resource from a file residing in system memory.	
        /// </summary>	
        /// <remarks>	
        /// For a list of supported image formats see <see cref="SlimDX2.Direct3D10.ImageFileFormat"/>.	
        /// </remarks>	
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resource.</param>
        /// <param name="pSrcData">Pointer to the resource in system memory.</param>
        /// <param name="srcDataSize">Size of the resource in system memory.</param>
        /// <param name="loadInfoRef">Optional. Identifies the characteristics of a texture (see <see cref="SlimDX2.Direct3D10.ImageLoadInformation"/>) when the data processor is created;  set this to NULL to read the characteristics of a texture when the texture is loaded.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). If NULL is specified, this function will behave synchronously  and will not return until it is finished.</param>
        /// <param name="textureRef">Address of a pointer to the created resource. See <see cref="SlimDX2.Direct3D10.Resource"/>.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a  valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateTextureFromMemory([None] ID3D10Device* pDevice,[None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D10Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		internal static SlimDX2.Result CreateTextureFromMemory(SlimDX2.Direct3D10.Device deviceRef, IntPtr pSrcData, SlimDX2.Size srcDataSize, SlimDX2.Direct3D10.ImageLoadInformation? loadInfoRef, IntPtr pumpRef, out SlimDX2.Direct3D10.Resource textureRef, int hResultRef) {
            unsafe {
							
                SlimDX2.Direct3D10.ImageLoadInformation loadInfoRef_ = new SlimDX2.Direct3D10.ImageLoadInformation();
                if (loadInfoRef.HasValue)
                    loadInfoRef_ = loadInfoRef.Value;								
                IntPtr textureRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateTextureFromMemory_((deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  pSrcData,  srcDataSize, (loadInfoRef.HasValue)?new IntPtr(&loadInfoRef_):IntPtr.Zero,  pumpRef, out textureRef_, ref  hResultRef);
                textureRef = (textureRef_ == IntPtr.Zero)?null:new SlimDX2.Direct3D10.Resource(textureRef_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateTextureFromMemory([None] ID3D10Device* pDevice,[None] LPCVOID pSrcData,[None] SIZE_T SrcDataSize,[In, Optional] D3DX10_IMAGE_LOAD_INFO* pLoadInfo,[None] void* pPump,[Out] ID3D10Resource** ppTexture,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateTextureFromMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateTextureFromMemory_(IntPtr deviceRef, IntPtr pSrcData, SlimDX2.Size srcDataSize, IntPtr loadInfoRef, IntPtr pumpRef, out IntPtr textureRef, ref int hResultRef);		
        
        /// <summary>	
        /// Load a texture from a texture.	
        /// </summary>	
        /// <param name="srcTextureRef">Pointer to the source texture. See <see cref="SlimDX2.Direct3D10.Resource"/>.</param>
        /// <param name="loadInfoRef">Pointer to texture loading parameters. See <see cref="SlimDX2.Direct3D10.TextureLoadInformation"/>.</param>
        /// <param name="dstTextureRef">Pointer to the destination texture. See <see cref="SlimDX2.Direct3D10.Resource"/>.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10LoadTextureFromTexture([None] ID3D10Resource* pSrcTexture,[None] D3DX10_TEXTURE_LOAD_INFO* pLoadInfo,[None] ID3D10Resource* pDstTexture)</unmanaged>
		public static SlimDX2.Result LoadTextureFromTexture(SlimDX2.Direct3D10.Resource srcTextureRef, ref SlimDX2.Direct3D10.TextureLoadInformation loadInfoRef, SlimDX2.Direct3D10.Resource dstTextureRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10LoadTextureFromTexture_((srcTextureRef == null)?IntPtr.Zero:srcTextureRef.NativePointer, ref  loadInfoRef, (dstTextureRef == null)?IntPtr.Zero:dstTextureRef.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10LoadTextureFromTexture([None] ID3D10Resource* pSrcTexture,[None] D3DX10_TEXTURE_LOAD_INFO* pLoadInfo,[None] ID3D10Resource* pDstTexture)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10LoadTextureFromTexture", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10LoadTextureFromTexture_(IntPtr srcTextureRef, ref SlimDX2.Direct3D10.TextureLoadInformation loadInfoRef, IntPtr dstTextureRef);		
        
        /// <summary>	
        /// Generates mipmap chain using a particular texture filter.	
        /// </summary>	
        /// <param name="textureRef">The texture object to be filtered. See <see cref="SlimDX2.Direct3D10.Resource"/>.</param>
        /// <param name="srcLevel">The mipmap level whose data is used to generate the rest of the mipmap chain.</param>
        /// <param name="mipFilter">Flags controlling how each miplevel is filtered (or D3DX10_DEFAULT for D3DX10_FILTER_BOX). See <see cref="SlimDX2.Direct3D10.FilterFlags"/>.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10FilterTexture([None] ID3D10Resource* pTexture,[None] UINT SrcLevel,[None] UINT MipFilter)</unmanaged>
		public static SlimDX2.Result FilterTexture(SlimDX2.Direct3D10.Resource textureRef, int srcLevel, int mipFilter) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10FilterTexture_((textureRef == null)?IntPtr.Zero:textureRef.NativePointer,  srcLevel,  mipFilter);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10FilterTexture([None] ID3D10Resource* pTexture,[None] UINT SrcLevel,[None] UINT MipFilter)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10FilterTexture", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10FilterTexture_(IntPtr textureRef, int srcLevel, int mipFilter);		
        
        /// <summary>	
        /// Save a texture to a file.	
        /// </summary>	
        /// <param name="srcTextureRef">Pointer to the texture to be saved. See <see cref="SlimDX2.Direct3D10.Resource"/>.</param>
        /// <param name="destFormat">The format the texture will be saved as (see <see cref="SlimDX2.Direct3D10.ImageFileFormat"/>). D3DX10_IFF_DDS is the preferred format since it is the only option that supports all the formats in <see cref="SlimDX2.DXGI.Format"/>.</param>
        /// <param name="destFileRef">Name of the destination output file where the texture will be saved.  If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}; use the return value to see if the DestFormat is supported.</returns>
        /// <unmanaged>HRESULT D3DX10SaveTextureToFileW([None] ID3D10Resource* pSrcTexture,[None] D3DX10_IMAGE_FILE_FORMAT DestFormat,[None] const wchar* pDestFile)</unmanaged>
		public static SlimDX2.Result SaveTextureToFile(SlimDX2.Direct3D10.Resource srcTextureRef, SlimDX2.Direct3D10.ImageFileFormat destFormat, string destFileRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10SaveTextureToFileW_((srcTextureRef == null)?IntPtr.Zero:srcTextureRef.NativePointer,  destFormat,  destFileRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10SaveTextureToFileW([None] ID3D10Resource* pSrcTexture,[None] D3DX10_IMAGE_FILE_FORMAT DestFormat,[None] const wchar* pDestFile)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10SaveTextureToFileW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10SaveTextureToFileW_(IntPtr srcTextureRef, SlimDX2.Direct3D10.ImageFileFormat destFormat, [MarshalAs(UnmanagedType.LPWStr),In] string destFileRef);		
        
        /// <summary>	
        /// Save a texture to memory.	
        /// </summary>	
        /// <param name="srcTextureRef">Pointer to the texture to be saved. See <see cref="SlimDX2.Direct3D10.Resource"/>.</param>
        /// <param name="destFormat">The format the texture will be saved as. See <see cref="SlimDX2.Direct3D10.ImageFileFormat"/>.</param>
        /// <param name="destBufRef">Address of a pointer to the memory containing the saved texture. See <see cref="SlimDX2.Direct3D.Blob"/>.</param>
        /// <param name="flags">Optional.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10SaveTextureToMemory([None] ID3D10Resource* pSrcTexture,[None] D3DX10_IMAGE_FILE_FORMAT DestFormat,[Out] LPD3D10BLOB* ppDestBuf,[None] UINT Flags)</unmanaged>
		internal static SlimDX2.Result SaveTextureToMemory(SlimDX2.Direct3D10.Resource srcTextureRef, SlimDX2.Direct3D10.ImageFileFormat destFormat, out SlimDX2.Direct3D.Blob destBufRef, int flags) {
            unsafe {
                IntPtr destBufRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10SaveTextureToMemory_((srcTextureRef == null)?IntPtr.Zero:srcTextureRef.NativePointer,  destFormat, out destBufRef_,  flags);
                destBufRef = (destBufRef_ == IntPtr.Zero)?null:new SlimDX2.Direct3D.Blob(destBufRef_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10SaveTextureToMemory([None] ID3D10Resource* pSrcTexture,[None] D3DX10_IMAGE_FILE_FORMAT DestFormat,[Out] LPD3D10BLOB* ppDestBuf,[None] UINT Flags)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10SaveTextureToMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10SaveTextureToMemory_(IntPtr srcTextureRef, SlimDX2.Direct3D10.ImageFileFormat destFormat, out IntPtr destBufRef, int flags);		
        
        /// <summary>	
        /// Converts a height map into a normal map. The (x,y,z) components of each normal are mapped to the (r,g,b) channels of the output texture.	
        /// </summary>	
        /// <remarks>	
        /// This method computes the normal by using the central difference with a kernel size of 3x3. RGB channels in the destination contain biased (x,y,z) components of the normal. The central differencing denominator is hardcoded to 2.0.	
        /// </remarks>	
        /// <param name="srcTextureRef">Pointer to an ID3D10Texture2D interface, representing the source height-map texture.</param>
        /// <param name="flags">One or more D3DX_NORMALMAP flags that control generation of normal maps.</param>
        /// <param name="channel">One D3DX_CHANNEL flag specifying the source of height information.</param>
        /// <param name="amplitude">Constant value multiplier that increases (or decreases) the values in the normal map. Higher values usually make bumps more visible, lower values usually make bumps less visible.</param>
        /// <param name="destTextureRef">Pointer to an ID3D10Texture2D interface, representing the destination texture.</param>
        /// <returns>If the function succeeds, the return value is D3D_OK. If the function fails, the return value can be the following value: D3DERR_INVALIDCALL.</returns>
        /// <unmanaged>HRESULT D3DX10ComputeNormalMap([None] ID3D10Texture2D* pSrcTexture,[None] UINT Flags,[None] UINT Channel,[None] FLOAT Amplitude,[None] ID3D10Texture2D* pDestTexture)</unmanaged>
		public static SlimDX2.Result ComputeNormalMap(SlimDX2.Direct3D10.Texture2D srcTextureRef, SlimDX2.Direct3D10.NormalMapFlags flags, SlimDX2.Direct3D10.ChannelFlags channel, float amplitude, SlimDX2.Direct3D10.Texture2D destTextureRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10ComputeNormalMap_((srcTextureRef == null)?IntPtr.Zero:srcTextureRef.NativePointer,  flags,  channel,  amplitude, (destTextureRef == null)?IntPtr.Zero:destTextureRef.NativePointer);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10ComputeNormalMap([None] ID3D10Texture2D* pSrcTexture,[None] UINT Flags,[None] UINT Channel,[None] FLOAT Amplitude,[None] ID3D10Texture2D* pDestTexture)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10ComputeNormalMap", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10ComputeNormalMap_(IntPtr srcTextureRef, SlimDX2.Direct3D10.NormalMapFlags flags, SlimDX2.Direct3D10.ChannelFlags channel, float amplitude, IntPtr destTextureRef);		
        
        /// <summary>	
        /// Projects a function represented in a cube map into spherical harmonics.	
        /// </summary>	
        /// <param name="order">Order of the SH evaluation, generates Order^2 coefs, degree is Order-1.</param>
        /// <param name="cubeMapRef">Cubemap that is going to be projected into spherical harmonics. See <see cref="SlimDX2.Direct3D10.Texture2D"/>.</param>
        /// <param name="rOutRef">Output SH vector for red.</param>
        /// <param name="gOutRef">Output SH vector for green.</param>
        /// <param name="bOutRef">Output SH vector for blue.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10SHProjectCubeMap([In] UINT Order,[None] ID3D10Texture2D* pCubeMap,[Out, Buffer] FLOAT* pROut,[Out, Buffer, Optional] FLOAT* pGOut,[Out, Buffer, Optional] FLOAT* pBOut)</unmanaged>
		public static SlimDX2.Result SHProjectCubeMap(int order, SlimDX2.Direct3D10.Texture2D cubeMapRef, float[] rOutRef, float[] gOutRef, float[] bOutRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10SHProjectCubeMap_( order, (cubeMapRef == null)?IntPtr.Zero:cubeMapRef.NativePointer, rOutRef, gOutRef, bOutRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10SHProjectCubeMap([In] UINT Order,[None] ID3D10Texture2D* pCubeMap,[Out, Buffer] FLOAT* pROut,[Out, Buffer, Optional] FLOAT* pGOut,[Out, Buffer, Optional] FLOAT* pBOut)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10SHProjectCubeMap", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10SHProjectCubeMap_(int order, IntPtr cubeMapRef, float[] rOutRef, float[] gOutRef, float[] bOutRef);		
        
        /// <summary>	
        /// Create an effect from a file.	
        /// </summary>	
        /// <param name="fileNameRef">Name of the ASCII effect file. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <param name="definesRef">A NULL-terminated array of shader macros (see {{D3D10_SHADER_MACRO}}); set this to NULL to specify no macros.</param>
        /// <param name="includeRef">A pointer to an include interface (see <see cref="SlimDX2.D3DCompiler.Include"/>). This parameter can be NULL.</param>
        /// <param name="profileRef">A string that specifies the {{shader profile}}, or shader model.</param>
        /// <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}).</param>
        /// <param name="fXFlags">Effect compile options (see {{Compile and Effect Flags}}).</param>
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resources.</param>
        /// <param name="effectPoolRef">Pointer to an effect pool (see <see cref="SlimDX2.Direct3D10.EffectPool"/>) for sharing variables between effects.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). Use NULL to specify that this function should not return until it is completed.</param>
        /// <param name="effectRef">Address of a pointer to the effect (see <see cref="SlimDX2.Direct3D10.Effect"/>) that is created.</param>
        /// <param name="errorsRef">The address of a pointer to memory (see <see cref="SlimDX2.Direct3D.Blob"/>) that contains effect compile errors, if there were any.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateEffectFromFileW([None] const wchar* pFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[None] void* pPump,[None] ID3D10Effect** ppEffect,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateEffectFromFile(string fileNameRef, SlimDX2.Direct3D.ShaderMacro[] definesRef, IntPtr includeRef, string profileRef, int hLSLFlags, int fXFlags, SlimDX2.Direct3D10.Device deviceRef, SlimDX2.Direct3D10.EffectPool effectPoolRef, IntPtr pumpRef, IntPtr effectRef, SlimDX2.Direct3D.Blob errorsRef, int hResultRef) {
            unsafe {
                SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef_ = ( definesRef == null)? null : new SlimDX2.Direct3D.ShaderMacro.__Native[definesRef.Length];
                if ( definesRef != null) 
                    for(int i = 0; i < definesRef.Length; i++) {
                   	    definesRef_[i] = new SlimDX2.Direct3D.ShaderMacro.__Native();
                   	    definesRef[i].__MarshalTo(ref definesRef_[i]);					
                    }
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateEffectFromFileW_( fileNameRef,  definesRef_,  includeRef,  profileRef,  hLSLFlags,  fXFlags, (deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer, (effectPoolRef == null)?IntPtr.Zero:effectPoolRef.NativePointer,  pumpRef,  effectRef, (errorsRef == null)?IntPtr.Zero:errorsRef.NativePointer, ref  hResultRef);
                    if ( definesRef != null)
                    for(int i = 0; i < definesRef.Length; i++) {
                       	definesRef_[i].__MarshalFree();
                    }
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateEffectFromFileW([None] const wchar* pFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[None] void* pPump,[None] ID3D10Effect** ppEffect,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateEffectFromFileW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateEffectFromFileW_([MarshalAs(UnmanagedType.LPWStr),In] string fileNameRef, SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef, IntPtr includeRef, [MarshalAs(UnmanagedType.LPWStr),In] string profileRef, int hLSLFlags, int fXFlags, IntPtr deviceRef, IntPtr effectPoolRef, IntPtr pumpRef, IntPtr effectRef, IntPtr errorsRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create an effect from memory.	
        /// </summary>	
        /// <param name="pData">Pointer to the effect in memory.</param>
        /// <param name="dataLength">Size of the effect in memory.</param>
        /// <param name="srcFileNameRef">Name of the effect file in memory.</param>
        /// <param name="definesRef">A NULL-terminated array of shader macros (see {{D3D10_SHADER_MACRO}}); set this to NULL to specify no macros.</param>
        /// <param name="includeRef">A pointer to an include interface (see <see cref="SlimDX2.D3DCompiler.Include"/>). This parameter can be NULL.</param>
        /// <param name="profileRef">A string that specifies the {{shader profile}}, or shader model.</param>
        /// <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}).</param>
        /// <param name="fXFlags">Effect compile options (see {{D3D10_EFFECT Constants}}).</param>
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resources.</param>
        /// <param name="effectPoolRef">Pointer to an effect pool (see <see cref="SlimDX2.Direct3D10.EffectPool"/>) for sharing variables between effects.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). Use NULL to specify that this function should not return until it is completed.</param>
        /// <param name="effectRef">Address of a pointer to the effect (see <see cref="SlimDX2.Direct3D10.Effect"/>) that is created.</param>
        /// <param name="errorsRef">The address of a pointer to memory (see <see cref="SlimDX2.Direct3D.Blob"/>) that contains effect compile errors, if there were any.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateEffectFromMemory([None] LPCVOID pData,[None] SIZE_T DataLength,[None] const char* pSrcFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[None] void* pPump,[None] ID3D10Effect** ppEffect,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateEffectFromMemory(IntPtr pData, SlimDX2.Size dataLength, string srcFileNameRef, SlimDX2.Direct3D.ShaderMacro[] definesRef, IntPtr includeRef, string profileRef, int hLSLFlags, int fXFlags, SlimDX2.Direct3D10.Device deviceRef, SlimDX2.Direct3D10.EffectPool effectPoolRef, IntPtr pumpRef, IntPtr effectRef, SlimDX2.Direct3D.Blob errorsRef, int hResultRef) {
            unsafe {
                SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef_ = ( definesRef == null)? null : new SlimDX2.Direct3D.ShaderMacro.__Native[definesRef.Length];
                if ( definesRef != null) 
                    for(int i = 0; i < definesRef.Length; i++) {
                   	    definesRef_[i] = new SlimDX2.Direct3D.ShaderMacro.__Native();
                   	    definesRef[i].__MarshalTo(ref definesRef_[i]);					
                    }
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateEffectFromMemory_( pData,  dataLength,  srcFileNameRef,  definesRef_,  includeRef,  profileRef,  hLSLFlags,  fXFlags, (deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer, (effectPoolRef == null)?IntPtr.Zero:effectPoolRef.NativePointer,  pumpRef,  effectRef, (errorsRef == null)?IntPtr.Zero:errorsRef.NativePointer, ref  hResultRef);
                    if ( definesRef != null)
                    for(int i = 0; i < definesRef.Length; i++) {
                       	definesRef_[i].__MarshalFree();
                    }
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateEffectFromMemory([None] LPCVOID pData,[None] SIZE_T DataLength,[None] const char* pSrcFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[None] void* pPump,[None] ID3D10Effect** ppEffect,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateEffectFromMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateEffectFromMemory_(IntPtr pData, SlimDX2.Size dataLength, [MarshalAs(UnmanagedType.LPStr),In] string srcFileNameRef, SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef, IntPtr includeRef, [MarshalAs(UnmanagedType.LPStr),In] string profileRef, int hLSLFlags, int fXFlags, IntPtr deviceRef, IntPtr effectPoolRef, IntPtr pumpRef, IntPtr effectRef, IntPtr errorsRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create an effect from a resource.	
        /// </summary>	
        /// <param name="hModule">A handle to the resource module containing the effect. HMODULE can be obtained with {{GetModuleHandle Function}}.</param>
        /// <param name="resourceNameRef">Name of the resource in hModule. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <param name="srcFileNameRef">Optional. Effect file name, which is used for error messages only. Can be NULL.</param>
        /// <param name="definesRef">A NULL-terminated array of shader macros (see {{D3D10_SHADER_MACRO}}); set this to NULL to specify no macros.</param>
        /// <param name="includeRef">A pointer to an include interface (see <see cref="SlimDX2.D3DCompiler.Include"/>). This parameter can be NULL.</param>
        /// <param name="profileRef">A string that specifies the {{shader profile}}, or shader model.</param>
        /// <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}).</param>
        /// <param name="fXFlags">Effect compile options (see {{Compile and Effect Flags}}).</param>
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resources.</param>
        /// <param name="effectPoolRef">Pointer to an effect pool (see <see cref="SlimDX2.Direct3D10.EffectPool"/>) for sharing variables between effects.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). Use NULL to specify that this function should not return until it is completed.</param>
        /// <param name="effectRef">Address of a pointer to the effect (see <see cref="SlimDX2.Direct3D10.Effect"/>) that is created.</param>
        /// <param name="errorsRef">The address of a pointer to memory (see <see cref="SlimDX2.Direct3D.Blob"/>) that contains effect compile errors, if there were any.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateEffectFromResourceW([None] HMODULE hModule,[None] const wchar* pResourceName,[None] const wchar* pSrcFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[None] void* pPump,[None] ID3D10Effect** ppEffect,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateEffectFromResource(IntPtr hModule, string resourceNameRef, string srcFileNameRef, SlimDX2.Direct3D.ShaderMacro[] definesRef, IntPtr includeRef, string profileRef, int hLSLFlags, int fXFlags, SlimDX2.Direct3D10.Device deviceRef, SlimDX2.Direct3D10.EffectPool effectPoolRef, IntPtr pumpRef, IntPtr effectRef, SlimDX2.Direct3D.Blob errorsRef, int hResultRef) {
            unsafe {
                SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef_ = ( definesRef == null)? null : new SlimDX2.Direct3D.ShaderMacro.__Native[definesRef.Length];
                if ( definesRef != null) 
                    for(int i = 0; i < definesRef.Length; i++) {
                   	    definesRef_[i] = new SlimDX2.Direct3D.ShaderMacro.__Native();
                   	    definesRef[i].__MarshalTo(ref definesRef_[i]);					
                    }
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateEffectFromResourceW_( hModule,  resourceNameRef,  srcFileNameRef,  definesRef_,  includeRef,  profileRef,  hLSLFlags,  fXFlags, (deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer, (effectPoolRef == null)?IntPtr.Zero:effectPoolRef.NativePointer,  pumpRef,  effectRef, (errorsRef == null)?IntPtr.Zero:errorsRef.NativePointer, ref  hResultRef);
                    if ( definesRef != null)
                    for(int i = 0; i < definesRef.Length; i++) {
                       	definesRef_[i].__MarshalFree();
                    }
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateEffectFromResourceW([None] HMODULE hModule,[None] const wchar* pResourceName,[None] const wchar* pSrcFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] ID3D10EffectPool* pEffectPool,[None] void* pPump,[None] ID3D10Effect** ppEffect,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateEffectFromResourceW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateEffectFromResourceW_(IntPtr hModule, [MarshalAs(UnmanagedType.LPWStr),In] string resourceNameRef, [MarshalAs(UnmanagedType.LPWStr),In] string srcFileNameRef, SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef, IntPtr includeRef, [MarshalAs(UnmanagedType.LPWStr),In] string profileRef, int hLSLFlags, int fXFlags, IntPtr deviceRef, IntPtr effectPoolRef, IntPtr pumpRef, IntPtr effectRef, IntPtr errorsRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create an effect pool from an effect file.	
        /// </summary>	
        /// <remarks>	
        /// This example creates an effect pool from the effect used in the {{BasicHLSL10 Sample}}.	
        /// <code> // Create an effect pool from an effect in memory	
        /// ID3D10EffectPool * l_pEffectPool = NULL;	
        /// ID3D10Blob*	l_pBlob_Errors = NULL;	
        /// WCHAR str[MAX_PATH];	
        /// hr = DXUTFindDXSDKMediaFileCch( str, MAX_PATH, L"BasicHLSL10.fx" );	
        /// hr = D3DX10CreateEffectPoolFromFile( str,  NULL, NULL, D3D10_SHADER_ENABLE_STRICTNESS,  0, pd3dDevice, NULL, &amp;l_pEffectPool, &amp;l_pBlob_Errors ); </code>	
        /// 	
        /// </remarks>	
        /// <param name="fileNameRef">The effect filename. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <param name="definesRef">A NULL-terminated array of shader macros (see {{D3D10_SHADER_MACRO}}); set this to NULL to specify no macros.</param>
        /// <param name="includeRef">A pointer to an include interface (see <see cref="SlimDX2.D3DCompiler.Include"/>). This parameter can be NULL.</param>
        /// <param name="profileRef">A string that specifies the {{shader profile}}, or shader model.</param>
        /// <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}).</param>
        /// <param name="fXFlags">Effect compile options (see {{Compile and Effect Flags}}).</param>
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resources.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). Use NULL to specify that this function should not return until it is completed.</param>
        /// <param name="effectPoolRef">The address of a pointer to the effect pool (see <see cref="SlimDX2.Direct3D10.EffectPool"/>).</param>
        /// <param name="errorsRef">The address of a pointer to memory (see <see cref="SlimDX2.Direct3D.Blob"/>) that contains effect compile errors, if there were any.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateEffectPoolFromFileW([None] const wchar* pFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] void* pPump,[None] ID3D10EffectPool** ppEffectPool,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateEffectPoolFromFile(string fileNameRef, SlimDX2.Direct3D.ShaderMacro[] definesRef, IntPtr includeRef, string profileRef, int hLSLFlags, int fXFlags, SlimDX2.Direct3D10.Device deviceRef, IntPtr pumpRef, SlimDX2.Direct3D10.EffectPool effectPoolRef, SlimDX2.Direct3D.Blob errorsRef, int hResultRef) {
            unsafe {
                SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef_ = ( definesRef == null)? null : new SlimDX2.Direct3D.ShaderMacro.__Native[definesRef.Length];
                if ( definesRef != null) 
                    for(int i = 0; i < definesRef.Length; i++) {
                   	    definesRef_[i] = new SlimDX2.Direct3D.ShaderMacro.__Native();
                   	    definesRef[i].__MarshalTo(ref definesRef_[i]);					
                    }
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateEffectPoolFromFileW_( fileNameRef,  definesRef_,  includeRef,  profileRef,  hLSLFlags,  fXFlags, (deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  pumpRef, (effectPoolRef == null)?IntPtr.Zero:effectPoolRef.NativePointer, (errorsRef == null)?IntPtr.Zero:errorsRef.NativePointer, ref  hResultRef);
                    if ( definesRef != null)
                    for(int i = 0; i < definesRef.Length; i++) {
                       	definesRef_[i].__MarshalFree();
                    }
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateEffectPoolFromFileW([None] const wchar* pFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] void* pPump,[None] ID3D10EffectPool** ppEffectPool,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateEffectPoolFromFileW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateEffectPoolFromFileW_([MarshalAs(UnmanagedType.LPWStr),In] string fileNameRef, SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef, IntPtr includeRef, [MarshalAs(UnmanagedType.LPWStr),In] string profileRef, int hLSLFlags, int fXFlags, IntPtr deviceRef, IntPtr pumpRef, IntPtr effectPoolRef, IntPtr errorsRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create an effect pool from an effect in memory.	
        /// </summary>	
        /// <param name="pData">A pointer to the effect.</param>
        /// <param name="dataLength">The size of the effect.</param>
        /// <param name="srcFileNameRef">The name of the effect file.</param>
        /// <param name="definesRef">A NULL-terminated array of shader macros (see {{D3D10_SHADER_MACRO}}); set this to NULL to specify no macros.</param>
        /// <param name="includeRef">A pointer to an include interface (see <see cref="SlimDX2.D3DCompiler.Include"/>). This parameter can be NULL.</param>
        /// <param name="profileRef">A string that specifies the {{shader profile}}, or shader model.</param>
        /// <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}).</param>
        /// <param name="fXFlags">Effect compile options (see {{Compile and Effect Flags}}).</param>
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resources.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). Use NULL to specify that this function should not return until it is completed.</param>
        /// <param name="effectPoolRef">The address of a pointer to the effect pool (see <see cref="SlimDX2.Direct3D10.EffectPool"/>).</param>
        /// <param name="errorsRef">The address of a pointer to memory (see <see cref="SlimDX2.Direct3D.Blob"/>) that contains effect compile errors, if there were any.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>Returns one of the following {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateEffectPoolFromMemory([None] LPCVOID pData,[None] SIZE_T DataLength,[None] const char* pSrcFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] void* pPump,[None] ID3D10EffectPool** ppEffectPool,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateEffectPoolFromMemory(IntPtr pData, SlimDX2.Size dataLength, string srcFileNameRef, SlimDX2.Direct3D.ShaderMacro[] definesRef, IntPtr includeRef, string profileRef, int hLSLFlags, int fXFlags, SlimDX2.Direct3D10.Device deviceRef, IntPtr pumpRef, SlimDX2.Direct3D10.EffectPool effectPoolRef, SlimDX2.Direct3D.Blob errorsRef, int hResultRef) {
            unsafe {
                SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef_ = ( definesRef == null)? null : new SlimDX2.Direct3D.ShaderMacro.__Native[definesRef.Length];
                if ( definesRef != null) 
                    for(int i = 0; i < definesRef.Length; i++) {
                   	    definesRef_[i] = new SlimDX2.Direct3D.ShaderMacro.__Native();
                   	    definesRef[i].__MarshalTo(ref definesRef_[i]);					
                    }
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateEffectPoolFromMemory_( pData,  dataLength,  srcFileNameRef,  definesRef_,  includeRef,  profileRef,  hLSLFlags,  fXFlags, (deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  pumpRef, (effectPoolRef == null)?IntPtr.Zero:effectPoolRef.NativePointer, (errorsRef == null)?IntPtr.Zero:errorsRef.NativePointer, ref  hResultRef);
                    if ( definesRef != null)
                    for(int i = 0; i < definesRef.Length; i++) {
                       	definesRef_[i].__MarshalFree();
                    }
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateEffectPoolFromMemory([None] LPCVOID pData,[None] SIZE_T DataLength,[None] const char* pSrcFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] void* pPump,[None] ID3D10EffectPool** ppEffectPool,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateEffectPoolFromMemory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateEffectPoolFromMemory_(IntPtr pData, SlimDX2.Size dataLength, [MarshalAs(UnmanagedType.LPStr),In] string srcFileNameRef, SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef, IntPtr includeRef, [MarshalAs(UnmanagedType.LPStr),In] string profileRef, int hLSLFlags, int fXFlags, IntPtr deviceRef, IntPtr pumpRef, IntPtr effectPoolRef, IntPtr errorsRef, ref int hResultRef);		
        
        /// <summary>	
        /// Create an effect pool from a resource.	
        /// </summary>	
        /// <param name="hModule">A handle to the resource module containing the effect. HMODULE can be obtained with {{GetModuleHandle Function}}.</param>
        /// <param name="resourceNameRef">The name of the resource in hModule. If the compiler settings require Unicode, the data type LPCTSTR resolves to LPCWSTR. Otherwise, the data type resolves to LPCSTR.</param>
        /// <param name="srcFileNameRef">Optional. Effect file name, which is used for error messages only. Can be NULL.</param>
        /// <param name="definesRef">A NULL-terminated array of shader macros (see {{D3D10_SHADER_MACRO}}); set this to NULL to specify no macros.</param>
        /// <param name="includeRef">A pointer to an include interface (see <see cref="SlimDX2.D3DCompiler.Include"/>). This parameter can be NULL.</param>
        /// <param name="profileRef">A string that specifies the {{shader profile}}, or shader model.</param>
        /// <param name="hLSLFlags">HLSL compile options (see {{D3D10_SHADER Constants}}).</param>
        /// <param name="fXFlags">Effect compile options (see {{Compile and Effect Flags}}).</param>
        /// <param name="deviceRef">A pointer to the device (see <see cref="SlimDX2.Direct3D10.Device"/>) that will use the resources.</param>
        /// <param name="pumpRef">A pointer to a thread pump interface (see {{ID3DX10ThreadPump Interface}}). Use NULL to specify that this function should not return until it is completed.</param>
        /// <param name="effectPoolRef">The address of a pointer to the effect pool (see <see cref="SlimDX2.Direct3D10.EffectPool"/>).</param>
        /// <param name="errorsRef">The address of a pointer to memory (see <see cref="SlimDX2.Direct3D.Blob"/>) that contains effect compile errors, if there were any.</param>
        /// <param name="hResultRef">A pointer to the return value. May be NULL. If pPump is not NULL, then pHResult must be a valid memory location until the asynchronous execution completes.</param>
        /// <returns>The return value is one of the values listed in {{Direct3D 10 Return Codes}}.</returns>
        /// <unmanaged>HRESULT D3DX10CreateEffectPoolFromResourceW([None] HMODULE hModule,[None] const wchar* pResourceName,[None] const wchar* pSrcFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] void* pPump,[None] ID3D10EffectPool** ppEffectPool,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		public static SlimDX2.Result CreateEffectPoolFromResource(IntPtr hModule, string resourceNameRef, string srcFileNameRef, SlimDX2.Direct3D.ShaderMacro[] definesRef, IntPtr includeRef, string profileRef, int hLSLFlags, int fXFlags, SlimDX2.Direct3D10.Device deviceRef, IntPtr pumpRef, SlimDX2.Direct3D10.EffectPool effectPoolRef, SlimDX2.Direct3D.Blob errorsRef, int hResultRef) {
            unsafe {
                SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef_ = ( definesRef == null)? null : new SlimDX2.Direct3D.ShaderMacro.__Native[definesRef.Length];
                if ( definesRef != null) 
                    for(int i = 0; i < definesRef.Length; i++) {
                   	    definesRef_[i] = new SlimDX2.Direct3D.ShaderMacro.__Native();
                   	    definesRef[i].__MarshalTo(ref definesRef_[i]);					
                    }
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)D3DX10CreateEffectPoolFromResourceW_( hModule,  resourceNameRef,  srcFileNameRef,  definesRef_,  includeRef,  profileRef,  hLSLFlags,  fXFlags, (deviceRef == null)?IntPtr.Zero:deviceRef.NativePointer,  pumpRef, (effectPoolRef == null)?IntPtr.Zero:effectPoolRef.NativePointer, (errorsRef == null)?IntPtr.Zero:errorsRef.NativePointer, ref  hResultRef);
                    if ( definesRef != null)
                    for(int i = 0; i < definesRef.Length; i++) {
                       	definesRef_[i].__MarshalFree();
                    }
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT D3DX10CreateEffectPoolFromResourceW([None] HMODULE hModule,[None] const wchar* pResourceName,[None] const wchar* pSrcFileName,[In, Buffer, Optional] const D3D_SHADER_MACRO* pDefines,[None] ID3D10Include* pInclude,[None] const char* pProfile,[None] UINT HLSLFlags,[None] UINT FXFlags,[None] ID3D10Device* pDevice,[None] void* pPump,[None] ID3D10EffectPool** ppEffectPool,[None] ID3D10Blob** ppErrors,[None] HRESULT* pHResult)</unmanaged>
		[DllImport("d3dx10_43.dll", EntryPoint = "D3DX10CreateEffectPoolFromResourceW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result D3DX10CreateEffectPoolFromResourceW_(IntPtr hModule, [MarshalAs(UnmanagedType.LPWStr),In] string resourceNameRef, [MarshalAs(UnmanagedType.LPWStr),In] string srcFileNameRef, SlimDX2.Direct3D.ShaderMacro.__Native[] definesRef, IntPtr includeRef, [MarshalAs(UnmanagedType.LPWStr),In] string profileRef, int hLSLFlags, int fXFlags, IntPtr deviceRef, IntPtr pumpRef, IntPtr effectPoolRef, IntPtr errorsRef, ref int hResultRef);		
    }
}