// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Structs for SlimDX2.DirectSound namespace.
//     This code was generated by a tool.
//     Date : 11/15/2010 14:52:48
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX2.DirectSound {

    
    /// <summary>	
    /// The DSCAPS structure describes the capabilities of a device. It is used by the {{IDirectSound8::GetCaps}} method.	
    /// </summary>	
    /// <unmanaged>DSCAPS</unmanaged>
    public  partial class Capabilities {	
        
        /// <summary>	
        ///  Size of the structure, in bytes. This member must be initialized before the structure is used. 	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        internal int Size;
        
        /// <summary>	
        ///  Flags describing device capabilities. Can include the values shown in the following table.  Value	
        /// Description	
        ///  DSCAPS_CERTIFIED	
        /// The driver has been tested and certified by Microsoft. This flag is always set for WDM drivers. To test for certification, use <see cref="SlimDX2.DirectSound.DirectSound.VerifyCertification"/>.	
        ///  DSCAPS_CONTINUOUSRATE	
        /// The device supports all sample rates between the dwMinSecondarySampleRate and dwMaxSecondarySampleRate member values. Typically, this means that the actual output rate will be within +/- 10 hertz (Hz) of the requested frequency.	
        ///  DSCAPS_EMULDRIVER	
        /// The device does not have a DirectSound driver installed, so it is being emulated through the waveform-audio functions. Performance degradation should be expected.	
        ///  DSCAPS_PRIMARY16BIT	
        /// The device supports a primary buffer with 16-bit samples.	
        ///  DSCAPS_PRIMARY8BIT	
        /// The device supports primary buffers with 8-bit samples.	
        ///  DSCAPS_PRIMARYMONO	
        /// The device supports monophonic primary buffers.	
        ///  DSCAPS_PRIMARYSTEREO	
        /// The device supports stereo primary buffers.	
        ///  DSCAPS_SECONDARY16BIT	
        /// The device supports hardware-mixed secondary sound buffers with 16-bit samples.	
        ///  DSCAPS_SECONDARY8BIT	
        /// The device supports hardware-mixed secondary buffers with 8-bit samples.	
        ///  DSCAPS_SECONDARYMONO	
        /// The device supports hardware-mixed monophonic secondary buffers.	
        ///  DSCAPS_SECONDARYSTEREO	
        /// The device supports hardware-mixed stereo secondary buffers.	
        ///   	
        /// </summary>	
        /// <unmanaged>int dwFlags</unmanaged>
        public SlimDX2.DirectSound.CapabilitiesFlags Flags;
        
        /// <summary>	
        ///  Minimum and maximum sample rate specifications that are supported by this device's hardware secondary sound buffers. 	
        /// </summary>	
        /// <unmanaged>int dwMinSecondarySampleRate</unmanaged>
        public int MinSecondarySampleRate;
        
        /// <summary>	
        ///  Number of primary buffers supported. This value will always be 1. 	
        /// </summary>	
        /// <unmanaged>int dwMaxSecondarySampleRate</unmanaged>
        public int MaxSecondarySampleRate;
        
        /// <summary>	
        ///  Number of buffers that can be mixed in hardware. This member can be less than the sum of dwMaxHwMixingStaticBuffers and dwMaxHwMixingStreamingBuffers. Resource tradeoffs frequently occur.  	
        /// </summary>	
        /// <unmanaged>int dwPrimaryBuffers</unmanaged>
        public int PrimaryBuffers;
        
        /// <summary>	
        ///  Maximum number of static buffers. 	
        /// </summary>	
        /// <unmanaged>int dwMaxHwMixingAllBuffers</unmanaged>
        public int MaxHardwareMixingAllBuffers;
        
        /// <summary>	
        ///  Maximum number of streaming sound buffers.  	
        /// </summary>	
        /// <unmanaged>int dwMaxHwMixingStaticBuffers</unmanaged>
        public int MaxHardwareMixingStaticBuffers;
        
        /// <summary>	
        ///  Number of unallocated buffers. On WDM drivers, this includes dwFreeHw3DAllBuffers. 	
        /// </summary>	
        /// <unmanaged>int dwMaxHwMixingStreamingBuffers</unmanaged>
        public int MaxHardwareMixingStreamingBuffers;
        
        /// <summary>	
        ///  Number of unallocated static buffers. 	
        /// </summary>	
        /// <unmanaged>int dwFreeHwMixingAllBuffers</unmanaged>
        public int FreeHardwareMixingAllBuffers;
        
        /// <summary>	
        ///  Number of unallocated streaming buffers. 	
        /// </summary>	
        /// <unmanaged>int dwFreeHwMixingStaticBuffers</unmanaged>
        public int FreeHardwareMixingStaticBuffers;
        
        /// <summary>	
        ///  Maximum number of 3D buffers. 	
        /// </summary>	
        /// <unmanaged>int dwFreeHwMixingStreamingBuffers</unmanaged>
        public int FreeHardwareMixingStreamingBuffers;
        
        /// <summary>	
        ///  Maximum number of static 3D buffers. 	
        /// </summary>	
        /// <unmanaged>int dwMaxHw3DAllBuffers</unmanaged>
        public int MaxHardware3DAllBuffers;
        
        /// <summary>	
        ///  Maximum number of streaming 3D buffers. 	
        /// </summary>	
        /// <unmanaged>int dwMaxHw3DStaticBuffers</unmanaged>
        public int MaxHardware3DStaticBuffers;
        
        /// <summary>	
        ///  Number of unallocated 3D buffers. 	
        /// </summary>	
        /// <unmanaged>int dwMaxHw3DStreamingBuffers</unmanaged>
        public int MaxHardware3DStreamingBuffers;
        
        /// <summary>	
        ///  Number of unallocated static 3D buffers. 	
        /// </summary>	
        /// <unmanaged>int dwFreeHw3DAllBuffers</unmanaged>
        public int FreeHardware3DAllBuffers;
        
        /// <summary>	
        ///  Number of unallocated streaming 3D buffers. 	
        /// </summary>	
        /// <unmanaged>int dwFreeHw3DStaticBuffers</unmanaged>
        public int FreeHardware3DStaticBuffers;
        
        /// <summary>	
        ///  Size, in bytes, of the amount of memory on the sound card that stores static sound buffers. 	
        /// </summary>	
        /// <unmanaged>int dwFreeHw3DStreamingBuffers</unmanaged>
        public int FreeHardware3DStreamingBuffers;
        
        /// <summary>	
        ///  Size, in bytes, of the free memory on the sound card. 	
        /// </summary>	
        /// <unmanaged>int dwTotalHwMemBytes</unmanaged>
        public int TotalHardwareMemBytes;
        
        /// <summary>	
        ///  Size, in bytes, of the largest contiguous block of free memory on the sound card. 	
        /// </summary>	
        /// <unmanaged>int dwFreeHwMemBytes</unmanaged>
        public int FreeHardwareMemBytes;
        
        /// <summary>	
        ///  The rate, in kilobytes per second, at which data can be transferred to hardware static sound buffers. This and the number of bytes transferred determines the duration of a call to the {{IDirectSoundBuffer8::Unlock}} method. 	
        /// </summary>	
        /// <unmanaged>int dwMaxContigFreeHwMemBytes</unmanaged>
        public int MaxContigFreeHardwareMemBytes;
        
        /// <summary>	
        ///  The processing overhead, as a percentage of main processor cycles, needed to mix software buffers. This varies according to the bus type, the processor type, and the clock speed. 	
        /// </summary>	
        /// <unmanaged>int dwUnlockTransferRateHwBuffers</unmanaged>
        public int UnlockTransferRateHardwareBuffers;
        
        /// <summary>	
        ///  Not used. 	
        /// </summary>	
        /// <unmanaged>int dwPlayCpuOverheadSwBuffers</unmanaged>
        public int PlayCpuOverheadSwBuffers;
        
        /// <summary>	
        ///  Not used. 	
        /// </summary>	
        /// <unmanaged>int dwReserved1</unmanaged>
        internal int Reserved1;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwReserved2</unmanaged>
        internal int Reserved2;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Size;
            public SlimDX2.DirectSound.CapabilitiesFlags Flags;
            public int MinSecondarySampleRate;
            public int MaxSecondarySampleRate;
            public int PrimaryBuffers;
            public int MaxHardwareMixingAllBuffers;
            public int MaxHardwareMixingStaticBuffers;
            public int MaxHardwareMixingStreamingBuffers;
            public int FreeHardwareMixingAllBuffers;
            public int FreeHardwareMixingStaticBuffers;
            public int FreeHardwareMixingStreamingBuffers;
            public int MaxHardware3DAllBuffers;
            public int MaxHardware3DStaticBuffers;
            public int MaxHardware3DStreamingBuffers;
            public int FreeHardware3DAllBuffers;
            public int FreeHardware3DStaticBuffers;
            public int FreeHardware3DStreamingBuffers;
            public int TotalHardwareMemBytes;
            public int FreeHardwareMemBytes;
            public int MaxContigFreeHardwareMemBytes;
            public int UnlockTransferRateHardwareBuffers;
            public int PlayCpuOverheadSwBuffers;
            public int Reserved1;
            public int Reserved2;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Size = @ref.Size;
            this.Flags = @ref.Flags;
            this.MinSecondarySampleRate = @ref.MinSecondarySampleRate;
            this.MaxSecondarySampleRate = @ref.MaxSecondarySampleRate;
            this.PrimaryBuffers = @ref.PrimaryBuffers;
            this.MaxHardwareMixingAllBuffers = @ref.MaxHardwareMixingAllBuffers;
            this.MaxHardwareMixingStaticBuffers = @ref.MaxHardwareMixingStaticBuffers;
            this.MaxHardwareMixingStreamingBuffers = @ref.MaxHardwareMixingStreamingBuffers;
            this.FreeHardwareMixingAllBuffers = @ref.FreeHardwareMixingAllBuffers;
            this.FreeHardwareMixingStaticBuffers = @ref.FreeHardwareMixingStaticBuffers;
            this.FreeHardwareMixingStreamingBuffers = @ref.FreeHardwareMixingStreamingBuffers;
            this.MaxHardware3DAllBuffers = @ref.MaxHardware3DAllBuffers;
            this.MaxHardware3DStaticBuffers = @ref.MaxHardware3DStaticBuffers;
            this.MaxHardware3DStreamingBuffers = @ref.MaxHardware3DStreamingBuffers;
            this.FreeHardware3DAllBuffers = @ref.FreeHardware3DAllBuffers;
            this.FreeHardware3DStaticBuffers = @ref.FreeHardware3DStaticBuffers;
            this.FreeHardware3DStreamingBuffers = @ref.FreeHardware3DStreamingBuffers;
            this.TotalHardwareMemBytes = @ref.TotalHardwareMemBytes;
            this.FreeHardwareMemBytes = @ref.FreeHardwareMemBytes;
            this.MaxContigFreeHardwareMemBytes = @ref.MaxContigFreeHardwareMemBytes;
            this.UnlockTransferRateHardwareBuffers = @ref.UnlockTransferRateHardwareBuffers;
            this.PlayCpuOverheadSwBuffers = @ref.PlayCpuOverheadSwBuffers;
            this.Reserved1 = @ref.Reserved1;
            this.Reserved2 = @ref.Reserved2;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Size = this.Size;
            @ref.Flags = this.Flags;
            @ref.MinSecondarySampleRate = this.MinSecondarySampleRate;
            @ref.MaxSecondarySampleRate = this.MaxSecondarySampleRate;
            @ref.PrimaryBuffers = this.PrimaryBuffers;
            @ref.MaxHardwareMixingAllBuffers = this.MaxHardwareMixingAllBuffers;
            @ref.MaxHardwareMixingStaticBuffers = this.MaxHardwareMixingStaticBuffers;
            @ref.MaxHardwareMixingStreamingBuffers = this.MaxHardwareMixingStreamingBuffers;
            @ref.FreeHardwareMixingAllBuffers = this.FreeHardwareMixingAllBuffers;
            @ref.FreeHardwareMixingStaticBuffers = this.FreeHardwareMixingStaticBuffers;
            @ref.FreeHardwareMixingStreamingBuffers = this.FreeHardwareMixingStreamingBuffers;
            @ref.MaxHardware3DAllBuffers = this.MaxHardware3DAllBuffers;
            @ref.MaxHardware3DStaticBuffers = this.MaxHardware3DStaticBuffers;
            @ref.MaxHardware3DStreamingBuffers = this.MaxHardware3DStreamingBuffers;
            @ref.FreeHardware3DAllBuffers = this.FreeHardware3DAllBuffers;
            @ref.FreeHardware3DStaticBuffers = this.FreeHardware3DStaticBuffers;
            @ref.FreeHardware3DStreamingBuffers = this.FreeHardware3DStreamingBuffers;
            @ref.TotalHardwareMemBytes = this.TotalHardwareMemBytes;
            @ref.FreeHardwareMemBytes = this.FreeHardwareMemBytes;
            @ref.MaxContigFreeHardwareMemBytes = this.MaxContigFreeHardwareMemBytes;
            @ref.UnlockTransferRateHardwareBuffers = this.UnlockTransferRateHardwareBuffers;
            @ref.PlayCpuOverheadSwBuffers = this.PlayCpuOverheadSwBuffers;
            @ref.Reserved1 = this.Reserved1;
            @ref.Reserved2 = this.Reserved2;
		
		}
    }
    
    /// <summary>	
    /// The DSBCAPS structure describes the capabilities of a DirectSound buffer object. It is used by the {{IDirectSoundBuffer8::GetCaps}} method.	
    /// </summary>	
    /// <unmanaged>DSBCAPS</unmanaged>
    public  partial class BufferCapabilities {	
        
        /// <summary>	
        ///  Size of the structure, in bytes. This member must be initialized before the structure is used. 	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        internal int Size;
        
        /// <summary>	
        ///  Flags that specify buffer-object capabilities. Use one or more of the values shown in the following table.  Value	
        /// Description	
        ///  DSBCAPS_CTRL3D	
        /// The buffer has 3D control capability.	
        ///  DSBCAPS_CTRLFREQUENCY	
        /// The buffer has frequency control capability.	
        ///  DSBCAPS_CTRLFX	
        /// The buffer supports effects processing.	
        ///  DSBCAPS_CTRLPAN	
        /// The buffer has pan control capability.	
        ///  DSBCAPS_CTRLVOLUME	
        /// The buffer has volume control capability.	
        ///  DSBCAPS_CTRLPOSITIONNOTIFY	
        /// The buffer has position notification capability. See the Remarks for <see cref="SlimDX2.DirectSound.CaptureBufferDescription"/>.	
        ///  DSBCAPS_GETCURRENTPOSITION2	
        /// The buffer uses the new behavior of the play cursor when {{IDirectSoundBuffer8::GetCurrentPosition}} is called. In the first version of DirectSound, the play cursor was significantly ahead of the actual playing sound on emulated sound cards; it was directly behind the write cursor. Now, if the DSBCAPS_GETCURRENTPOSITION2 flag is specified, the application can get a more accurate play cursor. If this flag is not specified, the old behavior is preserved for compatibility. This flag affects only emulated devices; if a DirectSound driver is present, the play cursor is accurate for DirectSound in all versions of DirectX.	
        ///  DSBCAPS_GLOBALFOCUS	
        /// The buffer is a global sound buffer. With this flag set, an application using DirectSound can continue to play its buffers if the user switches focus to another application, even if the new application uses DirectSound. The one exception is if you switch focus to a DirectSound application that uses the DSSCL_WRITEPRIMARY flag for its cooperative level. In this case, the global sounds from other applications will not be audible.	
        ///  DSBCAPS_LOCDEFER	
        /// The buffer can be assigned to a hardware or software resource at play time, or when <see cref="SlimDX2.DirectSound.SecondarySoundBuffer.AcquireResources"/> is called.	
        ///  DSBCAPS_LOCHARDWARE	
        /// The buffer uses hardware mixing.	
        ///  DSBCAPS_LOCSOFTWARE	
        /// The buffer is in software memory and uses software mixing.	
        ///  DSBCAPS_MUTE3DATMAXDISTANCE	
        /// The sound is reduced to silence at the maximum distance. The buffer will stop playing when the maximum distance is exceeded, so that processor time is not wasted. Applies only to software buffers.	
        ///  DSBCAPS_PRIMARYBUFFER	
        /// The buffer is a primary buffer.	
        ///  DSBCAPS_STATIC	
        /// The buffer is in on-board hardware memory.	
        ///  DSBCAPS_STICKYFOCUS	
        /// The buffer has sticky focus. If the user switches to another application not using DirectSound, the buffer is still audible. However, if the user switches to another DirectSound application, the buffer is muted.	
        ///  DSBCAPS_TRUEPLAYPOSITION	
        /// Force {{IDirectSoundBuffer8::GetCurrentPosition}} to return the buffer's true play position. This flag is only valid in Windows Vista.	
        ///   	
        /// </summary>	
        /// <unmanaged>int dwFlags</unmanaged>
        public SlimDX2.DirectSound.BufferFlags Flags;
        
        /// <summary>	
        ///  Size of this buffer, in bytes. 	
        /// </summary>	
        /// <unmanaged>int dwBufferBytes</unmanaged>
        public int BufferBytes;
        
        /// <summary>	
        ///  The rate, in kilobytes per second, at which data is transferred to the buffer memory when {{IDirectSoundBuffer8::Unlock}} is called. High-performance applications can use this value to determine the time required for IDirectSoundBuffer8::Unlock to execute. For software buffers located in system memory, the rate will be very high because no processing is required. For hardware buffers, the rate might be slower because the buffer might have to be downloaded to the sound card, which might have a limited transfer rate. 	
        /// </summary>	
        /// <unmanaged>int dwUnlockTransferRate</unmanaged>
        public int UnlockTransferRate;
        
        /// <summary>	
        ///  The processing overhead as a percentage of main processor cycles needed to mix this sound buffer. For hardware buffers, this member will be zero because the mixing is performed by the sound device. For software buffers, this member depends on the buffer format and the speed of the system processor. 	
        /// </summary>	
        /// <unmanaged>int dwPlayCpuOverhead</unmanaged>
        public int PlayCpuOverhead;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Size;
            public SlimDX2.DirectSound.BufferFlags Flags;
            public int BufferBytes;
            public int UnlockTransferRate;
            public int PlayCpuOverhead;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Size = @ref.Size;
            this.Flags = @ref.Flags;
            this.BufferBytes = @ref.BufferBytes;
            this.UnlockTransferRate = @ref.UnlockTransferRate;
            this.PlayCpuOverhead = @ref.PlayCpuOverhead;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Size = this.Size;
            @ref.Flags = this.Flags;
            @ref.BufferBytes = this.BufferBytes;
            @ref.UnlockTransferRate = this.UnlockTransferRate;
            @ref.PlayCpuOverhead = this.PlayCpuOverhead;
		
		}
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSEFFECTDESC</unmanaged>
    public  partial class SoundBufferEffectDescription {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        internal int Size;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwFlags</unmanaged>
        public int Flags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>GUID guidDSFXClass</unmanaged>
        public Guid idDSFXClass;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int* dwReserved1</unmanaged>
        internal IntPtr Reserved1;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int* dwReserved2</unmanaged>
        internal IntPtr Reserved2;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Size;
            public int Flags;
            public Guid idDSFXClass;
            public IntPtr Reserved1;
            public IntPtr Reserved2;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Size = @ref.Size;
            this.Flags = @ref.Flags;
            this.idDSFXClass = @ref.idDSFXClass;
            this.Reserved1 = @ref.Reserved1;
            this.Reserved2 = @ref.Reserved2;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Size = this.Size;
            @ref.Flags = this.Flags;
            @ref.idDSFXClass = this.idDSFXClass;
            @ref.Reserved1 = this.Reserved1;
            @ref.Reserved2 = this.Reserved2;
		
		}
    }
    
    /// <summary>	
    /// The DSCEFFECTDESC structure contains parameters for an effect associated with a capture buffer.	
    /// </summary>	
    /// <unmanaged>DSCEFFECTDESC</unmanaged>
    public  partial class CaptureEffectDescription {	
        
        /// <summary>	
        ///  Size of the structure, in bytes. 	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        internal int Size;
        
        /// <summary>	
        ///  Flags that specify desired parameters of the effect. When this structure is passed to {{DirectSoundFullDuplexCreate8}}, or {{IDirectSoundCapture8::CreateCaptureBuffer}}, this member must be one of the values shown in the following table.	
        ///  Value	
        /// Description	
        ///  DSCFX_LOCHARDWARE	
        /// Effect specified by guidDSCFXInstance must be in hardware.	
        ///  DSCFX_LOCSOFTWARE	
        /// Effect specified by guidDSCFXInstance must be in software.	
        ///   On return, this member can contain one of the values shown in the following table.  Value	
        /// Description	
        ///  DSCFX_LOCHARDWARE	
        /// Effect was created in hardware.	
        ///  DSCFX_LOCSOFTWARE	
        /// Effect was created in software.	
        ///   	
        /// </summary>	
        /// <unmanaged>int dwFlags</unmanaged>
        public SlimDX2.DirectSound.CaptureEffectResult Flags;
        
        /// <summary>	
        ///  Value of type GUID that specifies the class identifier of the effect. The following standard identifiers are defined.	
        ///  Value	
        /// Description	
        ///  GUID_DSCFX_CLASS_AEC	
        /// Acoustic echo cancellation.	
        ///  GUID_DSCFX_CLASS_NS	
        /// Noise suppression.	
        ///   	
        /// </summary>	
        /// <unmanaged>GUID guidDSCFXClass</unmanaged>
        public Guid idDSCFXClass;
        
        /// <summary>	
        ///  Value of type GUID that specifies the unique identifier of the preferred effect. The following standard identifiers are defined.	
        ///  Value	
        /// Description	
        ///  GUID_DSCFX_MS_AEC	
        /// Microsoft acoustic echo cancellation. Available in software only.	
        ///  GUID_DSCFX_MS_NS	
        /// Microsoft noise suppression. Available in software only.	
        ///  GUID_DSCFX_SYSTEM_AEC	
        /// System default acoustic echo cancellation.	
        ///  GUID_DSCFX_SYSTEM_NS	
        /// System default noise suppression.	
        ///   	
        /// </summary>	
        /// <unmanaged>GUID guidDSCFXInstance</unmanaged>
        public Guid idDSCFXInstance;
        
        /// <summary>	
        ///  Reserved. Must be zero. 	
        /// </summary>	
        /// <unmanaged>int dwReserved1</unmanaged>
        internal int Reserved1;
        
        /// <summary>	
        ///  Reserved. Must be zero. 	
        /// </summary>	
        /// <unmanaged>int dwReserved2</unmanaged>
        internal int Reserved2;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Size;
            public SlimDX2.DirectSound.CaptureEffectResult Flags;
            public Guid idDSCFXClass;
            public Guid idDSCFXInstance;
            public int Reserved1;
            public int Reserved2;
        }
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Size = @ref.Size;
            this.Flags = @ref.Flags;
            this.idDSCFXClass = @ref.idDSCFXClass;
            this.idDSCFXInstance = @ref.idDSCFXInstance;
            this.Reserved1 = @ref.Reserved1;
            this.Reserved2 = @ref.Reserved2;
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSBUFFERDESC</unmanaged>
    public  partial class SoundBufferDescription {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        internal int Size;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwFlags</unmanaged>
        public SlimDX2.DirectSound.BufferFlags Flags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwBufferBytes</unmanaged>
        public int BufferBytes;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwReserved</unmanaged>
        internal int Reserved;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>WAVEFORMATEX* lpwfxFormat</unmanaged>
        internal IntPtr pFormat;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>GUID guid3DAlgorithm</unmanaged>
        public Guid AlgorithmFor3D;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Size;
            public SlimDX2.DirectSound.BufferFlags Flags;
            public int BufferBytes;
            public int Reserved;
            public IntPtr pFormat;
            public Guid AlgorithmFor3D;
        }
    }
    
    /// <summary>	
    /// The DS3DBUFFER structure contains all information necessary to uniquely describe the location, orientation, and motion of a 3D sound buffer. This structure is used with the {{IDirectSound3DBuffer8::GetAllParameters}} and {{IDirectSound3DBuffer8::SetAllParameters}} methods.	
    /// </summary>	
    /// <unmanaged>DS3DBUFFER</unmanaged>
    public  partial class Buffer3DSettings {	
        
        /// <summary>	
        ///  Size of the structure, in bytes. This member must be initialized before the structure is used. 	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        internal int Size;
        
        /// <summary>	
        ///  A <see cref="SlimMath.Vector3"/> structure that describes the current position of the 3D sound buffer. 	
        /// </summary>	
        /// <unmanaged>D3DVECTOR vPosition</unmanaged>
        public SlimMath.Vector3 Position;
        
        /// <summary>	
        ///  A D3DVECTOR structure that describes the current velocity of the 3D sound buffer. 	
        /// </summary>	
        /// <unmanaged>D3DVECTOR vVelocity</unmanaged>
        public SlimMath.Vector3 Velocity;
        
        /// <summary>	
        ///  The angle of the inside sound projection cone. 	
        /// </summary>	
        /// <unmanaged>int dwInsideConeAngle</unmanaged>
        public int InsideConeAngle;
        
        /// <summary>	
        ///  The angle of the outside sound projection cone. 	
        /// </summary>	
        /// <unmanaged>int dwOutsideConeAngle</unmanaged>
        public int OutsideConeAngle;
        
        /// <summary>	
        ///  A D3DVECTOR structure that describes the current orientation of this 3D buffer's sound projection cone. 	
        /// </summary>	
        /// <unmanaged>D3DVECTOR vConeOrientation</unmanaged>
        public SlimMath.Vector3 ConeOrientation;
        
        /// <summary>	
        ///  The cone outside volume. 	
        /// </summary>	
        /// <unmanaged>int lConeOutsideVolume</unmanaged>
        public int ConeOutsideVolume;
        
        /// <summary>	
        ///  The minimum distance. 	
        /// </summary>	
        /// <unmanaged>D3DVALUE flMinDistance</unmanaged>
        public float MinDistance;
        
        /// <summary>	
        ///  The maximum distance. 	
        /// </summary>	
        /// <unmanaged>D3DVALUE flMaxDistance</unmanaged>
        public float MaxDistance;
        
        /// <summary>	
        ///  The 3D sound processing mode to be set. This value must be one of the values shown in the following table.  Value	
        /// Description	
        ///  DS3DMODE_DISABLE	
        /// 3D sound processing is disabled. The sound will appear to originate from the center of the listener's head.	
        ///  DS3DMODE_HEADRELATIVE	
        /// Sound parameters (position, velocity, and orientation) are relative to the listener's parameters. In this mode, the absolute parameters of the sound are updated automatically as the listener's parameters change, so that the relative parameters remain constant. In other words, the sound moves with the listener.	
        ///  DS3DMODE_NORMAL	
        /// Default. The parameters of the sound are relative to world space.	
        ///   	
        /// </summary>	
        /// <unmanaged>int dwMode</unmanaged>
        public int Mode;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Size;
            public SlimMath.Vector3 Position;
            public SlimMath.Vector3 Velocity;
            public int InsideConeAngle;
            public int OutsideConeAngle;
            public SlimMath.Vector3 ConeOrientation;
            public int ConeOutsideVolume;
            public float MinDistance;
            public float MaxDistance;
            public int Mode;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Size = @ref.Size;
            this.Position = @ref.Position;
            this.Velocity = @ref.Velocity;
            this.InsideConeAngle = @ref.InsideConeAngle;
            this.OutsideConeAngle = @ref.OutsideConeAngle;
            this.ConeOrientation = @ref.ConeOrientation;
            this.ConeOutsideVolume = @ref.ConeOutsideVolume;
            this.MinDistance = @ref.MinDistance;
            this.MaxDistance = @ref.MaxDistance;
            this.Mode = @ref.Mode;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Size = this.Size;
            @ref.Position = this.Position;
            @ref.Velocity = this.Velocity;
            @ref.InsideConeAngle = this.InsideConeAngle;
            @ref.OutsideConeAngle = this.OutsideConeAngle;
            @ref.ConeOrientation = this.ConeOrientation;
            @ref.ConeOutsideVolume = this.ConeOutsideVolume;
            @ref.MinDistance = this.MinDistance;
            @ref.MaxDistance = this.MaxDistance;
            @ref.Mode = this.Mode;
		
		}
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DS3DLISTENER</unmanaged>
    public  partial class Listener3DSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        internal int Size;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DVECTOR vPosition</unmanaged>
        public SlimMath.Vector3 Position;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DVECTOR vVelocity</unmanaged>
        public SlimMath.Vector3 Velocity;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DVECTOR vOrientFront</unmanaged>
        public SlimMath.Vector3 OrientFront;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DVECTOR vOrientTop</unmanaged>
        public SlimMath.Vector3 OrientTop;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DVALUE flDistanceFactor</unmanaged>
        public float DistanceFactor;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DVALUE flRolloffFactor</unmanaged>
        public float RolloffFactor;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DVALUE flDopplerFactor</unmanaged>
        public float DopplerFactor;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Size;
            public SlimMath.Vector3 Position;
            public SlimMath.Vector3 Velocity;
            public SlimMath.Vector3 OrientFront;
            public SlimMath.Vector3 OrientTop;
            public float DistanceFactor;
            public float RolloffFactor;
            public float DopplerFactor;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Size = @ref.Size;
            this.Position = @ref.Position;
            this.Velocity = @ref.Velocity;
            this.OrientFront = @ref.OrientFront;
            this.OrientTop = @ref.OrientTop;
            this.DistanceFactor = @ref.DistanceFactor;
            this.RolloffFactor = @ref.RolloffFactor;
            this.DopplerFactor = @ref.DopplerFactor;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Size = this.Size;
            @ref.Position = this.Position;
            @ref.Velocity = this.Velocity;
            @ref.OrientFront = this.OrientFront;
            @ref.OrientTop = this.OrientTop;
            @ref.DistanceFactor = this.DistanceFactor;
            @ref.RolloffFactor = this.RolloffFactor;
            @ref.DopplerFactor = this.DopplerFactor;
		
		}
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSCCAPS</unmanaged>
    public  partial class CaptureCapabilities {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        internal int Size;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwFlags</unmanaged>
        public int Flags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwFormats</unmanaged>
        public int Formats;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwChannels</unmanaged>
        public int Channels;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Size;
            public int Flags;
            public int Formats;
            public int Channels;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Size = @ref.Size;
            this.Flags = @ref.Flags;
            this.Formats = @ref.Formats;
            this.Channels = @ref.Channels;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Size = this.Size;
            @ref.Flags = this.Flags;
            @ref.Formats = this.Formats;
            @ref.Channels = this.Channels;
		
		}
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSCBUFFERDESC</unmanaged>
    public  partial class CaptureBufferDescription {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        internal int Size;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwFlags</unmanaged>
        public SlimDX2.DirectSound.CaptureBufferCapabilitiesFlags Flags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwBufferBytes</unmanaged>
        public int BufferBytes;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwReserved</unmanaged>
        internal int Reserved;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>WAVEFORMATEX* lpwfxFormat</unmanaged>
        public IntPtr wfxFormat;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwFXCount</unmanaged>
        public int FXCount;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>LPDSCEFFECTDESC lpDSCFXDesc</unmanaged>
        public IntPtr DSCFXDesc;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Size;
            public SlimDX2.DirectSound.CaptureBufferCapabilitiesFlags Flags;
            public int BufferBytes;
            public int Reserved;
            public IntPtr wfxFormat;
            public int FXCount;
            public IntPtr DSCFXDesc;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Size = @ref.Size;
            this.Flags = @ref.Flags;
            this.BufferBytes = @ref.BufferBytes;
            this.Reserved = @ref.Reserved;
            this.wfxFormat = @ref.wfxFormat;
            this.FXCount = @ref.FXCount;
            this.DSCFXDesc = @ref.DSCFXDesc;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Size = this.Size;
            @ref.Flags = this.Flags;
            @ref.BufferBytes = this.BufferBytes;
            @ref.Reserved = this.Reserved;
            @ref.wfxFormat = this.wfxFormat;
            @ref.FXCount = this.FXCount;
            @ref.DSCFXDesc = this.DSCFXDesc;
		
		}
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSCBCAPS</unmanaged>
    public  partial class CaptureBufferCapabilities {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        internal int Size;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwFlags</unmanaged>
        public SlimDX2.DirectSound.CaptureBufferCapabilitiesFlags Flags;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwBufferBytes</unmanaged>
        public int BufferBytes;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwReserved</unmanaged>
        internal int Reserved;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int Size;
            public SlimDX2.DirectSound.CaptureBufferCapabilitiesFlags Flags;
            public int BufferBytes;
            public int Reserved;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Size = @ref.Size;
            this.Flags = @ref.Flags;
            this.BufferBytes = @ref.BufferBytes;
            this.Reserved = @ref.Reserved;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Size = this.Size;
            @ref.Flags = this.Flags;
            @ref.BufferBytes = this.BufferBytes;
            @ref.Reserved = this.Reserved;
		
		}
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSBPOSITIONNOTIFY</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct NotificationPosition {	
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSFXGargle</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct GargleSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwRateHz</unmanaged>
        public int RateHz;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwWaveShape</unmanaged>
        public int WaveShape;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSFXChorus</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct ChorusSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fWetDryMix</unmanaged>
        public float WetDryMix;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fDepth</unmanaged>
        public float Depth;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fFeedback</unmanaged>
        public float Feedback;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fFrequency</unmanaged>
        public float Frequency;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int lWaveform</unmanaged>
        public int Waveform;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fDelay</unmanaged>
        public float Delay;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int lPhase</unmanaged>
        public int Phase;
    }
    
    /// <summary>	
    /// The DSFXFlanger structure contains parameters for a flange effect.	
    /// </summary>	
    /// <unmanaged>DSFXFlanger</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct FlangerSettings {	
        
        /// <summary>	
        ///  Ratio of wet (processed) signal to dry (unprocessed) signal. Must be in the range from DSFXFLANGER_WETDRYMIX_MIN through DSFXFLANGER_WETDRYMIX_MAX (all wet). The default value is 50. 	
        /// </summary>	
        /// <unmanaged>float fWetDryMix</unmanaged>
        public float WetDryMix;
        
        /// <summary>	
        ///  Percentage by which the delay time is modulated by the low-frequency oscillator (LFO), in hundredths of a percentage point. Must be in the range from DSFXFLANGER_DEPTH_MIN through DSFXFLANGER_DEPTH_MAX. The default value is 100. 	
        /// </summary>	
        /// <unmanaged>float fDepth</unmanaged>
        public float Depth;
        
        /// <summary>	
        ///  Percentage of output signal to feed back into the effect's input, in the range from DSFXFLANGER_FEEDBACK_MIN to DSFXFLANGER_FEEDBACK_MAX. The default value is -50. 	
        /// </summary>	
        /// <unmanaged>float fFeedback</unmanaged>
        public float Feedback;
        
        /// <summary>	
        ///  Frequency of the LFO, in the range from DSFXFLANGER_FREQUENCY_MIN to DSFXFLANGER_FREQUENCY_MAX. The default value is 0.25. 	
        /// </summary>	
        /// <unmanaged>float fFrequency</unmanaged>
        public float Frequency;
        
        /// <summary>	
        ///  Waveform shape of the LFO. By default, the waveform is a sine. Possible values are defined in the following table.	
        ///  Value	
        /// Description	
        ///  DSFXFLANGER_WAVE_TRIANGLE	
        /// Triangle.	
        ///  DSFXFLANGER_WAVE_SIN	
        /// Sine.	
        ///   	
        /// </summary>	
        /// <unmanaged>int lWaveform</unmanaged>
        public int Waveform;
        
        /// <summary>	
        ///  Number of milliseconds the input is delayed before it is played back, in the range from DSFXFLANGER_DELAY_MIN to DSFXFLANGER_DELAY_MAX. The default value is 2 ms. 	
        /// </summary>	
        /// <unmanaged>float fDelay</unmanaged>
        public float Delay;
        
        /// <summary>	
        ///  Phase differential between left and right LFOs, in the range from DSFXFLANGER_PHASE_MIN through DSFXFLANGER_PHASE_MAX. Possible values are defined in the following table.	
        ///  Value	
        ///  DSFXFLANGER_PHASE_NEG_180	
        ///  DSFXFLANGER_PHASE_NEG_90	
        ///  DSFXFLANGER_PHASE_ZERO	
        ///  DSFXFLANGER_PHASE_90	
        ///  DSFXFLANGER_PHASE_180	
        ///   The default value is DSFXFLANGER_PHASE_ZERO. 	
        /// </summary>	
        /// <unmanaged>int lPhase</unmanaged>
        public int Phase;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSFXEcho</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct EchoSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fWetDryMix</unmanaged>
        public float WetDryMix;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fFeedback</unmanaged>
        public float Feedback;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fLeftDelay</unmanaged>
        public float LeftDelay;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fRightDelay</unmanaged>
        public float RightDelay;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int lPanDelay</unmanaged>
        public int PanDelay;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSFXDistortion</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct DistortionSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fGain</unmanaged>
        public float Gain;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fEdge</unmanaged>
        public float Edge;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fPostEQCenterFrequency</unmanaged>
        public float PostEQCenterFrequency;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fPostEQBandwidth</unmanaged>
        public float PostEQBandwidth;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fPreLowpassCutoff</unmanaged>
        public float PreLowpassCutoff;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSFXCompressor</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct CompressorSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fGain</unmanaged>
        public float Gain;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fAttack</unmanaged>
        public float Attack;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fRelease</unmanaged>
        public float Release;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fThreshold</unmanaged>
        public float Threshold;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fRatio</unmanaged>
        public float Ratio;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fPredelay</unmanaged>
        public float Predelay;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSFXParamEq</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct ParamEqSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fCenter</unmanaged>
        public float Center;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fBandwidth</unmanaged>
        public float Bandwidth;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fGain</unmanaged>
        public float Gain;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSFXI3DL2Reverb</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct I3DL2ReverbSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int lRoom</unmanaged>
        public int Room;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int lRoomHF</unmanaged>
        public int RoomHF;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float flRoomRolloffFactor</unmanaged>
        public float RoomRolloffFactor;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float flDecayTime</unmanaged>
        public float DecayTime;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float flDecayHFRatio</unmanaged>
        public float DecayHFRatio;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int lReflections</unmanaged>
        public int Reflections;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float flReflectionsDelay</unmanaged>
        public float ReflectionsDelay;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int lReverb</unmanaged>
        public int Reverb;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float flReverbDelay</unmanaged>
        public float ReverbDelay;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float flDiffusion</unmanaged>
        public float Diffusion;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float flDensity</unmanaged>
        public float Density;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float flHFReference</unmanaged>
        public float HFReference;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSFXWavesReverb</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct WavesReverbSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fInGain</unmanaged>
        public float InGain;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fReverbMix</unmanaged>
        public float ReverbMix;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fReverbTime</unmanaged>
        public float ReverbTime;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float fHighFreqRTRatio</unmanaged>
        public float HighFreqRTRatio;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSCFXAec</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct AcousticEchoCancelSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>BOOL fEnable</unmanaged>
        public bool Enable { 
            get { 
                return (_Enable!=0)?true:false; 
            }
            set { 
                _Enable = value?1:0;
            }
        }
        internal int _Enable;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>BOOL fNoiseFill</unmanaged>
        public bool NoiseFill { 
            get { 
                return (_NoiseFill!=0)?true:false; 
            }
            set { 
                _NoiseFill = value?1:0;
            }
        }
        internal int _NoiseFill;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int dwMode</unmanaged>
        public int Mode;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DSCFXNoiseSuppress</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct NoiseSuppressSettings {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>BOOL fEnable</unmanaged>
        public bool Enable { 
            get { 
                return (_Enable!=0)?true:false; 
            }
            set { 
                _Enable = value?1:0;
            }
        }
        internal int _Enable;
    }
}
