// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Interfaces for SlimDX2.DirectSound namespace.
//     This code was generated by a tool.
//     Date : 11/14/2010 00:36:11
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX2.DirectSound {

    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSound</unmanaged>
    [Guid("279afa83-4981-11ce-a521-0020af0be560")]
    public partial class DirectSoundBase : SlimDX2.ComObject {
        public DirectSoundBase(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetCaps method retrieves the capabilities of the hardware device that is represented by the device object.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSound::GetCaps([Out] LPDSCAPS pDSCaps)</unmanaged>
        public SlimDX2.DirectSound.Capabilities Capabilities {
                get { SlimDX2.DirectSound.Capabilities __output__; GetCapabilities(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// The GetSpeakerConfig method retrieves the speaker configuration.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSound::GetSpeakerConfig([Out] int* pdwSpeakerConfig)</unmanaged>
        public int SpeakerConfig {
                get { int __output__; GetSpeakerConfig(out __output__); return __output__; }
                set { SetSpeakerConfig(value); }
        }
        
        /// <summary>	
        /// The CreateSoundBuffer method creates a sound buffer object to manage audio samples.	
        /// </summary>	
        /// <param name="pcDSBufferDesc"> Address of a <see cref="SlimDX2.DirectSound.SoundBufferDescription"/> structure that describes the sound buffer to create. </param>
        /// <param name="dSBufferRef"> Address of a variable that receives the IDirectSoundBuffer interface of the new buffer object. Use QueryInterface to obtain <see cref="SlimDX2.DirectSound.SecondarySoundBuffer"/>. IDirectSoundBuffer8 is not available for the primary buffer. </param>
        /// <param name="unkOuterRef"> Address of the controlling object's IUnknown interface for COM aggregation. Must be NULL. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound::CreateSoundBuffer([In] LPCDSBUFFERDESC pcDSBufferDesc,[Out] LPDIRECTSOUNDBUFFER* ppDSBuffer,[None] IUnknown* pUnkOuter)</unmanaged>
        internal SlimDX2.Result CreateSoundBuffer(ref SlimDX2.DirectSound.SoundBufferDescription pcDSBufferDesc, out IntPtr dSBufferRef, SlimDX2.ComObject unkOuterRef) {
            unsafe {
                SlimDX2.DirectSound.SoundBufferDescription.__Native pcDSBufferDesc_ = SlimDX2.DirectSound.SoundBufferDescription.__NewNative();
                pcDSBufferDesc.__MarshalTo(ref pcDSBufferDesc_);
                SlimDX2.Result __result__;
                fixed (void* dSBufferRef_ = &dSBufferRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pcDSBufferDesc_, dSBufferRef_, (void*)((unkOuterRef == null)?IntPtr.Zero:unkOuterRef.NativePointer));
                pcDSBufferDesc_.__MarshalFree();
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetCaps method retrieves the capabilities of the hardware device that is represented by the device object.	
        /// </summary>	
        /// <param name="pDSCaps"> Address of a <see cref="SlimDX2.DirectSound.Capabilities"/> structure that receives the capabilities of this sound device. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound::GetCaps([Out] LPDSCAPS pDSCaps)</unmanaged>
        internal SlimDX2.Result GetCapabilities(out SlimDX2.DirectSound.Capabilities pDSCaps) {
            unsafe {
                SlimDX2.DirectSound.Capabilities.__Native pDSCaps_ = SlimDX2.DirectSound.Capabilities.__NewNative();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, &pDSCaps_);
                pDSCaps = new SlimDX2.DirectSound.Capabilities();
                pDSCaps.__MarshalFrom(ref pDSCaps_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The DuplicateSoundBuffer method creates a new secondary buffer that shares the original buffer's memory.	
        /// </summary>	
        /// <param name="pDSBufferOriginal"> Address of the IDirectSoundBuffer or <see cref="SlimDX2.DirectSound.SecondarySoundBuffer"/> interface of the buffer to duplicate. </param>
        /// <param name="dSBufferDuplicateRef"> Address of a variable that receives the IDirectSoundBuffer interface pointer for the new buffer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound::DuplicateSoundBuffer([In] LPDIRECTSOUNDBUFFER pDSBufferOriginal,[Out] LPDIRECTSOUNDBUFFER* ppDSBufferDuplicate)</unmanaged>
        internal SlimDX2.Result DuplicateSoundBuffer(SlimDX2.DirectSound.SoundBuffer pDSBufferOriginal, out IntPtr dSBufferDuplicateRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* dSBufferDuplicateRef_ = &dSBufferDuplicateRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 5 * 4, (void*)((pDSBufferOriginal == null)?IntPtr.Zero:pDSBufferOriginal.NativePointer), dSBufferDuplicateRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetCooperativeLevel method sets the cooperative level of the application for this sound device.	
        /// </summary>	
        /// <param name="hwnd"> Handle to the application window. </param>
        /// <param name="level"> Requested level. Specify one of the values shown in the following table.  ValueDescription DSSCL_EXCLUSIVEFor DirectX 8.0 and later, has the same effect as DSSCL_PRIORITY. For previous versions, sets the application to the exclusive level. This means that when it has the input focus, the application will be the only one audible; sounds from applications with the DSBCAPS_GLOBALFOCUS flag set will be muted. With this level, it also has all the privileges of the DSSCL_PRIORITY level. DirectSound will restore the hardware format, as specified by the most recent call to the {{SetFormat}} method, after the application gains the input focus. DSSCL_NORMALSets the normal level. This level has the smoothest multitasking and resource-sharing behavior, but because it does not allow the primary buffer format to change, output is restricted to the default 8-bit format. DSSCL_PRIORITYSets the priority level. Applications with this cooperative level can call the {{SetFormat}} and {{Compact}} methods. DSSCL_WRITEPRIMARYSets the write-primary level. The application has write access to the primary buffer. No secondary buffers can be played. This level cannot be set if the DirectSound driver is being emulated for the device; that is, if the {{GetCaps}} method returns the DSCAPS_EMULDRIVER flag in the <see cref="SlimDX2.DirectSound.Capabilities"/> structure.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound::SetCooperativeLevel([None] HWND hwnd,[None] int dwLevel)</unmanaged>
        public SlimDX2.Result SetCooperativeLevel(IntPtr hwnd, SlimDX2.DirectSound.CooperativeLevel level) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 6 * 4, (void*)hwnd, unchecked((int)level));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Compact method has no effect.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound::Compact()</unmanaged>
        public SlimDX2.Result Compact() {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 7 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetSpeakerConfig method retrieves the speaker configuration.	
        /// </summary>	
        /// <param name="speakerConfig"> Address of the speaker configuration (see remarks in {{IDirectSound8::SetSpeakerConfig}}). </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound::GetSpeakerConfig([Out] int* pdwSpeakerConfig)</unmanaged>
        internal SlimDX2.Result GetSpeakerConfig(out int speakerConfig) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* speakerConfig_ = &speakerConfig)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 8 * 4, speakerConfig_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetSpeakerConfig method specifies the speaker configuration of the device.	
        /// </summary>	
        /// <param name="speakerConfig"> The speaker configuration. See remarks. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound::SetSpeakerConfig([None] int dwSpeakerConfig)</unmanaged>
        internal SlimDX2.Result SetSpeakerConfig(int speakerConfig) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 9 * 4, speakerConfig);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Initialize method initializes a device object that was created by using the CoCreateInstance function.	
        /// </summary>	
        /// <param name="pcGuidDevice"> Address of the globally unique identifier (GUID) specifying the sound driver to which this device object binds. Pass NULL to select the primary sound driver. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound::Initialize([In, Optional] LPCGUID pcGuidDevice)</unmanaged>
        public SlimDX2.Result Initialize(Guid? pcGuidDevice) {
            unsafe {
                Guid pcGuidDevice_;
                if (pcGuidDevice.HasValue)
                    pcGuidDevice_ = pcGuidDevice.Value;				
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 10 * 4, (pcGuidDevice.HasValue)?&pcGuidDevice_:(void*)IntPtr.Zero);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSound8</unmanaged>
    [Guid("c50a7e93-f395-4834-9ef6-7fa99de50966")]
    public partial class DirectSound : SlimDX2.DirectSound.DirectSoundBase {
        public DirectSound(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The VerifyCertification method ascertains whether the device driver is certified for DirectX.	
        /// </summary>	
        /// <param name="certified"> Address of a DWORD variable that receives one of the values shown in the following table. ValueDescription DS_CERTIFIEDDriver is certified for DirectSound. DS_UNCERTIFIEDDriver is not certified for DirectSound.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound8::VerifyCertification([Out] int* pdwCertified)</unmanaged>
        internal SlimDX2.Result VerifyCertification(out int certified) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* certified_ = &certified)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 11 * 4, certified_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundBuffer</unmanaged>
    [Guid("279afa85-4981-11ce-a521-0020af0be560")]
    public abstract partial class SoundBuffer : SlimDX2.ComObject {
        public SoundBuffer(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetCaps method retrieves the capabilities of the buffer object.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetCaps([Out] LPDSBCAPS pDSBufferCaps)</unmanaged>
        public SlimDX2.DirectSound.BufferCapabilities Capabilities {
                get { SlimDX2.DirectSound.BufferCapabilities __output__; GetCapabilities(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// The GetVolume method retrieves the attenuation of the sound.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetVolume([Out] LONG* plVolume)</unmanaged>
        public int Volume {
                get { int __output__; GetVolume(out __output__); return __output__; }
                set { SetVolume(value); }
        }
        
        /// <summary>	
        /// The GetPan method retrieves the relative volume of the left and right audio channels.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetPan([Out] LONG* plPan)</unmanaged>
        public int Pan {
                get { int __output__; GetPan(out __output__); return __output__; }
                set { SetPan(value); }
        }
        
        /// <summary>	
        /// The GetFrequency method retrieves the frequency, in samples per second, at which the buffer is playing.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetFrequency([Out] int* pdwFrequency)</unmanaged>
        public int Frequency {
                get { int __output__; GetFrequency(out __output__); return __output__; }
                set { SetFrequency(value); }
        }
        
        /// <summary>	
        /// The GetStatus method retrieves the status of the sound buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetStatus([Out] int* pdwStatus)</unmanaged>
        public int Status {
                get { int __output__; GetStatus(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// The SetCurrentPosition method sets the position of the play cursor, which is the point at which the next byte of data is read from the buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundBuffer::SetCurrentPosition([None] int dwNewPosition)</unmanaged>
        public int CurrentPosition {
                set { SetCurrentPosition(value); }
        }
        
        /// <summary>	
        /// The SetFormat method sets the format of the primary buffer. Whenever this application has the input focus, DirectSound will set the primary buffer to the specified format.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundBuffer::SetFormat([In] LPCWAVEFORMATEX pcfxFormat)</unmanaged>
        public SlimDX2.Windows.WaveFormat Format {
                set { SetFormat(ref value); }
        }
        
        /// <summary>	
        /// The GetCaps method retrieves the capabilities of the buffer object.	
        /// </summary>	
        /// <param name="pDSBufferCaps"> Address of a <see cref="SlimDX2.DirectSound.BufferCapabilities"/> structure to contain the capabilities of this sound buffer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetCaps([Out] LPDSBCAPS pDSBufferCaps)</unmanaged>
        internal SlimDX2.Result GetCapabilities(out SlimDX2.DirectSound.BufferCapabilities pDSBufferCaps) {
            unsafe {
                SlimDX2.DirectSound.BufferCapabilities.__Native pDSBufferCaps_ = SlimDX2.DirectSound.BufferCapabilities.__NewNative();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pDSBufferCaps_);
                pDSBufferCaps = new SlimDX2.DirectSound.BufferCapabilities();
                pDSBufferCaps.__MarshalFrom(ref pDSBufferCaps_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetCurrentPosition method retrieves the position of the play and write cursors in the sound buffer.	
        /// </summary>	
        /// <param name="currentPlayCursor"> Address of a variable that receives the offset, in bytes, of the play cursor. This parameter can be NULL if the value is not wanted. </param>
        /// <param name="currentWriteCursor"> Address of a variable that receives the offset, in bytes, of the write cursor. This parameter can be NULL if the value is not wanted. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetCurrentPosition([Out, Optional] int* pdwCurrentPlayCursor,[Out, Optional] int* pdwCurrentWriteCursor)</unmanaged>
        public SlimDX2.Result GetCurrentPosition(out int currentPlayCursor, out int currentWriteCursor) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* currentPlayCursor_ = &currentPlayCursor)
                    fixed (void* currentWriteCursor_ = &currentWriteCursor)
                        __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, currentPlayCursor_, currentWriteCursor_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetFormat method retrieves a description of the format of the sound data in the buffer, or the buffer size needed to retrieve the format description.	
        /// </summary>	
        /// <param name="wfxFormatRef"> Address of a <see cref="SlimDX2.Windows.WaveFormat"/> or <see cref="SlimDX2.Windows.WaveFormatExtensible"/> structure that receives a description of the sound data in the buffer. To retrieve the buffer size needed to contain the format description, specify NULL. In this case the variable at pdwSizeWritten receives the size of the structure needed to receive the data. </param>
        /// <param name="sizeAllocated"> Size, in bytes, of the structure at pwfxFormat. If pwfxFormat is not NULL, this value must be equal to or greater than the size of the expected data. </param>
        /// <param name="sizeWritten"> Address of a variable that receives the number of bytes written to the structure at pwfxFormat. This parameter can be NULL. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetFormat([Out, Buffer, Optional] WAVEFORMATEX* pwfxFormat,[None] int dwSizeAllocated,[Out, Optional] int* pdwSizeWritten)</unmanaged>
        public SlimDX2.Result GetFormat(SlimDX2.Windows.WaveFormat[] wfxFormatRef, int sizeAllocated, out int sizeWritten) {
            unsafe {
                SlimDX2.Windows.WaveFormat.__Native[] wfxFormatRef__ = new SlimDX2.Windows.WaveFormat.__Native[wfxFormatRef.Length];
                SlimDX2.Result __result__;
                fixed (void* wfxFormatRef_ = &wfxFormatRef__[0])
                    fixed (void* sizeWritten_ = &sizeWritten)
                        __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 5 * 4, wfxFormatRef==null?(void*)IntPtr.Zero:wfxFormatRef_, sizeAllocated, sizeWritten_);
                for (int i = 0; i < wfxFormatRef.Length; i++)
                    wfxFormatRef[i].__MarshalFrom(ref wfxFormatRef__[i]);				
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetVolume method retrieves the attenuation of the sound.	
        /// </summary>	
        /// <param name="lVolumeRef"> Address of a variable that receives the attenuation, in hundredths of a decibel. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetVolume([Out] LONG* plVolume)</unmanaged>
        internal SlimDX2.Result GetVolume(out int lVolumeRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* lVolumeRef_ = &lVolumeRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 6 * 4, lVolumeRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetPan method retrieves the relative volume of the left and right audio channels.	
        /// </summary>	
        /// <param name="lPanRef"> Address of a variable that receives the relative volume, in hundredths of a decibel. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetPan([Out] LONG* plPan)</unmanaged>
        internal SlimDX2.Result GetPan(out int lPanRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* lPanRef_ = &lPanRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 7 * 4, lPanRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetFrequency method retrieves the frequency, in samples per second, at which the buffer is playing.	
        /// </summary>	
        /// <param name="frequency"> Address of a variable that receives the frequency at which the audio buffer is being played, in hertz. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetFrequency([Out] int* pdwFrequency)</unmanaged>
        internal SlimDX2.Result GetFrequency(out int frequency) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* frequency_ = &frequency)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 8 * 4, frequency_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetStatus method retrieves the status of the sound buffer.	
        /// </summary>	
        /// <param name="status"> Address of a variable that receives the status of the sound buffer. The status can be a combination of the following flags:   ValueDescription DSBSTATUS_BUFFERLOSTThe buffer is lost and must be restored before it can be played or locked. DSBSTATUS_LOOPINGThe buffer is being looped. If this value is not set, the buffer will stop when it reaches the end of the sound data. This value is returned only in combination with DSBSTATUS_PLAYING. DSBSTATUS_PLAYINGThe buffer is playing. If this value is not set, the buffer is stopped. DSBSTATUS_LOCSOFTWAREThe buffer is playing in software. Set only for buffers created with the DSBCAPS_LOCDEFER flag. DSBSTATUS_LOCHARDWAREThe buffer is playing in hardware. Set only for buffers created with the DSBCAPS_LOCDEFER flag. DSBSTATUS_TERMINATEDThe buffer was prematurely terminated by the voice manager and is not playing. Set only for buffers created with the DSBCAPS_LOCDEFER flag.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::GetStatus([Out] int* pdwStatus)</unmanaged>
        internal SlimDX2.Result GetStatus(out int status) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* status_ = &status)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 9 * 4, status_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Initialize method initializes a sound buffer object if it has not yet been initialized.	
        /// </summary>	
        /// <param name="pDirectSound"> Address of the device object associated with this buffer. </param>
        /// <param name="pcDSBufferDesc"> Address of a <see cref="SlimDX2.DirectSound.SoundBufferDescription"/> structure that contains the values used to initialize this sound buffer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::Initialize([In] LPDIRECTSOUND pDirectSound,[In] LPCDSBUFFERDESC pcDSBufferDesc)</unmanaged>
        public SlimDX2.Result Initialize(SlimDX2.DirectSound.DirectSoundBase pDirectSound, ref SlimDX2.DirectSound.SoundBufferDescription pcDSBufferDesc) {
            unsafe {
                SlimDX2.DirectSound.SoundBufferDescription.__Native pcDSBufferDesc_ = SlimDX2.DirectSound.SoundBufferDescription.__NewNative();
                pcDSBufferDesc.__MarshalTo(ref pcDSBufferDesc_);
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 10 * 4, (void*)((pDirectSound == null)?IntPtr.Zero:pDirectSound.NativePointer), &pcDSBufferDesc_);
                pcDSBufferDesc_.__MarshalFree();
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Lock method readies all or part of the buffer for a data write and returns pointers to which data can be written.	
        /// </summary>	
        /// <param name="offset"> Offset, in bytes, from the start of the buffer to the point where the lock begins. This parameter is ignored if DSBLOCK_FROMWRITECURSOR is specified in the dwFlags parameter. </param>
        /// <param name="bytes"> Size, in bytes, of the portion of the buffer to lock. The buffer is conceptually circular, so this number can exceed the number of bytes between dwOffset and the end of the buffer. </param>
        /// <param name="audioPtr1"> Address of a variable that receives a pointer to the first locked part of the buffer. </param>
        /// <param name="audioBytes1"> Address of a variable that receives the number of bytes in the block at ppvAudioPtr1. If this value is less than dwBytes, the lock has wrapped and ppvAudioPtr2 points to a second block of data at the beginning of the buffer. </param>
        /// <param name="audioPtr2"> Address of a variable that receives a pointer to the second locked part of the capture buffer. If NULL is returned, the ppvAudioPtr1 parameter points to the entire locked portion of the capture buffer. </param>
        /// <param name="audioBytes2"> Address of a variable that receives the number of bytes in the block at ppvAudioPtr2. If ppvAudioPtr2 is NULL, this value is zero. </param>
        /// <param name="flags"> Flags modifying the lock event. The following flags are defined:  ValueDescription DSBLOCK_FROMWRITECURSORStart the lock at the write cursor. The dwOffset parameter is ignored. DSBLOCK_ENTIREBUFFERLock the entire buffer. The dwBytes parameter is ignored.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::Lock([None] int dwOffset,[None] int dwBytes,[Out] void** ppvAudioPtr1,[Out] int* pdwAudioBytes1,[Out] void** ppvAudioPtr2,[Out, Optional] int* pdwAudioBytes2,[None] int dwFlags)</unmanaged>
        internal SlimDX2.Result Lock(int offset, int bytes, out IntPtr audioPtr1, out int audioBytes1, out IntPtr audioPtr2, out int audioBytes2, SlimDX2.DirectSound.LockFlags flags) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* audioPtr1_ = &audioPtr1)
                    fixed (void* audioBytes1_ = &audioBytes1)
                        fixed (void* audioPtr2_ = &audioPtr2)
                            fixed (void* audioBytes2_ = &audioBytes2)
                                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 11 * 4, offset, bytes, audioPtr1_, audioBytes1_, audioPtr2_, audioBytes2_, unchecked((int)flags));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Play method causes the sound buffer to play, starting at the play cursor.	
        /// </summary>	
        /// <param name="reserved1"> Reserved. Must be 0. </param>
        /// <param name="priority"> Priority for the sound, used by the voice manager when assigning hardware mixing resources. The lowest priority is 0, and the highest priority is 0xFFFFFFFF. If the buffer was not created with the DSBCAPS_LOCDEFER flag, this value must be 0.  </param>
        /// <param name="flags"> Flags specifying how to play the buffer. The following flags are defined:  Looping flag  ValueDescription DSBPLAY_LOOPINGAfter the end of the audio buffer is reached, play restarts at the beginning of the buffer. Play continues until explicitly stopped. This flag must be set when playing a primary buffer.  Voice allocation flags The voice allocation flags are valid only for buffers created with the DSBCAPS_LOCDEFER flag. One of the following flags can be used to force the processing of the sound into hardware or software. If neither DBSPLAY_LOCHARDWARE nor DBSPLAY_LOCSOFTWARE is set, the sound is played in either software or hardware, depending on the availability of resources at the time the method is called. See Remarks.  ValueDescription DSBPLAY_LOCHARDWAREPlay this voice in a hardware buffer only. If the hardware has no available voices and no voice management flags are set, the call to IDirectSoundBuffer8::Play fails. This flag cannot be combined with DSBPLAY_LOCSOFTWARE. DSBPLAY_LOCSOFTWAREPlay this voice in a software buffer only. This flag cannot be combined with DSBPLAY_LOCHARDWARE or any voice management flag.  Voice management flags The voice management flags are valid only for buffers created with the DSBCAPS_LOCDEFER flag, and are used for sounds that are to play in hardware. These flags enable hardware resources that are already in use to be yielded to the current sound. Only buffers created with the DSBCAPS_LOCDEFER flag are candidates for premature termination. See Remarks.  ValueDescription DSBPLAY_TERMINATEBY_TIMEIf the hardware has no available voices, a currently playing nonlooping buffer will be stopped to make room for the new buffer. The buffer prematurely terminated is the one with the least time left to play. DSBPLAY_TERMINATEBY_DISTANCEIf the hardware has no available voices, a currently playing buffer will be stopped to make room for the new buffer. The buffer prematurely terminated will be selected from buffers that have the buffer's DSBCAPS_ MUTE3DATMAXDISTANCE flag set and are beyond their maximum distance. If there are no such buffers, the method fails. DSBPLAY_TERMINATEBY_PRIORITYIf the hardware has no available voices, a currently playing buffer will be stopped to make room for the new buffer. The buffer prematurely terminated will be the one with the lowest priority as set by the dwPriority parameter passed to IDirectSoundBuffer8::Play for the buffer.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::Play([None] int dwReserved1,[None] int dwPriority,[None] int dwFlags)</unmanaged>
        internal SlimDX2.Result Play(int reserved1, int priority, SlimDX2.DirectSound.PlayFlags flags) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 12 * 4, reserved1, priority, unchecked((int)flags));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetCurrentPosition method sets the position of the play cursor, which is the point at which the next byte of data is read from the buffer.	
        /// </summary>	
        /// <param name="newPosition"> Offset of the play cursor, in bytes, from the beginning of the buffer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::SetCurrentPosition([None] int dwNewPosition)</unmanaged>
        internal SlimDX2.Result SetCurrentPosition(int newPosition) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 13 * 4, newPosition);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetFormat method sets the format of the primary buffer. Whenever this application has the input focus, DirectSound will set the primary buffer to the specified format.	
        /// </summary>	
        /// <param name="pcfxFormat"> Address of a <see cref="SlimDX2.Windows.WaveFormat"/> structure that describes the new format for the primary sound buffer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::SetFormat([In] LPCWAVEFORMATEX pcfxFormat)</unmanaged>
        internal SlimDX2.Result SetFormat(ref SlimDX2.Windows.WaveFormat pcfxFormat) {
            unsafe {
                SlimDX2.Windows.WaveFormat.__Native pcfxFormat_ = new SlimDX2.Windows.WaveFormat.__Native();
                pcfxFormat.__MarshalTo(ref pcfxFormat_);
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 14 * 4, &pcfxFormat_);
                pcfxFormat_.__MarshalFree();
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetVolume method sets the attenuation of the sound.	
        /// </summary>	
        /// <param name="volume"> Attenuation, in hundredths of a decibel (dB). </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::SetVolume([None] LONG lVolume)</unmanaged>
        internal SlimDX2.Result SetVolume(int volume) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 15 * 4, volume);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetPan method sets the relative volume of the left and right channels.	
        /// </summary>	
        /// <param name="pan"> Relative volume between the left and right channels. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::SetPan([None] LONG lPan)</unmanaged>
        internal SlimDX2.Result SetPan(int pan) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 16 * 4, pan);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetFrequency method sets the frequency at which the audio samples are played.	
        /// </summary>	
        /// <param name="frequency"> Frequency, in hertz (Hz), at which to play the audio samples. A value of DSBFREQUENCY_ORIGINAL resets the frequency to the default value of the buffer format. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::SetFrequency([None] int dwFrequency)</unmanaged>
        internal SlimDX2.Result SetFrequency(int frequency) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 17 * 4, frequency);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Stop method causes the sound buffer to stop playing.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::Stop()</unmanaged>
        public SlimDX2.Result Stop() {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 18 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Unlock method releases a locked sound buffer.	
        /// </summary>	
        /// <param name="vAudioPtr1Ref"> Address of the value retrieved in the ppvAudioPtr1 parameter of the {{Lock}} method. </param>
        /// <param name="audioBytes1"> Number of bytes written to the portion of the buffer at pvAudioPtr1. See Remarks. </param>
        /// <param name="vAudioPtr2Ref"> Address of the value retrieved in the ppvAudioPtr2 parameter of the IDirectSoundBuffer8::Lock method. </param>
        /// <param name="audioBytes2"> Number of bytes written to the portion of the buffer at pvAudioPtr2. See Remarks. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::Unlock([In, Buffer] void* pvAudioPtr1,[None] int dwAudioBytes1,[In, Buffer, Optional] void* pvAudioPtr2,[None] int dwAudioBytes2)</unmanaged>
        internal SlimDX2.Result Unlock(IntPtr vAudioPtr1Ref, int audioBytes1, IntPtr vAudioPtr2Ref, int audioBytes2) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 19 * 4, (void*)vAudioPtr1Ref, audioBytes1, (void*)vAudioPtr2Ref, audioBytes2);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Restore method restores the memory allocation for a lost sound buffer.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer::Restore()</unmanaged>
        public SlimDX2.Result Restore() {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 20 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundBuffer8</unmanaged>
    [Guid("6825a449-7524-4d82-920f-50e36ab3ab1e")]
    public partial class SecondarySoundBuffer : SlimDX2.DirectSound.SoundBuffer {
        public SecondarySoundBuffer(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The SetFX method enables effects on a buffer.	
        /// </summary>	
        /// <param name="effectsCount"> Number of elements in the pDSFXDesc and pdwResultCodes arrays. If this value is 0, pDSFXDesc and pdwResultCodes must both be NULL. Set to 0 to remove all effects from the buffer. </param>
        /// <param name="pDSFXDesc"> Address of an array of <see cref="SlimDX2.DirectSound.SoundBufferEffectDescription"/> structures, of size dwEffectsCount, that specifies the effects wanted on the buffer. Must be NULL if dwEffectsCount is 0. </param>
        /// <param name="resultCodes"> Address of an array of DWORD elements, of size dwEffectsCount. Each element receives one of the values shown in the following table, indicating the result of the attempt to create the corresponding effect in the pDSFXDesc array. Note This parameter must be NULL if dwEffectsCount is 0, or can be NULL if results are not wanted.  ValueDescription DSFXR_LOCHARDWAREEffect is instantiated in hardware. DSFXR_LOCSOFTWAREEffect is instantiated in software. DSFXR_UNALLOCATEDEffect has not yet been assigned to hardware or software. This value is returned if the buffer was created with the DSBCAPS_LOCDEFER flag in <see cref="SlimDX2.DirectSound.SoundBufferDescription"/>. DSFXR_FAILEDNo effect was created because resources weren't available. DSFXR_PRESENTEffect is available but was not created because one of the other effects requested could not be created. If any of the effects requested cannot be created, none of them are, and the call fails. DSFXR_UNKNOWNEffect is not registered on the system, and the method failed as a result.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer8::SetFX([None] int dwEffectsCount,[In, Buffer, Optional] LPDSEFFECTDESC pDSFXDesc,[Out, Buffer, Optional] int* pdwResultCodes)</unmanaged>
        public SlimDX2.Result SetEffect(int effectsCount, SlimDX2.DirectSound.SoundBufferEffectDescription[] pDSFXDesc, int[] resultCodes) {
            unsafe {
                SlimDX2.DirectSound.SoundBufferEffectDescription.__Native[] pDSFXDesc__ = new SlimDX2.DirectSound.SoundBufferEffectDescription.__Native[pDSFXDesc.Length];
                for (int i = 0; i < pDSFXDesc.Length; i++)
                    pDSFXDesc[i].__MarshalTo(ref pDSFXDesc__[i]);				
                int[] resultCodes__ = resultCodes ?? new int[1];
                SlimDX2.Result __result__;
                fixed (void* pDSFXDesc_ = &pDSFXDesc__[0])
                    fixed (void* resultCodes_ = &resultCodes__[0])
                        __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 21 * 4, effectsCount, pDSFXDesc_, resultCodes==null?(void*)IntPtr.Zero:resultCodes_);
                for (int i = 0; i < pDSFXDesc.Length; i++)
                    pDSFXDesc__[i].__MarshalFree();				
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The AcquireResources method allocates resources for a buffer that was created with the DSBCAPS_LOCDEFER flag in the <see cref="SlimDX2.DirectSound.SoundBufferDescription"/> structure.	
        /// </summary>	
        /// <param name="flags"> Flags specifying how resources are to be allocated for a buffer created with the DSBCAPS_LOCDEFER flag. For a list of values, see the voice management and voice allocation flags for {{Play}}. </param>
        /// <param name="effectsCount"> Number of elements in the pdwResultFlags array, or 0 if pdwResultCodes is NULL. </param>
        /// <param name="resultCodes"> Address of an array of DWORD variables that receives information about the effects associated with the buffer. This array must contain one element for each effect that was assigned to the buffer by {{SetFX}}. For each effect, one of the values shown in the following table is returned. Note This parameter can be NULL if result codes are not wanted.  ValueDescription DSFXR_LOCHARDWAREEffect is instantiated in hardware. DSFXR_LOCSOFTWAREEffect is instantiated in software. DSFXR_FAILEDNo effect was created because resources weren't available. DSFXR_PRESENTThe effect is available but was not created because the method failed for some other reason. DSFXR_UNKNOWNNo effect was created because the effect isn't registered on the system.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer8::AcquireResources([None] int dwFlags,[None] int dwEffectsCount,[Out, Buffer] int* pdwResultCodes)</unmanaged>
        public SlimDX2.Result AcquireResources(int flags, int effectsCount, int[] resultCodes) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* resultCodes_ = &resultCodes[0])
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 22 * 4, flags, effectsCount, resultCodes_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetObjectInPath method retrieves an interface for an effect object associated with the buffer.	
        /// </summary>	
        /// <param name="rguidObject"> Unique class identifier of the object being searched for, such as GUID_DSFX_STANDARD_ECHO. Set this parameter to GUID_All_Objects to search for objects of any class. </param>
        /// <param name="index"> Index of the object within objects of that class in the path. See Remarks.  </param>
        /// <param name="rguidInterface"> Unique identifier of the desired interface. See Remarks. </param>
        /// <param name="objectRef"> Address of a variable that receives the desired interface pointer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundBuffer8::GetObjectInPath([In] REFGUID rguidObject,[None] int dwIndex,[In] REFGUID rguidInterface,[Out] void** ppObject)</unmanaged>
        public SlimDX2.Result GetObjectInPath(Guid rguidObject, int index, Guid rguidInterface, out IntPtr objectRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* objectRef_ = &objectRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 23 * 4, &rguidObject, index, &rguidInterface, objectRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSound3DListener</unmanaged>
    [Guid("279afa84-4981-11ce-a521-0020af0be560")]
    public partial class SoundListener3D : SlimDX2.ComObject {
        public SoundListener3D(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves all 3D parameters of the sound environment and the listener.	
        /// </summary>	
        /// <param name="pListener"> Address of a <see cref="SlimDX2.DirectSound.Listener3DSettings"/> structure that receives the state of the 3D world and listener. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::GetAllParameters([Out] LPDS3DLISTENER pListener)</unmanaged>
        public SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.Listener3DSettings pListener) {
            unsafe {
                SlimDX2.DirectSound.Listener3DSettings.__Native pListener_ = SlimDX2.DirectSound.Listener3DSettings.__NewNative();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pListener_);
                pListener = new SlimDX2.DirectSound.Listener3DSettings();
                pListener.__MarshalFrom(ref pListener_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetDistanceFactor method retrieves the distance factor, which is the number of meters in a vector unit.	
        /// </summary>	
        /// <param name="flDistanceFactorRef"> Address of a variable that receives the distance factor value. D3DVALUE is defined as float.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::GetDistanceFactor([Out] D3DVALUE* pflDistanceFactor)</unmanaged>
        public SlimDX2.Result GetDistanceFactor(out float flDistanceFactorRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* flDistanceFactorRef_ = &flDistanceFactorRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, flDistanceFactorRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetDopplerFactor method retrieves the multiplier for the Doppler effect.	
        /// </summary>	
        /// <param name="flDopplerFactorRef"> Address of a variable that receives the Doppler factor value. D3DVALUE is defined as float.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::GetDopplerFactor([Out] D3DVALUE* pflDopplerFactor)</unmanaged>
        public SlimDX2.Result GetDopplerFactor(out float flDopplerFactorRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* flDopplerFactorRef_ = &flDopplerFactorRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 5 * 4, flDopplerFactorRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetOrientation method retrieves the orientation of the listener's head.	
        /// </summary>	
        /// <param name="vOrientFrontRef"> Address of a <see cref="SlimMath.Vector3"/> structure that receives the listener's front orientation vector. </param>
        /// <param name="vOrientTopRef"> Address of a D3DVECTOR structure that receives the listener's top orientation vector. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::GetOrientation([Out] D3DVECTOR* pvOrientFront,[Out] D3DVECTOR* pvOrientTop)</unmanaged>
        public SlimDX2.Result GetOrientation(out SlimMath.Vector3 vOrientFrontRef, out SlimMath.Vector3 vOrientTopRef) {
            unsafe {
                vOrientFrontRef = new SlimMath.Vector3();
                vOrientTopRef = new SlimMath.Vector3();
                SlimDX2.Result __result__;
                fixed (void* vOrientFrontRef_ = &vOrientFrontRef)
                    fixed (void* vOrientTopRef_ = &vOrientTopRef)
                        __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 6 * 4, vOrientFrontRef_, vOrientTopRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetPosition method retrieves the listener's position.	
        /// </summary>	
        /// <param name="vPositionRef"> Address of a <see cref="SlimMath.Vector3"/> structure that receives the listener's position vector. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::GetPosition([Out] D3DVECTOR* pvPosition)</unmanaged>
        public SlimDX2.Result GetPosition(out SlimMath.Vector3 vPositionRef) {
            unsafe {
                vPositionRef = new SlimMath.Vector3();
                SlimDX2.Result __result__;
                fixed (void* vPositionRef_ = &vPositionRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 7 * 4, vPositionRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetRolloffFactor method retrieves the rolloff factor, which determines the rate of attenuation over distance.	
        /// </summary>	
        /// <param name="flRolloffFactorRef"> Address of a variable that receives the rolloff factor. D3DVALUE is defined as float.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::GetRolloffFactor([Out] D3DVALUE* pflRolloffFactor)</unmanaged>
        public SlimDX2.Result GetRolloffFactor(out float flRolloffFactorRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* flRolloffFactorRef_ = &flRolloffFactorRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 8 * 4, flRolloffFactorRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetVelocity method retrieves the listener's velocity.	
        /// </summary>	
        /// <param name="vVelocityRef"> Address of a <see cref="SlimMath.Vector3"/> structure that receives the listener's velocity. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::GetVelocity([Out] D3DVECTOR* pvVelocity)</unmanaged>
        public SlimDX2.Result GetVelocity(out SlimMath.Vector3 vVelocityRef) {
            unsafe {
                vVelocityRef = new SlimMath.Vector3();
                SlimDX2.Result __result__;
                fixed (void* vVelocityRef_ = &vVelocityRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 9 * 4, vVelocityRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets all 3D parameters of the sound environment and the listener.	
        /// </summary>	
        /// <param name="pcListener"> Address of a <see cref="SlimDX2.DirectSound.Listener3DSettings"/> structure that contains information describing all 3D listener parameters. </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::SetAllParameters([In] LPCDS3DLISTENER pcListener,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetAllParameters(ref SlimDX2.DirectSound.Listener3DSettings pcListener, int apply) {
            unsafe {
                SlimDX2.DirectSound.Listener3DSettings.__Native pcListener_ = SlimDX2.DirectSound.Listener3DSettings.__NewNative();
                pcListener.__MarshalTo(ref pcListener_);
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 10 * 4, &pcListener_, apply);
                pcListener_.__MarshalFree();
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetDistanceFactor method sets the distance factor, which is the number of meters in a vector unit.	
        /// </summary>	
        /// <param name="distanceFactor"> Distance factor. D3DVALUE is defined as float.  </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::SetDistanceFactor([None] D3DVALUE flDistanceFactor,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetDistanceFactor(float distanceFactor, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 11 * 4, distanceFactor, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetDopplerFactor method sets the multiplier for the Doppler effect.	
        /// </summary>	
        /// <param name="dopplerFactor"> Doppler factor. D3DVALUE is defined as float.  </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::SetDopplerFactor([None] D3DVALUE flDopplerFactor,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetDopplerFactor(float dopplerFactor, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 12 * 4, dopplerFactor, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetOrientation method sets the orientation of the listener's head.	
        /// </summary>	
        /// <param name="xFront"> Value that specifies the x coordinate of the front orientation vector. D3DVALUE is defined as float.  </param>
        /// <param name="yFront"> Value that specifies the y coordinate of the front orientation vector. D3DVALUE is defined as float.  </param>
        /// <param name="zFront"> Value that specifies the z coordinate of the front orientation vector. D3DVALUE is defined as float.  </param>
        /// <param name="xTop"> Value that specifies the x coordinates of the top orientation vector. </param>
        /// <param name="yTop"> Value that specifies the y coordinates of the top orientation vector. </param>
        /// <param name="zTop"> Value that specifies the z coordinates of the top orientation vector. </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:   ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::SetOrientation([None] D3DVALUE xFront,[None] D3DVALUE yFront,[None] D3DVALUE zFront,[None] D3DVALUE xTop,[None] D3DVALUE yTop,[None] D3DVALUE zTop,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetOrientation(float xFront, float yFront, float zFront, float xTop, float yTop, float zTop, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 13 * 4, xFront, yFront, zFront, xTop, yTop, zTop, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetPosition method sets the listener's position.	
        /// </summary>	
        /// <param name="x"> Value that specifies the x coordinate of the listener's position vector. Note that DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="y"> Value that specifies the y coordinate of the listener's position vector. Note that DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="z"> Value that specifies the z coordinate of the listener's position vector. Note that DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:   ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::SetPosition([None] D3DVALUE x,[None] D3DVALUE y,[None] D3DVALUE z,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetPosition(float x, float y, float z, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 14 * 4, x, y, z, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetRolloffFactor method sets the rolloff factor, which determines the rate of attenuation over distance.	
        /// </summary>	
        /// <param name="rolloffFactor"> Rolloff factor. D3DVALUE is defined as float.  </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:   ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::SetRolloffFactor([None] D3DVALUE flRolloffFactor,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetRolloffFactor(float rolloffFactor, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 15 * 4, rolloffFactor, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetVelocity method sets the listener's velocity.	
        /// </summary>	
        /// <param name="x"> Value that specifies the x coordinate of the listener's velocity vector. DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="y"> Value that specifies the y coordinate of the listener's velocity vector. DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="z"> Value that specifies the z coordinate of the listener's velocity vector. DirectSound may adjust this value to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::SetVelocity([None] D3DVALUE x,[None] D3DVALUE y,[None] D3DVALUE z,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetVelocity(float x, float y, float z, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 16 * 4, x, y, z, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The CommitDeferredSettings method commits any deferred settings made since the last call to this method.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DListener::CommitDeferredSettings()</unmanaged>
        public SlimDX2.Result CommitDeferredSettings() {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 17 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSound3DBuffer</unmanaged>
    [Guid("279afa86-4981-11ce-a521-0020af0be560")]
    public partial class SoundBuffer3D : SlimDX2.ComObject {
        public SoundBuffer3D(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the 3D properties of the sound buffer.	
        /// </summary>	
        /// <param name="pDs3dBuffer"> Address of a <see cref="SlimDX2.DirectSound.Buffer3DSettings"/> structure that receives the information describing the 3D characteristics of the sound buffer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::GetAllParameters([Out] LPDS3DBUFFER pDs3dBuffer)</unmanaged>
        public SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.Buffer3DSettings pDs3dBuffer) {
            unsafe {
                SlimDX2.DirectSound.Buffer3DSettings.__Native pDs3dBuffer_ = SlimDX2.DirectSound.Buffer3DSettings.__NewNative();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pDs3dBuffer_);
                pDs3dBuffer = new SlimDX2.DirectSound.Buffer3DSettings();
                pDs3dBuffer.__MarshalFrom(ref pDs3dBuffer_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetConeAngles method retrieves the inside and outside angles of the sound projection cone.	
        /// </summary>	
        /// <param name="insideConeAngle"> Addresses of a variable that receives the inside angle of the sound projection cone, in degrees. This is the angle within which the sound is at its normal volume. </param>
        /// <param name="outsideConeAngle"> Addresses of a variable that receives the outside angle of the sound projection cone, in degrees. This is the angle outside of which the sound is at its outside volume. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::GetConeAngles([Out] int* pdwInsideConeAngle,[Out] int* pdwOutsideConeAngle)</unmanaged>
        public SlimDX2.Result GetConeAngles(out int insideConeAngle, out int outsideConeAngle) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* insideConeAngle_ = &insideConeAngle)
                    fixed (void* outsideConeAngle_ = &outsideConeAngle)
                        __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, insideConeAngle_, outsideConeAngle_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetConeOrientation method retrieves the orientation of the sound projection cone.	
        /// </summary>	
        /// <param name="vOrientationRef"> Address of a D3DVECTOR structure that receives the orientation of the sound projection cone. The vector information represents the center of the sound cone. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::GetConeOrientation([Out] D3DVECTOR* pvOrientation)</unmanaged>
        public SlimDX2.Result GetConeOrientation(out SlimMath.Vector3 vOrientationRef) {
            unsafe {
                vOrientationRef = new SlimMath.Vector3();
                SlimDX2.Result __result__;
                fixed (void* vOrientationRef_ = &vOrientationRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 5 * 4, vOrientationRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetConeOutsideVolume method retrieves the volume of the sound outside the outside angle of the sound projection cone.	
        /// </summary>	
        /// <param name="lConeOutsideVolumeRef"> Address of a variable that receives the cone outside volume for this buffer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::GetConeOutsideVolume([Out] LONG* plConeOutsideVolume)</unmanaged>
        public SlimDX2.Result GetConeOutsideVolume(out int lConeOutsideVolumeRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* lConeOutsideVolumeRef_ = &lConeOutsideVolumeRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 6 * 4, lConeOutsideVolumeRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetMaxDistance method retrieves the maximum distance, which is the distance from the listener beyond which sounds in this buffer are no longer attenuated.	
        /// </summary>	
        /// <param name="flMaxDistanceRef"> Address of a variable that receives the maximum distance, in meters by default. D3DVALUE is defined as float.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::GetMaxDistance([Out] D3DVALUE* pflMaxDistance)</unmanaged>
        public SlimDX2.Result GetMaxDistance(out float flMaxDistanceRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* flMaxDistanceRef_ = &flMaxDistanceRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 7 * 4, flMaxDistanceRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetMinDistance method retrieves the minimum distance, which is the distance from the listener at which sounds in this buffer begin to be attenuated.	
        /// </summary>	
        /// <param name="flMinDistanceRef"> Address of a variable that receives the minimum distance, in meters by default. D3DVALUE is defined as float.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::GetMinDistance([Out] D3DVALUE* pflMinDistance)</unmanaged>
        public SlimDX2.Result GetMinDistance(out float flMinDistanceRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* flMinDistanceRef_ = &flMinDistanceRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 8 * 4, flMinDistanceRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetMode method retrieves the operation mode for 3D sound processing.	
        /// </summary>	
        /// <param name="mode"> Address of a variable that receives the mode setting. This value will be one of those in the following table.  ValueDescription DS3DMODE_DISABLEProcessing of 3D sound is disabled. The sound seems to originate from the center of the listener's head. DS3DMODE_HEADRELATIVESound parameters (position, velocity, and orientation) are relative to the listener's parameters. In this mode, the absolute parameters of the sound are updated automatically as the listener's parameters change, so that the relative parameters remain constant. DS3DMODE_NORMALNormal processing. This is the default mode.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::GetMode([Out] int* pdwMode)</unmanaged>
        public SlimDX2.Result GetMode(out int mode) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* mode_ = &mode)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 9 * 4, mode_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetPosition method retrieves the position of the sound source.	
        /// </summary>	
        /// <param name="vPositionRef"> Address of a <see cref="SlimMath.Vector3"/> structure that receives the position of the sound buffer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::GetPosition([Out] D3DVECTOR* pvPosition)</unmanaged>
        public SlimDX2.Result GetPosition(out SlimMath.Vector3 vPositionRef) {
            unsafe {
                vPositionRef = new SlimMath.Vector3();
                SlimDX2.Result __result__;
                fixed (void* vPositionRef_ = &vPositionRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 10 * 4, vPositionRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetVelocity method retrieves the velocity of the sound source.	
        /// </summary>	
        /// <param name="vVelocityRef"> Address of a <see cref="SlimMath.Vector3"/> structure that receives the sound buffer's velocity, in meters per second by default. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::GetVelocity([Out] D3DVECTOR* pvVelocity)</unmanaged>
        public SlimDX2.Result GetVelocity(out SlimMath.Vector3 vVelocityRef) {
            unsafe {
                vVelocityRef = new SlimMath.Vector3();
                SlimDX2.Result __result__;
                fixed (void* vVelocityRef_ = &vVelocityRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 11 * 4, vVelocityRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets all 3D sound buffer properties.	
        /// </summary>	
        /// <param name="pcDs3dBuffer"> Address of a <see cref="SlimDX2.DirectSound.Buffer3DSettings"/> structure that describes the 3D characteristics of the sound buffer. </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::SetAllParameters([In] LPCDS3DBUFFER pcDs3dBuffer,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetAllParameters(ref SlimDX2.DirectSound.Buffer3DSettings pcDs3dBuffer, int apply) {
            unsafe {
                SlimDX2.DirectSound.Buffer3DSettings.__Native pcDs3dBuffer_ = SlimDX2.DirectSound.Buffer3DSettings.__NewNative();
                pcDs3dBuffer.__MarshalTo(ref pcDs3dBuffer_);
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 12 * 4, &pcDs3dBuffer_, apply);
                pcDs3dBuffer_.__MarshalFree();
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetConeAngles method sets the inside and outside angles of the sound projection cone.	
        /// </summary>	
        /// <param name="insideConeAngle"> Inside cone angle, in degrees. This is the angle within which the sound is at its normal volume. </param>
        /// <param name="outsideConeAngle"> Outside cone angle, in degrees. This is the angle outside of which the sound is at its outside volume. </param>
        /// <param name="apply"> Value that indicates when the setting should be applied. Must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::SetConeAngles([None] int dwInsideConeAngle,[None] int dwOutsideConeAngle,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetConeAngles(int insideConeAngle, int outsideConeAngle, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 13 * 4, insideConeAngle, outsideConeAngle, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetConeOrientation method sets the orientation of the sound projection cone.	
        /// </summary>	
        /// <param name="x"> Value that specifies the x coordinate of the sound cone orientation vector. D3DVALUE is defined as float.  </param>
        /// <param name="y"> Value that specifies the y coordinate of the sound cone orientation vector. D3DVALUE is defined as float.   </param>
        /// <param name="z"> Value that specifies the z coordinate of the sound cone orientation vector. D3DVALUE is defined as float.  	 </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::SetConeOrientation([None] D3DVALUE x,[None] D3DVALUE y,[None] D3DVALUE z,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetConeOrientation(float x, float y, float z, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 14 * 4, x, y, z, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetConeOutsideVolume method sets the volume of the sound outside the outside angle of the sound projection cone.	
        /// </summary>	
        /// <param name="coneOutsideVolume"> Cone outside volume, in hundredths of a decibel. </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the those shown in the following table. ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::SetConeOutsideVolume([None] LONG lConeOutsideVolume,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetConeOutsideVolume(int coneOutsideVolume, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 15 * 4, coneOutsideVolume, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetMaxDistance method sets the maximum distance, which is the distance from the listener beyond which sounds in this buffer are no longer attenuated.	
        /// </summary>	
        /// <param name="maxDistance"> Maximum distance, in meters by default. D3DVALUE is defined as float.  </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::SetMaxDistance([None] D3DVALUE flMaxDistance,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetMaxDistance(float maxDistance, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 16 * 4, maxDistance, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetMinDistance method sets the minimum distance, which is the distance from the listener at which sounds in this buffer begin to be attenuated.	
        /// </summary>	
        /// <param name="minDistance"> Minimum distance, in meters by default. D3DVALUE is defined as float.  </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::SetMinDistance([None] D3DVALUE flMinDistance,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetMinDistance(float minDistance, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 17 * 4, minDistance, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetMode method sets the operation mode for 3D sound processing.	
        /// </summary>	
        /// <param name="mode"> Flag specifying the 3D sound processing mode to be set. The flags in the following table are defined. ValueDescription DS3DMODE_DISABLEProcessing of 3D sound is disabled. The sound seems to originate from the center of the listener's head. DS3DMODE_HEADRELATIVESound parameters (position, velocity, and orientation) are relative to the listener's parameters. In this mode, the absolute parameters of the sound are updated automatically as the listener's parameters change, so that the relative parameters remain constant. DS3DMODE_NORMALNormal processing. This is the default mode.  </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of those in the following table.  ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::SetMode([None] int dwMode,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetMode(int mode, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 18 * 4, mode, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetPosition method sets the position of the sound source.	
        /// </summary>	
        /// <param name="x"> Value that specifies the x coordinate of the position vector. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="y"> Value that specifies the y coordinate of the position vector. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="z"> Value that specifies the z coordinate of the position vector. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:   ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::SetPosition([None] D3DVALUE x,[None] D3DVALUE y,[None] D3DVALUE z,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetPosition(float x, float y, float z, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 19 * 4, x, y, z, apply);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The SetVelocity method sets the velocity of the sound source.	
        /// </summary>	
        /// <param name="x"> Value that specifies the x coordinate of the velocity vector, in meters per second by default. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="y"> Value that specifies the y coordinate of the velocity vector, in meters per second by default. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="z"> Value that specifies the z coordinate of the velocity vector, in meters per second by default. DirectSound may adjust these values to prevent floating-point overflow. D3DVALUE is defined as float.  </param>
        /// <param name="apply"> Value that specifies when the setting should be applied. This value must be one of the following:   ValueDescription DS3D_DEFERREDSettings are not applied until the application calls the {{CommitDeferredSettings}} method. This allows the application to change several settings and generate a single recalculation. DS3D_IMMEDIATESettings are applied immediately, causing the system to recalculate the 3D coordinates for all 3D sound buffers.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSound3DBuffer::SetVelocity([None] D3DVALUE x,[None] D3DVALUE y,[None] D3DVALUE z,[None] int dwApply)</unmanaged>
        public SlimDX2.Result SetVelocity(float x, float y, float z, int apply) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 20 * 4, x, y, z, apply);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundCapture</unmanaged>
    [Guid("b0210781-89cd-11d0-af08-00a0c925cd16")]
    public partial class Capture : SlimDX2.ComObject {
        public Capture(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetCaps method retrieves the capabilities of the capture device.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundCapture::GetCaps([Out] LPDSCCAPS pDSCCaps)</unmanaged>
        public SlimDX2.DirectSound.CaptureCapabilities Capabilities {
                get { SlimDX2.DirectSound.CaptureCapabilities __output__; GetCapabilities(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// The CreateCaptureBuffer method creates a buffer for capturing waveform audio.	
        /// </summary>	
        /// <param name="pcDSCBufferDesc"> Pointer to a <see cref="SlimDX2.DirectSound.CaptureBufferDescription"/> structure containing values for the capture buffer being created. </param>
        /// <param name="dSCBufferRef"> Address of a variable that receives an IDirectSoundCaptureBuffer interface pointer. Use QueryInterface to obtain <see cref="SlimDX2.DirectSound.CaptureBuffer"/>. See Remarks. </param>
        /// <param name="unkOuterRef"> Address of the controlling object's IUnknown interface for COM aggregation. Must be NULL. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCapture::CreateCaptureBuffer([In] LPCDSCBUFFERDESC pcDSCBufferDesc,[Out] LPDIRECTSOUNDCAPTUREBUFFER* ppDSCBuffer,[None] IUnknown* pUnkOuter)</unmanaged>
        public SlimDX2.Result CreateCaptureBuffer(ref SlimDX2.DirectSound.CaptureBufferDescription pcDSCBufferDesc, out SlimDX2.DirectSound.CaptureBufferBase dSCBufferRef, SlimDX2.ComObject unkOuterRef) {
            unsafe {
                SlimDX2.DirectSound.CaptureBufferDescription.__Native pcDSCBufferDesc_ = SlimDX2.DirectSound.CaptureBufferDescription.__NewNative();
                pcDSCBufferDesc.__MarshalTo(ref pcDSCBufferDesc_);
                IntPtr dSCBufferRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pcDSCBufferDesc_, &dSCBufferRef_, (void*)((unkOuterRef == null)?IntPtr.Zero:unkOuterRef.NativePointer));
                pcDSCBufferDesc_.__MarshalFree();
                dSCBufferRef = (dSCBufferRef_ == IntPtr.Zero)?null:new SlimDX2.DirectSound.CaptureBufferBase(dSCBufferRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetCaps method retrieves the capabilities of the capture device.	
        /// </summary>	
        /// <param name="pDSCCaps"> Pointer to a <see cref="SlimDX2.DirectSound.CaptureCapabilities"/> structure to be receive information about the capture device. When the method is called, the dwSize member must specify the size of the structure in bytes. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCapture::GetCaps([Out] LPDSCCAPS pDSCCaps)</unmanaged>
        internal SlimDX2.Result GetCapabilities(out SlimDX2.DirectSound.CaptureCapabilities pDSCCaps) {
            unsafe {
                SlimDX2.DirectSound.CaptureCapabilities.__Native pDSCCaps_ = SlimDX2.DirectSound.CaptureCapabilities.__NewNative();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, &pDSCCaps_);
                pDSCCaps = new SlimDX2.DirectSound.CaptureCapabilities();
                pDSCCaps.__MarshalFrom(ref pDSCCaps_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Initialize method initializes a capture device object created by using CoCreateInstance. Calling this method is not required when the <see cref="SlimDX2.DirectSound.DSound.CaptureCreate8"/> or {{DirectSoundFullDuplexCreate8}} function is used to create the object.	
        /// </summary>	
        /// <param name="pcGuidDevice"> Address of the GUID specifying the sound driver to which the DirectSoundCapture object binds. Use NULL to select the primary sound driver. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCapture::Initialize([In, Optional] LPCGUID pcGuidDevice)</unmanaged>
        public SlimDX2.Result Initialize(Guid? pcGuidDevice) {
            unsafe {
                Guid pcGuidDevice_;
                if (pcGuidDevice.HasValue)
                    pcGuidDevice_ = pcGuidDevice.Value;				
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 5 * 4, (pcGuidDevice.HasValue)?&pcGuidDevice_:(void*)IntPtr.Zero);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundCaptureBuffer</unmanaged>
    [Guid("b0210782-89cd-11d0-af08-00a0c925cd16")]
    public partial class CaptureBufferBase : SlimDX2.ComObject {
        public CaptureBufferBase(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetCaps method retrieves the capabilities of the buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetCaps([Out] LPDSCBCAPS pDSCBCaps)</unmanaged>
        public SlimDX2.DirectSound.CaptureBufferCapabilities Capabilities {
                get { SlimDX2.DirectSound.CaptureBufferCapabilities __output__; GetCapabilities(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// The GetStatus method retrieves the status of the capture buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetStatus([Out] int* pdwStatus)</unmanaged>
        public int Status {
                get { int __output__; GetStatus(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// The GetCaps method retrieves the capabilities of the buffer.	
        /// </summary>	
        /// <param name="pDSCBCaps"> Pointer to a <see cref="SlimDX2.DirectSound.CaptureBufferCapabilities"/> structure that receives information about the capture buffer. On input, the dwSize member must specify the size of the structure in bytes. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetCaps([Out] LPDSCBCAPS pDSCBCaps)</unmanaged>
        internal SlimDX2.Result GetCapabilities(out SlimDX2.DirectSound.CaptureBufferCapabilities pDSCBCaps) {
            unsafe {
                SlimDX2.DirectSound.CaptureBufferCapabilities.__Native pDSCBCaps_ = SlimDX2.DirectSound.CaptureBufferCapabilities.__NewNative();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pDSCBCaps_);
                pDSCBCaps = new SlimDX2.DirectSound.CaptureBufferCapabilities();
                pDSCBCaps.__MarshalFrom(ref pDSCBCaps_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetCurrentPosition method retrieves the positions of the capture and read cursors in the buffer.	
        /// </summary>	
        /// <param name="capturePosition"> Address of a variable that receives the offset from the start of the buffer, in bytes, of the capture cursor. The parameter can be NULL if this value is not wanted.  </param>
        /// <param name="readPosition"> Address of a variable that receives the offset from the start of the buffer, in bytes, of the read cursor. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetCurrentPosition([Out, Optional] int* pdwCapturePosition,[Out, Optional] int* pdwReadPosition)</unmanaged>
        public SlimDX2.Result GetCurrentPosition(out int capturePosition, out int readPosition) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* capturePosition_ = &capturePosition)
                    fixed (void* readPosition_ = &readPosition)
                        __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, capturePosition_, readPosition_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetFormat method retrieves the waveform format of the capture buffer.	
        /// </summary>	
        /// <param name="wfxFormatRef"> Address of a <see cref="SlimDX2.Windows.WaveFormat"/> structure that receives a description of the sound data in the capture buffer. To retrieve the buffer size needed to contain the format description, specify NULL.; in this case, the DWORD pointed to by the pdwSizeWritten parameter receives the size of the structure needed to receive complete format information. </param>
        /// <param name="sizeAllocated"> Size, in bytes, of the WAVEFORMATEX structure. DirectSoundCapture writes, at most, dwSizeAllocated bytes to the structure. </param>
        /// <param name="sizeWritten"> Address of a variable that receives the number of bytes written to the WAVEFORMATEX structure; or, if pwfxFormat is NULL, the size of the WAVEFORMATEX structure that would be necessary to receive the information. This parameter can be NULL if the value is not wanted. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetFormat([Out, Buffer, Optional] WAVEFORMATEX* pwfxFormat,[None] int dwSizeAllocated,[Out, Optional] int* pdwSizeWritten)</unmanaged>
        public SlimDX2.Result GetFormat(SlimDX2.Windows.WaveFormat[] wfxFormatRef, int sizeAllocated, out int sizeWritten) {
            unsafe {
                SlimDX2.Windows.WaveFormat.__Native[] wfxFormatRef__ = new SlimDX2.Windows.WaveFormat.__Native[wfxFormatRef.Length];
                SlimDX2.Result __result__;
                fixed (void* wfxFormatRef_ = &wfxFormatRef__[0])
                    fixed (void* sizeWritten_ = &sizeWritten)
                        __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 5 * 4, wfxFormatRef==null?(void*)IntPtr.Zero:wfxFormatRef_, sizeAllocated, sizeWritten_);
                for (int i = 0; i < wfxFormatRef.Length; i++)
                    wfxFormatRef[i].__MarshalFrom(ref wfxFormatRef__[i]);				
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetStatus method retrieves the status of the capture buffer.	
        /// </summary>	
        /// <param name="status"> Address of a variable that receives the status of the capture buffer. The status can be set to one or more of the following: ValueDescription DSCBSTATUS_CAPTURINGThe buffer is capturing audio data. DSCBSTATUS_LOOPINGThe buffer is looping.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::GetStatus([Out] int* pdwStatus)</unmanaged>
        internal SlimDX2.Result GetStatus(out int status) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* status_ = &status)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 6 * 4, status_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Initialize method initializes a capture buffer object. Because the {{IDirectSoundCapture8::CreateCaptureBuffer}} method and the {{DirectSoundFullDuplexCreate8}} function call the IDirectSoundCaptureBuffer8::Initialize method internally, this method is not used by applications.	
        /// </summary>	
        /// <param name="pDirectSoundCapture"> Address of the DirectSoundCapture object associated with this DirectSoundCaptureBuffer object. </param>
        /// <param name="pcDSCBufferDesc"> Address of a <see cref="SlimDX2.DirectSound.CaptureBufferDescription"/> structure that contains the values used to initialize this sound buffer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::Initialize([In] LPDIRECTSOUNDCAPTURE pDirectSoundCapture,[In] LPCDSCBUFFERDESC pcDSCBufferDesc)</unmanaged>
        public SlimDX2.Result Initialize(SlimDX2.DirectSound.Capture pDirectSoundCapture, ref SlimDX2.DirectSound.CaptureBufferDescription pcDSCBufferDesc) {
            unsafe {
                SlimDX2.DirectSound.CaptureBufferDescription.__Native pcDSCBufferDesc_ = SlimDX2.DirectSound.CaptureBufferDescription.__NewNative();
                pcDSCBufferDesc.__MarshalTo(ref pcDSCBufferDesc_);
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 7 * 4, (void*)((pDirectSoundCapture == null)?IntPtr.Zero:pDirectSoundCapture.NativePointer), &pcDSCBufferDesc_);
                pcDSCBufferDesc_.__MarshalFree();
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Lock method locks a portion of the buffer. Locking the buffer returns pointers into the buffer, allowing the application to read or write audio data into memory.	
        /// </summary>	
        /// <param name="offset"> Offset, in bytes, from the start of the buffer to the point where the lock begins. </param>
        /// <param name="bytes"> Size, in bytes, of the portion of the buffer to lock. Because the buffer is conceptually circular, this number can exceed the number of bytes between dwOffset and the end of the buffer. </param>
        /// <param name="vAudioPtr1Ref"> Address of a variable that receives a pointer to the first locked part of the buffer. </param>
        /// <param name="audioBytes1"> Address of a variable that receives the number of bytes in the block at ppvAudioPtr1. If this value is less than dwBytes, the lock has wrapped and ppvAudioPtr2 points to a second block of data at the beginning of the buffer. </param>
        /// <param name="vAudioPtr2Ref"> Address of a variable that receives a pointer to the second locked part of the capture buffer. If NULL is returned, the ppvAudioPtr1 parameter points to the entire locked portion of the capture buffer. </param>
        /// <param name="audioBytes2"> Address of a variable that receives the number of bytes in the block at ppvAudioPtr2. If ppvAudioPtr2 is NULL, this value is zero. </param>
        /// <param name="flags"> Flags modifying the lock event. This value can be zero or the following flag: ValueDescription DSCBLOCK_ENTIREBUFFERIgnore dwBytes and lock the entire capture buffer.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::Lock([None] int dwOffset,[None] int dwBytes,[Out, Buffer] void** ppvAudioPtr1,[Out] int* pdwAudioBytes1,[Out, Buffer, Optional] void** ppvAudioPtr2,[Out, Optional] int* pdwAudioBytes2,[None] int dwFlags)</unmanaged>
        public SlimDX2.Result Lock(int offset, int bytes, IntPtr vAudioPtr1Ref, out int audioBytes1, IntPtr vAudioPtr2Ref, out int audioBytes2, int flags) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* audioBytes1_ = &audioBytes1)
                    fixed (void* audioBytes2_ = &audioBytes2)
                        __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 8 * 4, offset, bytes, (void*)vAudioPtr1Ref, audioBytes1_, (void*)vAudioPtr2Ref, audioBytes2_, flags);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Start method begins capturing data into the buffer. If the buffer is already capturing, the method has no effect.	
        /// </summary>	
        /// <param name="flags"> Flags that specify the behavior of the buffer when capturing sound data. The following flag is defined:   ValueDescription DSCBSTART_LOOPINGAfter the end of the buffer is reached, capture restarts at the beginning and continues until explicitly stopped.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::Start([None] int dwFlags)</unmanaged>
        public SlimDX2.Result Start(int flags) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 9 * 4, flags);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Stop method stops the buffer so that it is no longer capturing data. If the buffer is not capturing, the method has no effect.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::Stop()</unmanaged>
        public SlimDX2.Result Stop() {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 10 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The Unlock method unlocks the buffer.	
        /// </summary>	
        /// <param name="vAudioPtr1Ref"> Address of the value retrieved in the ppvAudioPtr1 parameter of the {{Lock}} method. </param>
        /// <param name="audioBytes1"> Number of bytes read from the pvAudioPtr1 parameter. See Remarks. </param>
        /// <param name="vAudioPtr2Ref"> Address of the value retrieved in the ppvAudioPtr2 parameter of the IDirectSoundCaptureBuffer8::Lock method. </param>
        /// <param name="audioBytes2"> Number of bytes read from the pvAudioPtr2 parameter. See Remarks. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer::Unlock([In, Buffer] void* pvAudioPtr1,[None] int dwAudioBytes1,[In, Buffer, Optional] void* pvAudioPtr2,[None] int dwAudioBytes2)</unmanaged>
        public SlimDX2.Result Unlock(IntPtr vAudioPtr1Ref, int audioBytes1, IntPtr vAudioPtr2Ref, int audioBytes2) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 11 * 4, (void*)vAudioPtr1Ref, audioBytes1, (void*)vAudioPtr2Ref, audioBytes2);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundCaptureBuffer8</unmanaged>
    [Guid("00990df4-0dbb-4872-833e-6d303e80aeb6")]
    public partial class CaptureBuffer : SlimDX2.DirectSound.CaptureBufferBase {
        public CaptureBuffer(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetObjectInPath method retrieves an interface to an effect object associated with the buffer.	
        /// </summary>	
        /// <param name="rguidObject"> Value of type REFGUID that specifies the unique class identifier of the object being searched for, such as GUID_DSCFX_CLASS_AEC. </param>
        /// <param name="index"> Index of the object within objects of that class in the path. See Remarks.  </param>
        /// <param name="rguidInterface"> Unique identifier of the desired interface, such as IID_IDirectSoundCaptureFXAec8. </param>
        /// <param name="objectRef"> Address of a variable that receives the desired interface pointer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer8::GetObjectInPath([In] REFGUID rguidObject,[None] int dwIndex,[In] REFGUID rguidInterface,[Out] void** ppObject)</unmanaged>
        public SlimDX2.Result GetObjectInPath(Guid rguidObject, int index, Guid rguidInterface, out IntPtr objectRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* objectRef_ = &objectRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 12 * 4, &rguidObject, index, &rguidInterface, objectRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetFXStatus method retrieves the status of capture effects.	
        /// </summary>	
        /// <param name="effectsCount"> Number of elements in the pdwFXStatus array.  </param>
        /// <param name="fXStatus"> Address of an array of DWORD variables that receive the status of each effect. This should contain the same number of elements as the array passed in the dwFXCount member of the <see cref="SlimDX2.DirectSound.CaptureBufferDescription"/> structure passed to {{DirectSoundFullDuplexCreate8}} or {{IDirectSoundCapture8::CreateCaptureBuffer}}. The possible values returned in the array are as follows: ValueDescription DSCFXR_LOCHARDWAREEffect is instantiated in hardware. DSCFXR_LOCSOFTWAREEffect is instantiated in software.  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureBuffer8::GetFXStatus([None] int dwEffectsCount,[Out, Buffer] int* pdwFXStatus)</unmanaged>
        public SlimDX2.Result GetFXStatus(int effectsCount, int[] fXStatus) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* fXStatus_ = &fXStatus[0])
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 13 * 4, effectsCount, fXStatus_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundNotify</unmanaged>
    [Guid("b0210783-89cd-11d0-af08-00a0c925cd16")]
    internal partial class SoundBufferNotifier : SlimDX2.ComObject {
        public SoundBufferNotifier(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The SetNotificationPositions method sets the notification positions. During capture or playback, whenever the read or play cursor reaches one of the specified offsets, the associated event is signaled.	
        /// </summary>	
        /// <param name="positionNotifies"> Number of <see cref="SlimDX2.DirectSound.NotificationPosition"/> structures. </param>
        /// <param name="pcPositionNotifies"> Pointer to an array of DSBPOSITIONNOTIFY structures (the maximum array size is DSBNOTIFICATIONS_MAX). </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundNotify::SetNotificationPositions([None] int dwPositionNotifies,[In, Buffer] LPCDSBPOSITIONNOTIFY pcPositionNotifies)</unmanaged>
        public SlimDX2.Result SetNotificationPositions(int positionNotifies, SlimDX2.DirectSound.NotificationPosition[] pcPositionNotifies) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* pcPositionNotifies_ = &pcPositionNotifies[0])
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, positionNotifies, pcPositionNotifies_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundFXGargle</unmanaged>
    [Guid("d616f352-d622-11ce-aac5-0020af0b99a3")]
    public partial class Gargle : SlimDX2.ComObject {
        public Gargle(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the amplitude modulation parameters of a buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXGargle::GetAllParameters([Out] LPDSFXGargle pDsFxGargle)</unmanaged>
        public SlimDX2.DirectSound.GargleSettings AllParameters {
                get { SlimDX2.DirectSound.GargleSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(value); }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets the amplitude modulation parameters of a buffer.	
        /// </summary>	
        /// <param name="pcDsFxGargle"> Address of a <see cref="SlimDX2.DirectSound.GargleSettings"/> structure that specifies the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXGargle::SetAllParameters([In] LPCDSFXGargle pcDsFxGargle)</unmanaged>
        internal SlimDX2.Result SetAllParameters(SlimDX2.DirectSound.GargleSettings pcDsFxGargle) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pcDsFxGargle);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetAllParameters method retrieves the amplitude modulation parameters of a buffer.	
        /// </summary>	
        /// <param name="pDsFxGargle"> Address of a <see cref="SlimDX2.DirectSound.GargleSettings"/> structure that receives the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXGargle::GetAllParameters([Out] LPDSFXGargle pDsFxGargle)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.GargleSettings pDsFxGargle) {
            unsafe {
                pDsFxGargle = new SlimDX2.DirectSound.GargleSettings();
                SlimDX2.Result __result__;
                fixed (void* pDsFxGargle_ = &pDsFxGargle)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDsFxGargle_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundFXChorus</unmanaged>
    [Guid("880842e3-145f-43e6-a934-a71806e50547")]
    public partial class Chorus : SlimDX2.ComObject {
        public Chorus(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the chorus parameters of a buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXChorus::GetAllParameters([Out] LPDSFXChorus pDsFxChorus)</unmanaged>
        public SlimDX2.DirectSound.ChorusSettings AllParameters {
                get { SlimDX2.DirectSound.ChorusSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(ref value); }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets the chorus parameters of a buffer.	
        /// </summary>	
        /// <param name="pcDsFxChorus"> Address of a <see cref="SlimDX2.DirectSound.ChorusSettings"/> structure that specifies the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXChorus::SetAllParameters([In] LPCDSFXChorus pcDsFxChorus)</unmanaged>
        internal SlimDX2.Result SetAllParameters(ref SlimDX2.DirectSound.ChorusSettings pcDsFxChorus) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* pcDsFxChorus_ = &pcDsFxChorus)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, pcDsFxChorus_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetAllParameters method retrieves the chorus parameters of a buffer.	
        /// </summary>	
        /// <param name="pDsFxChorus"> Address of a <see cref="SlimDX2.DirectSound.ChorusSettings"/> structure that receives the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXChorus::GetAllParameters([Out] LPDSFXChorus pDsFxChorus)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.ChorusSettings pDsFxChorus) {
            unsafe {
                pDsFxChorus = new SlimDX2.DirectSound.ChorusSettings();
                SlimDX2.Result __result__;
                fixed (void* pDsFxChorus_ = &pDsFxChorus)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDsFxChorus_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundFXFlanger</unmanaged>
    [Guid("903e9878-2c92-4072-9b2c-ea68f5396783")]
    public partial class Flanger : SlimDX2.ComObject {
        public Flanger(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the flange parameters of a buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXFlanger::GetAllParameters([Out] LPDSFXFlanger pDsFxFlanger)</unmanaged>
        public SlimDX2.DirectSound.FlangerSettings AllParameters {
                get { SlimDX2.DirectSound.FlangerSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(ref value); }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets the flange parameters of a buffer.	
        /// </summary>	
        /// <param name="pcDsFxFlanger"> Address of a <see cref="SlimDX2.DirectSound.FlangerSettings"/> structure that specifies the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXFlanger::SetAllParameters([In] LPCDSFXFlanger pcDsFxFlanger)</unmanaged>
        internal SlimDX2.Result SetAllParameters(ref SlimDX2.DirectSound.FlangerSettings pcDsFxFlanger) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* pcDsFxFlanger_ = &pcDsFxFlanger)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, pcDsFxFlanger_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetAllParameters method retrieves the flange parameters of a buffer.	
        /// </summary>	
        /// <param name="pDsFxFlanger"> Address of a <see cref="SlimDX2.DirectSound.FlangerSettings"/> structure that receives the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXFlanger::GetAllParameters([Out] LPDSFXFlanger pDsFxFlanger)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.FlangerSettings pDsFxFlanger) {
            unsafe {
                pDsFxFlanger = new SlimDX2.DirectSound.FlangerSettings();
                SlimDX2.Result __result__;
                fixed (void* pDsFxFlanger_ = &pDsFxFlanger)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDsFxFlanger_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundFXEcho</unmanaged>
    [Guid("8bd28edf-50db-4e92-a2bd-445488d1ed42")]
    public partial class Echo : SlimDX2.ComObject {
        public Echo(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the echo parameters of a buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXEcho::GetAllParameters([Out] LPDSFXEcho pDsFxEcho)</unmanaged>
        public SlimDX2.DirectSound.EchoSettings AllParameters {
                get { SlimDX2.DirectSound.EchoSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(value); }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets the echo parameters of a buffer.	
        /// </summary>	
        /// <param name="pcDsFxEcho"> Address of a <see cref="SlimDX2.DirectSound.EchoSettings"/> structure that specifies the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXEcho::SetAllParameters([In] LPCDSFXEcho pcDsFxEcho)</unmanaged>
        internal SlimDX2.Result SetAllParameters(SlimDX2.DirectSound.EchoSettings pcDsFxEcho) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pcDsFxEcho);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetAllParameters method retrieves the echo parameters of a buffer.	
        /// </summary>	
        /// <param name="pDsFxEcho"> Address of a <see cref="SlimDX2.DirectSound.EchoSettings"/> structure that receives the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXEcho::GetAllParameters([Out] LPDSFXEcho pDsFxEcho)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.EchoSettings pDsFxEcho) {
            unsafe {
                pDsFxEcho = new SlimDX2.DirectSound.EchoSettings();
                SlimDX2.Result __result__;
                fixed (void* pDsFxEcho_ = &pDsFxEcho)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDsFxEcho_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundFXDistortion</unmanaged>
    [Guid("8ecf4326-455f-4d8b-bda9-8d5d3e9e3e0b")]
    public partial class Distortion : SlimDX2.ComObject {
        public Distortion(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the distortion parameters of a buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXDistortion::GetAllParameters([Out] LPDSFXDistortion pDsFxDistortion)</unmanaged>
        public SlimDX2.DirectSound.DistortionSettings AllParameters {
                get { SlimDX2.DirectSound.DistortionSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(value); }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets the distortion parameters of a buffer.	
        /// </summary>	
        /// <param name="pcDsFxDistortion"> Address of a <see cref="SlimDX2.DirectSound.DistortionSettings"/> structure that specifies the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXDistortion::SetAllParameters([In] LPCDSFXDistortion pcDsFxDistortion)</unmanaged>
        internal SlimDX2.Result SetAllParameters(SlimDX2.DirectSound.DistortionSettings pcDsFxDistortion) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pcDsFxDistortion);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetAllParameters method retrieves the distortion parameters of a buffer.	
        /// </summary>	
        /// <param name="pDsFxDistortion"> Address of a <see cref="SlimDX2.DirectSound.DistortionSettings"/> structure that receives the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXDistortion::GetAllParameters([Out] LPDSFXDistortion pDsFxDistortion)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.DistortionSettings pDsFxDistortion) {
            unsafe {
                pDsFxDistortion = new SlimDX2.DirectSound.DistortionSettings();
                SlimDX2.Result __result__;
                fixed (void* pDsFxDistortion_ = &pDsFxDistortion)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDsFxDistortion_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundFXCompressor</unmanaged>
    [Guid("4bbd1154-62f6-4e2c-a15c-d3b6c417f7a0")]
    public partial class Compressor : SlimDX2.ComObject {
        public Compressor(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the compression parameters of a buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXCompressor::GetAllParameters([Out] LPDSFXCompressor pDsFxCompressor)</unmanaged>
        public SlimDX2.DirectSound.CompressorSettings AllParameters {
                get { SlimDX2.DirectSound.CompressorSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(ref value); }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets the compression parameters of a buffer.	
        /// </summary>	
        /// <param name="pcDsFxCompressor"> Address of a <see cref="SlimDX2.DirectSound.CompressorSettings"/> structure that specifies the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXCompressor::SetAllParameters([In] LPCDSFXCompressor pcDsFxCompressor)</unmanaged>
        internal SlimDX2.Result SetAllParameters(ref SlimDX2.DirectSound.CompressorSettings pcDsFxCompressor) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* pcDsFxCompressor_ = &pcDsFxCompressor)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, pcDsFxCompressor_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetAllParameters method retrieves the compression parameters of a buffer.	
        /// </summary>	
        /// <param name="pDsFxCompressor"> Address of a <see cref="SlimDX2.DirectSound.CompressorSettings"/> structure that receives the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXCompressor::GetAllParameters([Out] LPDSFXCompressor pDsFxCompressor)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.CompressorSettings pDsFxCompressor) {
            unsafe {
                pDsFxCompressor = new SlimDX2.DirectSound.CompressorSettings();
                SlimDX2.Result __result__;
                fixed (void* pDsFxCompressor_ = &pDsFxCompressor)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDsFxCompressor_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundFXParamEq</unmanaged>
    [Guid("c03ca9fe-fe90-4204-8078-82334cd177da")]
    public partial class ParamEq : SlimDX2.ComObject {
        public ParamEq(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the parametric equalizer parameters of a buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXParamEq::GetAllParameters([Out] LPDSFXParamEq pDsFxParamEq)</unmanaged>
        public SlimDX2.DirectSound.ParamEqSettings AllParameters {
                get { SlimDX2.DirectSound.ParamEqSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(value); }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets the parametric equalizer parameters of a buffer.	
        /// </summary>	
        /// <param name="pcDsFxParamEq"> Address of a <see cref="SlimDX2.DirectSound.ParamEqSettings"/> structure that specifies the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXParamEq::SetAllParameters([In] LPCDSFXParamEq pcDsFxParamEq)</unmanaged>
        internal SlimDX2.Result SetAllParameters(SlimDX2.DirectSound.ParamEqSettings pcDsFxParamEq) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pcDsFxParamEq);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetAllParameters method retrieves the parametric equalizer parameters of a buffer.	
        /// </summary>	
        /// <param name="pDsFxParamEq"> Address of a <see cref="SlimDX2.DirectSound.ParamEqSettings"/> structure that receives the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXParamEq::GetAllParameters([Out] LPDSFXParamEq pDsFxParamEq)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.ParamEqSettings pDsFxParamEq) {
            unsafe {
                pDsFxParamEq = new SlimDX2.DirectSound.ParamEqSettings();
                SlimDX2.Result __result__;
                fixed (void* pDsFxParamEq_ = &pDsFxParamEq)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDsFxParamEq_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundFXI3DL2Reverb</unmanaged>
    [Guid("4b166a6a-0d66-43f3-80e3-ee6280dee1a4")]
    public partial class I3DL2Reverb : SlimDX2.ComObject {
        public I3DL2Reverb(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetAllParameters([Out] LPDSFXI3DL2Reverb pDsFxI3DL2Reverb)</unmanaged>
        public SlimDX2.DirectSound.I3DL2ReverbSettings AllParameters {
                get { SlimDX2.DirectSound.I3DL2ReverbSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(ref value); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetPreset([Out] int* pdwPreset)</unmanaged>
        public int Preset {
                get { int __output__; GetPreset(out __output__); return __output__; }
                set { SetPreset(value); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetQuality([Out] LONG* plQuality)</unmanaged>
        public int Quality {
                get { int __output__; GetQuality(out __output__); return __output__; }
                set { SetQuality(value); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="pcDsFxI3DL2Reverb">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::SetAllParameters([In] LPCDSFXI3DL2Reverb pcDsFxI3DL2Reverb)</unmanaged>
        internal SlimDX2.Result SetAllParameters(ref SlimDX2.DirectSound.I3DL2ReverbSettings pcDsFxI3DL2Reverb) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* pcDsFxI3DL2Reverb_ = &pcDsFxI3DL2Reverb)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, pcDsFxI3DL2Reverb_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="pDsFxI3DL2Reverb">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetAllParameters([Out] LPDSFXI3DL2Reverb pDsFxI3DL2Reverb)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.I3DL2ReverbSettings pDsFxI3DL2Reverb) {
            unsafe {
                pDsFxI3DL2Reverb = new SlimDX2.DirectSound.I3DL2ReverbSettings();
                SlimDX2.Result __result__;
                fixed (void* pDsFxI3DL2Reverb_ = &pDsFxI3DL2Reverb)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDsFxI3DL2Reverb_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="preset">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::SetPreset([None] int dwPreset)</unmanaged>
        internal SlimDX2.Result SetPreset(int preset) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 5 * 4, preset);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="resetRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetPreset([Out] int* pdwPreset)</unmanaged>
        internal SlimDX2.Result GetPreset(out int resetRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* resetRef_ = &resetRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 6 * 4, resetRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="quality">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::SetQuality([None] LONG lQuality)</unmanaged>
        internal SlimDX2.Result SetQuality(int quality) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 7 * 4, quality);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="lQualityRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXI3DL2Reverb::GetQuality([Out] LONG* plQuality)</unmanaged>
        internal SlimDX2.Result GetQuality(out int lQualityRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* lQualityRef_ = &lQualityRef)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 8 * 4, lQualityRef_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundFXWavesReverb</unmanaged>
    [Guid("46858c3a-0dc6-45e3-b760-d4eef16cb325")]
    public partial class WavesReverb : SlimDX2.ComObject {
        public WavesReverb(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the music reverberation parameters of a buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundFXWavesReverb::GetAllParameters([Out] LPDSFXWavesReverb pDsFxWavesReverb)</unmanaged>
        public SlimDX2.DirectSound.WavesReverbSettings AllParameters {
                get { SlimDX2.DirectSound.WavesReverbSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(value); }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets the music reverberation parameters of a buffer.	
        /// </summary>	
        /// <param name="pcDsFxWavesReverb"> Address of a <see cref="SlimDX2.DirectSound.WavesReverbSettings"/> structure that specifies the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXWavesReverb::SetAllParameters([In] LPCDSFXWavesReverb pcDsFxWavesReverb)</unmanaged>
        internal SlimDX2.Result SetAllParameters(SlimDX2.DirectSound.WavesReverbSettings pcDsFxWavesReverb) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pcDsFxWavesReverb);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetAllParameters method retrieves the music reverberation parameters of a buffer.	
        /// </summary>	
        /// <param name="pDsFxWavesReverb"> Address of a <see cref="SlimDX2.DirectSound.WavesReverbSettings"/> structure that receives the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFXWavesReverb::GetAllParameters([Out] LPDSFXWavesReverb pDsFxWavesReverb)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.WavesReverbSettings pDsFxWavesReverb) {
            unsafe {
                pDsFxWavesReverb = new SlimDX2.DirectSound.WavesReverbSettings();
                SlimDX2.Result __result__;
                fixed (void* pDsFxWavesReverb_ = &pDsFxWavesReverb)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDsFxWavesReverb_);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundCaptureFXAec</unmanaged>
    [Guid("ad74143d-903d-4ab7-8066-28d363036d65")]
    public partial class AcousticEchoCancel : SlimDX2.ComObject {
        public AcousticEchoCancel(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the acoustic echo cancellation parameters of a buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundCaptureFXAec::GetAllParameters([Out] LPDSCFXAec pDscFxAec)</unmanaged>
        public SlimDX2.DirectSound.AcousticEchoCancelSettings AllParameters {
                get { SlimDX2.DirectSound.AcousticEchoCancelSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(value); }
        }
        
        /// <summary>	
        /// The IDirectSoundCaptureFXAec8::GetStatus method retrieves the status of the effect.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundCaptureFXAec::GetStatus([Out] int* pdwStatus)</unmanaged>
        public int Status {
                get { int __output__; GetStatus(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets the acoustic echo cancellation parameters of a buffer.	
        /// </summary>	
        /// <param name="pDscFxAec"> Address of a <see cref="SlimDX2.DirectSound.AcousticEchoCancelSettings"/> structure that specifies the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureFXAec::SetAllParameters([In] LPCDSCFXAec pDscFxAec)</unmanaged>
        internal SlimDX2.Result SetAllParameters(SlimDX2.DirectSound.AcousticEchoCancelSettings pDscFxAec) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pDscFxAec);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetAllParameters method retrieves the acoustic echo cancellation parameters of a buffer.	
        /// </summary>	
        /// <param name="pDscFxAec"> Address of a <see cref="SlimDX2.DirectSound.AcousticEchoCancelSettings"/> structure that receives the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureFXAec::GetAllParameters([Out] LPDSCFXAec pDscFxAec)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.AcousticEchoCancelSettings pDscFxAec) {
            unsafe {
                pDscFxAec = new SlimDX2.DirectSound.AcousticEchoCancelSettings();
                SlimDX2.Result __result__;
                fixed (void* pDscFxAec_ = &pDscFxAec)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDscFxAec_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The IDirectSoundCaptureFXAec8::GetStatus method retrieves the status of the effect.	
        /// </summary>	
        /// <param name="status"> Address of a DWORD variable to receive the status. The following flags are defined. See Remarks.  ConstantValue DSCFX_AEC_STATUS_HISTORY_UNINITIALIZED0x0 DSCFX_AEC_STATUS_HISTORY_CONTINUOUSLY_CONVERGED0x1 DSCFX_AEC_STATUS_HISTORY_PREVIOUSLY_DIVERGED0x2 DSCFX_AEC_STATUS_CURRENTLY_CONVERGED0x8  </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureFXAec::GetStatus([Out] int* pdwStatus)</unmanaged>
        internal SlimDX2.Result GetStatus(out int status) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* status_ = &status)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 5 * 4, status_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The IDirectSoundCaptureFXAec8::Reset method resets the effect to its initial state.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureFXAec::Reset()</unmanaged>
        public SlimDX2.Result Reset() {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 6 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundCaptureFXNoiseSuppress</unmanaged>
    [Guid("ed311e41-fbae-4175-9625-cd0854f693ca")]
    public partial class NoiseSuppress : SlimDX2.ComObject {
        public NoiseSuppress(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The GetAllParameters method retrieves the noise suppression parameters of a buffer.	
        /// </summary>	
        /// <unmanaged>HRESULT IDirectSoundCaptureFXNoiseSuppress::GetAllParameters([Out] LPDSCFXNoiseSuppress pDscFxNoiseSuppress)</unmanaged>
        public SlimDX2.DirectSound.NoiseSuppressSettings AllParameters {
                get { SlimDX2.DirectSound.NoiseSuppressSettings __output__; GetAllParameters(out __output__); return __output__; }
                set { SetAllParameters(value); }
        }
        
        /// <summary>	
        /// The SetAllParameters method sets the noise suppression parameters of a buffer.	
        /// </summary>	
        /// <param name="pcDscFxNoiseSuppress"> Address of a <see cref="SlimDX2.DirectSound.NoiseSuppressSettings"/> structure that specifies the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureFXNoiseSuppress::SetAllParameters([In] LPCDSCFXNoiseSuppress pcDscFxNoiseSuppress)</unmanaged>
        internal SlimDX2.Result SetAllParameters(SlimDX2.DirectSound.NoiseSuppressSettings pcDscFxNoiseSuppress) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pcDscFxNoiseSuppress);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The GetAllParameters method retrieves the noise suppression parameters of a buffer.	
        /// </summary>	
        /// <param name="pDscFxNoiseSuppress"> Address of a <see cref="SlimDX2.DirectSound.NoiseSuppressSettings"/> structure that receives the effect parameters. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureFXNoiseSuppress::GetAllParameters([Out] LPDSCFXNoiseSuppress pDscFxNoiseSuppress)</unmanaged>
        internal SlimDX2.Result GetAllParameters(out SlimDX2.DirectSound.NoiseSuppressSettings pDscFxNoiseSuppress) {
            unsafe {
                pDscFxNoiseSuppress = new SlimDX2.DirectSound.NoiseSuppressSettings();
                SlimDX2.Result __result__;
                fixed (void* pDscFxNoiseSuppress_ = &pDscFxNoiseSuppress)
                    __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 4 * 4, pDscFxNoiseSuppress_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// The IDirectSoundCaptureFXNoiseSuppress8::Reset method resets the effect to its initial state.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundCaptureFXNoiseSuppress::Reset()</unmanaged>
        public SlimDX2.Result Reset() {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 5 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>IDirectSoundFullDuplex</unmanaged>
    [Guid("edcb4c7a-daab-4216-a42e-6c50596ddc1d")]
    public partial class FullDuplex : SlimDX2.ComObject {
        public FullDuplex(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// The Initialize method initializes a full-duplex object that was created by using CoCreateInstance.	
        /// </summary>	
        /// <param name="pCaptureGuid"> Address of the GUID that identifies the sound capture device for full duplex input. Must be one of the GUIDs returned by {{DirectSoundCaptureEnumerate}}, NULL for the default capture device, or one of the values shown in the following table. ValueDescription DSDEVID_DefaultCaptureSystem-wide default audio capture device. DSDEVID_DefaultVoiceCaptureDefault voice capture device.  </param>
        /// <param name="pRenderGuid"> Address of the GUID that identifies the sound rendering device for full-duplex output. Must be one of the GUIDs returned by {{DirectSoundEnumerate}}, NULL for the default rendering device, or one of the values shown in the following table.   ValueDescription DSDEVID_DefaultPlaybackSystem-wide default audio playback device. DSDEVID_DefaultVoicePlaybackDefault voice playback device.  </param>
        /// <param name="pDscBufferDesc"> Address of a <see cref="SlimDX2.DirectSound.CaptureBufferDescription"/> structure that specifies the characteristics of the capture buffer. </param>
        /// <param name="pDsBufferDesc"> Address of a <see cref="SlimDX2.DirectSound.SoundBufferDescription"/> structure that specifies the characteristics of the render buffer. </param>
        /// <param name="hWnd"> Handle to the application window. </param>
        /// <param name="level"> Cooperative level for the device. For more information, see {{SetCooperativeLevel}}. </param>
        /// <param name="plpDirectSoundCaptureBuffer8"> Address of a variable that receives the <see cref="SlimDX2.DirectSound.CaptureBuffer"/> interface of the capture buffer. </param>
        /// <param name="plpDirectSoundBuffer8"> Address of a variable that receives the <see cref="SlimDX2.DirectSound.SecondarySoundBuffer"/> interface of the render buffer. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IDirectSoundFullDuplex::Initialize([In] LPCGUID pCaptureGuid,[In] LPCGUID pRenderGuid,[In] LPCDSCBUFFERDESC lpDscBufferDesc,[In] LPCDSBUFFERDESC lpDsBufferDesc,[None] HWND hWnd,[None] int dwLevel,[Out] LPLPDIRECTSOUNDCAPTUREBUFFER8 lplpDirectSoundCaptureBuffer8,[Out] LPLPDIRECTSOUNDBUFFER8 lplpDirectSoundBuffer8)</unmanaged>
        public SlimDX2.Result Initialize(Guid pCaptureGuid, Guid pRenderGuid, ref SlimDX2.DirectSound.CaptureBufferDescription pDscBufferDesc, ref SlimDX2.DirectSound.SoundBufferDescription pDsBufferDesc, IntPtr hWnd, int level, out SlimDX2.DirectSound.CaptureBuffer plpDirectSoundCaptureBuffer8, out SlimDX2.DirectSound.SecondarySoundBuffer plpDirectSoundBuffer8) {
            unsafe {
                SlimDX2.DirectSound.CaptureBufferDescription.__Native pDscBufferDesc_ = SlimDX2.DirectSound.CaptureBufferDescription.__NewNative();
                pDscBufferDesc.__MarshalTo(ref pDscBufferDesc_);
                SlimDX2.DirectSound.SoundBufferDescription.__Native pDsBufferDesc_ = SlimDX2.DirectSound.SoundBufferDescription.__NewNative();
                pDsBufferDesc.__MarshalTo(ref pDsBufferDesc_);
                IntPtr plpDirectSoundCaptureBuffer8_ = IntPtr.Zero;
                IntPtr plpDirectSoundBuffer8_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.DirectSound.LocalInterop.Calliint(_nativePointer, 3 * 4, &pCaptureGuid, &pRenderGuid, &pDscBufferDesc_, &pDsBufferDesc_, (void*)hWnd, level, &plpDirectSoundCaptureBuffer8_, &plpDirectSoundBuffer8_);
                pDscBufferDesc_.__MarshalFree();
                pDsBufferDesc_.__MarshalFree();
                plpDirectSoundCaptureBuffer8 = (plpDirectSoundCaptureBuffer8_ == IntPtr.Zero)?null:new SlimDX2.DirectSound.CaptureBuffer(plpDirectSoundCaptureBuffer8_);	
                plpDirectSoundBuffer8 = (plpDirectSoundBuffer8_ == IntPtr.Zero)?null:new SlimDX2.DirectSound.SecondarySoundBuffer(plpDirectSoundBuffer8_);	
                __result__.CheckError();
                return __result__;
            }
        }
    }
}
