// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Functions for SlimDX2.DirectSound namespace.
//     This code was generated by a tool.
//     Date : 11/15/2010 14:52:49
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SlimDX2.DirectSound {


	/// <summary>
    /// DSound Functions.
    /// </summary>
    static partial class DSound {   
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="pcGuidDevice">No documentation.</param>
        /// <param name="dSRef">No documentation.</param>
        /// <param name="unkOuterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT DirectSoundCreate([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUND* ppDS,[None] IUnknown* pUnkOuter)</unmanaged>
		public static SlimDX2.Result Create(Guid? pcGuidDevice, out SlimDX2.DirectSound.DirectSoundBase dSRef, SlimDX2.ComObject unkOuterRef) {
            unsafe {
							
                Guid pcGuidDevice_ = new Guid();
                if (pcGuidDevice.HasValue)
                    pcGuidDevice_ = pcGuidDevice.Value;								
                IntPtr dSRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)DirectSoundCreate_((pcGuidDevice.HasValue)?new IntPtr(&pcGuidDevice_):IntPtr.Zero, out dSRef_, (unkOuterRef == null)?IntPtr.Zero:unkOuterRef.NativePointer);
                dSRef = (dSRef_ == IntPtr.Zero)?null:new SlimDX2.DirectSound.DirectSoundBase(dSRef_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT DirectSoundCreate([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUND* ppDS,[None] IUnknown* pUnkOuter)</unmanaged>
		[DllImport("dsound.dll", EntryPoint = "DirectSoundCreate", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result DirectSoundCreate_(IntPtr pcGuidDevice, out IntPtr dSRef, IntPtr unkOuterRef);		
        
        /// <summary>	
        /// The DirectSoundEnumerate function enumerates the DirectSound drivers installed in the system.	
        /// </summary>	
        /// <param name="pDSEnumCallback"> Address of the {{DSEnumCallback}} function that will be called for each device installed in the system. </param>
        /// <param name="contextRef"> Address of the user-defined context passed to the enumeration callback function every time that function is called. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT DirectSoundEnumerateA([In] LPDSENUMCALLBACKA pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
		public static SlimDX2.Result EnumerateA(SlimDX2.FunctionCallback pDSEnumCallback, IntPtr contextRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)DirectSoundEnumerateA_( pDSEnumCallback,  contextRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT DirectSoundEnumerateA([In] LPDSENUMCALLBACKA pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
		[DllImport("dsound.dll", EntryPoint = "DirectSoundEnumerateA", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result DirectSoundEnumerateA_(SlimDX2.FunctionCallback pDSEnumCallback, IntPtr contextRef);		
        
        /// <summary>	
        /// The DirectSoundEnumerate function enumerates the DirectSound drivers installed in the system.	
        /// </summary>	
        /// <param name="pDSEnumCallback"> Address of the {{DSEnumCallback}} function that will be called for each device installed in the system. </param>
        /// <param name="contextRef"> Address of the user-defined context passed to the enumeration callback function every time that function is called. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT DirectSoundEnumerateW([In] LPDSENUMCALLBACKW pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
		public static SlimDX2.Result EnumerateW(SlimDX2.FunctionCallback pDSEnumCallback, IntPtr contextRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)DirectSoundEnumerateW_( pDSEnumCallback,  contextRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT DirectSoundEnumerateW([In] LPDSENUMCALLBACKW pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
		[DllImport("dsound.dll", EntryPoint = "DirectSoundEnumerateW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result DirectSoundEnumerateW_(SlimDX2.FunctionCallback pDSEnumCallback, IntPtr contextRef);		
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="pcGuidDevice">No documentation.</param>
        /// <param name="dSCRef">No documentation.</param>
        /// <param name="unkOuterRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT DirectSoundCaptureCreate([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUNDCAPTURE* ppDSC,[None] IUnknown* pUnkOuter)</unmanaged>
		public static SlimDX2.Result CaptureCreate(Guid? pcGuidDevice, out SlimDX2.DirectSound.Capture dSCRef, SlimDX2.ComObject unkOuterRef) {
            unsafe {
							
                Guid pcGuidDevice_ = new Guid();
                if (pcGuidDevice.HasValue)
                    pcGuidDevice_ = pcGuidDevice.Value;								
                IntPtr dSCRef_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)DirectSoundCaptureCreate_((pcGuidDevice.HasValue)?new IntPtr(&pcGuidDevice_):IntPtr.Zero, out dSCRef_, (unkOuterRef == null)?IntPtr.Zero:unkOuterRef.NativePointer);
                dSCRef = (dSCRef_ == IntPtr.Zero)?null:new SlimDX2.DirectSound.Capture(dSCRef_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT DirectSoundCaptureCreate([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUNDCAPTURE* ppDSC,[None] IUnknown* pUnkOuter)</unmanaged>
		[DllImport("dsound.dll", EntryPoint = "DirectSoundCaptureCreate", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result DirectSoundCaptureCreate_(IntPtr pcGuidDevice, out IntPtr dSCRef, IntPtr unkOuterRef);		
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="pDSEnumCallback">No documentation.</param>
        /// <param name="contextRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT DirectSoundCaptureEnumerateA([In] LPDSENUMCALLBACKA pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
		public static SlimDX2.Result CaptureEnumerateA(SlimDX2.FunctionCallback pDSEnumCallback, IntPtr contextRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)DirectSoundCaptureEnumerateA_( pDSEnumCallback,  contextRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT DirectSoundCaptureEnumerateA([In] LPDSENUMCALLBACKA pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
		[DllImport("dsound.dll", EntryPoint = "DirectSoundCaptureEnumerateA", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result DirectSoundCaptureEnumerateA_(SlimDX2.FunctionCallback pDSEnumCallback, IntPtr contextRef);		
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <param name="pDSEnumCallback">No documentation.</param>
        /// <param name="contextRef">No documentation.</param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT DirectSoundCaptureEnumerateW([In] LPDSENUMCALLBACKW pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
		public static SlimDX2.Result CaptureEnumerateW(SlimDX2.FunctionCallback pDSEnumCallback, IntPtr contextRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)DirectSoundCaptureEnumerateW_( pDSEnumCallback,  contextRef);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT DirectSoundCaptureEnumerateW([In] LPDSENUMCALLBACKW pDSEnumCallback,[In, Optional] void* pContext)</unmanaged>
		[DllImport("dsound.dll", EntryPoint = "DirectSoundCaptureEnumerateW", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result DirectSoundCaptureEnumerateW_(SlimDX2.FunctionCallback pDSEnumCallback, IntPtr contextRef);		
        
        /// <summary>	
        /// The DirectSoundCreate8 function creates and initializes an object that supports the <see cref="SlimDX2.DirectSound.DirectSound"/> interface.	
        /// </summary>	
        /// <param name="pcGuidDevice"> Address of the GUID that identifies the sound device. The value of this parameter must be one of the GUIDs returned by DirectSoundEnumerate, or NULL for the default device, or one of the following values. ValueDescription DSDEVID_DefaultPlaybackSystem-wide default audio playback device. Equivalent to NULL. DSDEVID_DefaultVoicePlaybackDefault voice playback device.  </param>
        /// <param name="dS8Ref"> Address of a variable to receive an <see cref="SlimDX2.DirectSound.DirectSound"/> interface pointer. </param>
        /// <param name="unkOuterRef"> Address of the controlling object's IUnknown interface for COM aggregation. Must be NULL, because aggregation is not supported. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT DirectSoundCreate8([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUND8* ppDS8,[None] IUnknown* pUnkOuter)</unmanaged>
		public static SlimDX2.Result Create8(Guid? pcGuidDevice, out SlimDX2.DirectSound.DirectSound dS8Ref, SlimDX2.ComObject unkOuterRef) {
            unsafe {
							
                Guid pcGuidDevice_ = new Guid();
                if (pcGuidDevice.HasValue)
                    pcGuidDevice_ = pcGuidDevice.Value;								
                IntPtr dS8Ref_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)DirectSoundCreate8_((pcGuidDevice.HasValue)?new IntPtr(&pcGuidDevice_):IntPtr.Zero, out dS8Ref_, (unkOuterRef == null)?IntPtr.Zero:unkOuterRef.NativePointer);
                dS8Ref = (dS8Ref_ == IntPtr.Zero)?null:new SlimDX2.DirectSound.DirectSound(dS8Ref_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT DirectSoundCreate8([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUND8* ppDS8,[None] IUnknown* pUnkOuter)</unmanaged>
		[DllImport("dsound.dll", EntryPoint = "DirectSoundCreate8", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result DirectSoundCreate8_(IntPtr pcGuidDevice, out IntPtr dS8Ref, IntPtr unkOuterRef);		
        
        /// <summary>	
        /// The DirectSoundCaptureCreate8 function creates and initializes an object that supports the IDirectSoundCapture8 interface. Although the older DirectSoundCaptureCreate function can also be used to obtain the {{IDirectSoundCapture8}} interface, the object created by that function cannot be used to create capture buffers that support the <see cref="SlimDX2.DirectSound.CaptureBuffer"/> interface.	
        /// </summary>	
        /// <param name="pcGuidDevice"> Address of the GUID that identifies the sound capture device. The value of this parameter must be one of the GUIDs returned by {{DirectSoundCaptureEnumerate}}, or NULL for the default device, or one of the following values. ValueDescription DSDEVID_DefaultCaptureSystem-wide default audio capture device. DSDEVID_DefaultVoiceCaptureDefault voice capture device.  </param>
        /// <param name="dSC8Ref"> Address of a variable to receive an {{IDirectSoundCapture8}} interface pointer. </param>
        /// <param name="unkOuterRef"> Address of the controlling object's IUnknown interface for COM aggregation. Must be NULL, because aggregation is not supported. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT DirectSoundCaptureCreate8([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUNDCAPTURE8* ppDSC8,[None] IUnknown* pUnkOuter)</unmanaged>
		public static SlimDX2.Result CaptureCreate8(Guid? pcGuidDevice, out SlimDX2.DirectSound.Capture dSC8Ref, SlimDX2.ComObject unkOuterRef) {
            unsafe {
							
                Guid pcGuidDevice_ = new Guid();
                if (pcGuidDevice.HasValue)
                    pcGuidDevice_ = pcGuidDevice.Value;								
                IntPtr dSC8Ref_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)DirectSoundCaptureCreate8_((pcGuidDevice.HasValue)?new IntPtr(&pcGuidDevice_):IntPtr.Zero, out dSC8Ref_, (unkOuterRef == null)?IntPtr.Zero:unkOuterRef.NativePointer);
                dSC8Ref = (dSC8Ref_ == IntPtr.Zero)?null:new SlimDX2.DirectSound.Capture(dSC8Ref_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT DirectSoundCaptureCreate8([In, Optional] LPCGUID pcGuidDevice,[Out] LPDIRECTSOUNDCAPTURE8* ppDSC8,[None] IUnknown* pUnkOuter)</unmanaged>
		[DllImport("dsound.dll", EntryPoint = "DirectSoundCaptureCreate8", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result DirectSoundCaptureCreate8_(IntPtr pcGuidDevice, out IntPtr dSC8Ref, IntPtr unkOuterRef);		
        
        /// <summary>	
        /// The DirectSoundFullDuplexCreate function is documented under a different name. For complete documentation of this function, see {{DirectSoundFullDuplexCreate8}}. 	
        /// </summary>	
        /// <param name="pcGuidCaptureDevice"></param>
        /// <param name="pcGuidRenderDevice">No documentation.</param>
        /// <param name="pcDSCBufferDesc">No documentation.</param>
        /// <param name="pcDSBufferDesc">No documentation.</param>
        /// <param name="hWnd">No documentation.</param>
        /// <param name="dwLevel">No documentation.</param>
        /// <param name="dSFDRef">No documentation.</param>
        /// <param name="dSCBuffer8Ref">No documentation.</param>
        /// <param name="dSBuffer8Ref">No documentation.</param>
        /// <param name="unkOuterRef">No documentation.</param>
        /// <returns> If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code. </returns>
        /// <unmanaged>HRESULT DirectSoundFullDuplexCreate([In, Optional] LPCGUID pcGuidCaptureDevice,[In, Optional] LPCGUID pcGuidRenderDevice,[In] LPCDSCBUFFERDESC pcDSCBufferDesc,[In] LPCDSBUFFERDESC pcDSBufferDesc,[None] void* hWnd,[None] int dwLevel,[Out] LPDIRECTSOUNDFULLDUPLEX* ppDSFD,[Out] LPDIRECTSOUNDCAPTUREBUFFER8* ppDSCBuffer8,[Out] LPDIRECTSOUNDBUFFER8* ppDSBuffer8,[None] IUnknown* pUnkOuter)</unmanaged>
		public static SlimDX2.Result FullDuplexCreate(Guid? pcGuidCaptureDevice, Guid? pcGuidRenderDevice, ref SlimDX2.DirectSound.CaptureBufferDescription pcDSCBufferDesc, ref SlimDX2.DirectSound.SoundBufferDescription pcDSBufferDesc, IntPtr hWnd, int dwLevel, out SlimDX2.DirectSound.FullDuplex dSFDRef, out SlimDX2.DirectSound.CaptureBuffer dSCBuffer8Ref, out SlimDX2.DirectSound.SecondarySoundBuffer dSBuffer8Ref, SlimDX2.ComObject unkOuterRef) {
            unsafe {
							
                Guid pcGuidCaptureDevice_ = new Guid();
                if (pcGuidCaptureDevice.HasValue)
                    pcGuidCaptureDevice_ = pcGuidCaptureDevice.Value;								
							
                Guid pcGuidRenderDevice_ = new Guid();
                if (pcGuidRenderDevice.HasValue)
                    pcGuidRenderDevice_ = pcGuidRenderDevice.Value;								
                SlimDX2.DirectSound.CaptureBufferDescription.__Native pcDSCBufferDesc_ = new SlimDX2.DirectSound.CaptureBufferDescription.__Native();
                pcDSCBufferDesc.__MarshalTo(ref pcDSCBufferDesc_);
                SlimDX2.DirectSound.SoundBufferDescription.__Native pcDSBufferDesc_ = new SlimDX2.DirectSound.SoundBufferDescription.__Native();
                pcDSBufferDesc.__MarshalTo(ref pcDSBufferDesc_);
                IntPtr dSFDRef_ = IntPtr.Zero;
                IntPtr dSCBuffer8Ref_ = IntPtr.Zero;
                IntPtr dSBuffer8Ref_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)DirectSoundFullDuplexCreate_((pcGuidCaptureDevice.HasValue)?new IntPtr(&pcGuidCaptureDevice_):IntPtr.Zero, (pcGuidRenderDevice.HasValue)?new IntPtr(&pcGuidRenderDevice_):IntPtr.Zero, ref  pcDSCBufferDesc_, ref  pcDSBufferDesc_,  hWnd,  dwLevel, out dSFDRef_, out dSCBuffer8Ref_, out dSBuffer8Ref_, (unkOuterRef == null)?IntPtr.Zero:unkOuterRef.NativePointer);
                dSFDRef = (dSFDRef_ == IntPtr.Zero)?null:new SlimDX2.DirectSound.FullDuplex(dSFDRef_);
                dSCBuffer8Ref = (dSCBuffer8Ref_ == IntPtr.Zero)?null:new SlimDX2.DirectSound.CaptureBuffer(dSCBuffer8Ref_);
                dSBuffer8Ref = (dSBuffer8Ref_ == IntPtr.Zero)?null:new SlimDX2.DirectSound.SecondarySoundBuffer(dSBuffer8Ref_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT DirectSoundFullDuplexCreate([In, Optional] LPCGUID pcGuidCaptureDevice,[In, Optional] LPCGUID pcGuidRenderDevice,[In] LPCDSCBUFFERDESC pcDSCBufferDesc,[In] LPCDSBUFFERDESC pcDSBufferDesc,[None] void* hWnd,[None] int dwLevel,[Out] LPDIRECTSOUNDFULLDUPLEX* ppDSFD,[Out] LPDIRECTSOUNDCAPTUREBUFFER8* ppDSCBuffer8,[Out] LPDIRECTSOUNDBUFFER8* ppDSBuffer8,[None] IUnknown* pUnkOuter)</unmanaged>
		[DllImport("dsound.dll", EntryPoint = "DirectSoundFullDuplexCreate", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result DirectSoundFullDuplexCreate_(IntPtr pcGuidCaptureDevice, IntPtr pcGuidRenderDevice, ref SlimDX2.DirectSound.CaptureBufferDescription.__Native pcDSCBufferDesc, ref SlimDX2.DirectSound.SoundBufferDescription.__Native pcDSBufferDesc, IntPtr hWnd, int dwLevel, out IntPtr dSFDRef, out IntPtr dSCBuffer8Ref, out IntPtr dSBuffer8Ref, IntPtr unkOuterRef);		
        
        /// <summary>	
        ///  	
        /// </summary>	
        /// <remarks>	
        ///  If a mixer or presenter uses Direct3D 9, it must return the value IID_IDirect3DDevice9 in pDeviceID. The EVR's default mixer and presenter both return this value. If you write a custom mixer or presenter, it can return some other value. However, the mixer and presenter must use matching device identifiers. 	
        /// </remarks>	
        /// <param name="pGuidSrc"> Receives the device identifier. Generally, the value is IID_IDirect3DDevice9. </param>
        /// <param name="pGuidDest">No documentation.</param>
        /// <returns> The method returns an HRESULT. Possible values include, but are not limited to, those in the following table.  Return codeDescription   S_OK   The method succeeded.    MF_E_SHUTDOWN   The video renderer has been shut down.   ? </returns>
        /// <unmanaged>HRESULT GetDeviceID([In, Optional] LPCGUID pGuidSrc,[Out] LPGUID pGuidDest)</unmanaged>
		public static SlimDX2.Result GetDeviceID(Guid? pGuidSrc, out Guid pGuidDest) {
            unsafe {
							
                Guid pGuidSrc_ = new Guid();
                if (pGuidSrc.HasValue)
                    pGuidSrc_ = pGuidSrc.Value;								
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)GetDeviceID_((pGuidSrc.HasValue)?new IntPtr(&pGuidSrc_):IntPtr.Zero, out pGuidDest);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT GetDeviceID([In, Optional] LPCGUID pGuidSrc,[Out] LPGUID pGuidDest)</unmanaged>
		[DllImport("dsound.dll", EntryPoint = "GetDeviceID", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result GetDeviceID_(IntPtr pGuidSrc, out Guid pGuidDest);		
    }
}