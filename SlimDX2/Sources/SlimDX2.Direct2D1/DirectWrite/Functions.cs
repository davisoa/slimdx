// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Functions for SlimDX2.DirectWrite namespace.
//     This code was generated by a tool.
//     Date : 11/07/2010 23:31:44
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace SlimDX2.DirectWrite {


	/// <summary>
    /// DWrite Functions.
    /// </summary>
    static partial class DWrite {   
        
        /// <summary>	
        /// Creates a DirectWrite factory object that is used for subsequent creation of individual DirectWrite objects.	
        /// </summary>	
        /// <remarks>	
        /// This function creates a {{DirectWrite}} factory object that is used for subsequent creation of individual DirectWrite objects. DirectWrite factory contains internal state data such as font loader registration and cached font data. In most cases it is recommended you use the shared factory object, because it allows multiple components that use DirectWrite to share internal DirectWrite state data, and thereby reduce memory usage. However, there are cases when it is desirable to reduce the impact of a component, such as a plug-in from an untrusted source, on the rest of the process, by sandboxing and isolating it from the rest of the process components. In such cases, it is recommended you use an isolated factory for the sandboxed component.The following example shows how to create a shared {{DirectWrite}} factory.	
        /// <code> if (SUCCEEDED(hr))	
        /// { hr = DWriteCreateFactory( DWRITE_FACTORY_TYPE_SHARED, __uuidof(IDWriteFactory), reinterpret_cast&lt;IUnknown**&gt;(&amp;pDWriteFactory_) );	
        /// } </code>	
        /// 	
        /// </remarks>	
        /// <param name="factoryType">A value that specifies whether the factory object will be shared or isolated.</param>
        /// <param name="iid">A GUID value that identifies the DirectWrite factory interface, such as __uuidof(IDWriteFactory).</param>
        /// <param name="factory">An address of a pointer to the newly created DirectWrite factory object.</param>
        /// <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        /// <unmanaged>HRESULT DWriteCreateFactory([In] DWRITE_FACTORY_TYPE factoryType,[In] REFIID iid,[Out] IUnknown** factory)</unmanaged>
		public static SlimDX2.Result CreateFactory(SlimDX2.DirectWrite.FactoryType factoryType, Guid iid, out SlimDX2.ComObject factory) {
            unsafe {
                IntPtr factory_ = IntPtr.Zero;
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)DWriteCreateFactory_( factoryType, ref  iid, out factory_);
                factory = (factory_ == IntPtr.Zero)?null:new SlimDX2.ComObject(factory_);
                __result__.CheckError();
                return __result__;
            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged>HRESULT DWriteCreateFactory([In] DWRITE_FACTORY_TYPE factoryType,[In] REFIID iid,[Out] IUnknown** factory)</unmanaged>
		[DllImport("dwrite.dll", EntryPoint = "DWriteCreateFactory", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static SlimDX2.Result DWriteCreateFactory_(SlimDX2.DirectWrite.FactoryType factoryType, ref Guid iid, out IntPtr factory);		
    }
}