// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Enums for SlimDX2.DirectWrite namespace.
//     This code was generated by a tool.
//     Date : 11/07/2010 23:15:08
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace SlimDX2.DirectWrite {

    
    /// <summary>	
    ///  Indicates the measuring method used for text layout.	
    /// </summary>	
    /// <unmanaged>DWRITE_MEASURING_MODE</unmanaged>
    public enum MeasuringMode : int {	
        
        /// <summary>	
        ///  Specifies that text is measured using glyph ideal metrics whose values are independent to the current display resolution.	
        /// </summary>	
        /// <unmanaged>DWRITE_MEASURING_MODE_NATURAL</unmanaged>
        Natural,
        
        /// <summary>	
        ///  Specifies that text is measured using glyph display-compatible metrics whose values tuned for the current display resolution.	
        /// </summary>	
        /// <unmanaged>DWRITE_MEASURING_MODE_GDI_CLASSIC</unmanaged>
        GdiClassic,
        
        /// <summary>	
        ///  Specifies that text is measured using the same glyph display metrics as text measured by GDI using a font created with CLEARTYPE_NATURAL_QUALITY.	
        /// </summary>	
        /// <unmanaged>DWRITE_MEASURING_MODE_GDI_NATURAL</unmanaged>
        GdiNatural,
    }
    
    /// <summary>	
    /// The type of a font represented by a single font file. Font formats that consist of multiple files, for example Type 1 .PFM and .PFB, have separate enum values for each of the file types.	
    /// </summary>	
    /// <unmanaged>DWRITE_FONT_FILE_TYPE</unmanaged>
    public enum FontFileType : int {	
        
        /// <summary>	
        /// Font type is not recognized by the DirectWrite font system.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FILE_TYPE_UNKNOWN</unmanaged>
        Unknown,
        
        /// <summary>	
        /// OpenType font with CFF outlines.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FILE_TYPE_CFF</unmanaged>
        Cff,
        
        /// <summary>	
        /// OpenType font with TrueType outlines.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FILE_TYPE_TRUETYPE</unmanaged>
        Truetype,
        
        /// <summary>	
        /// OpenType font that contains a TrueType collection.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION</unmanaged>
        TruetypeCollection,
        
        /// <summary>	
        /// Type 1 PFM font.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FILE_TYPE_TYPE1_PFM</unmanaged>
        Type1Pfm,
        
        /// <summary>	
        /// Type 1 PFB font.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FILE_TYPE_TYPE1_PFB</unmanaged>
        Type1Pfb,
        
        /// <summary>	
        /// Vector .FON font.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FILE_TYPE_VECTOR</unmanaged>
        Vector,
        
        /// <summary>	
        /// Bitmap .FON font.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FILE_TYPE_BITMAP</unmanaged>
        Bitmap,
    }
    
    /// <summary>	
    /// Indicates the file format of a complete font face.	
    /// </summary>	
    /// <remarks>	
    /// Font formats that consist of multiple files, such as Type 1 .PFM and .PFB, have a single enum entry.	
    /// </remarks>	
    /// <unmanaged>DWRITE_FONT_FACE_TYPE</unmanaged>
    public enum FontFaceType : int {	
        
        /// <summary>	
        /// OpenType font face with CFF outlines.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FACE_TYPE_CFF</unmanaged>
        Cff,
        
        /// <summary>	
        /// OpenType font face with TrueType outlines.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FACE_TYPE_TRUETYPE</unmanaged>
        Truetype,
        
        /// <summary>	
        /// OpenType font face that is a part of a TrueType collection.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION</unmanaged>
        TruetypeCollection,
        
        /// <summary>	
        /// A Type 1 font face.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FACE_TYPE_TYPE1</unmanaged>
        Type1,
        
        /// <summary>	
        /// A vector .FON format font face.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FACE_TYPE_VECTOR</unmanaged>
        Vector,
        
        /// <summary>	
        /// A bitmap .FON format font face.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FACE_TYPE_BITMAP</unmanaged>
        Bitmap,
        
        /// <summary>	
        /// Font face type is not recognized by the DirectWrite font system.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FACE_TYPE_UNKNOWN</unmanaged>
        Unknown,
    }
    
    /// <summary>	
    /// Specifies algorithmic style simulations to be applied to the font face. Bold and oblique simulations can be combined via bitwise OR operation.	
    /// </summary>	
    /// <remarks>	
    ///  Style simulations are not recommended for good typographic quality.	
    /// </remarks>	
    /// <unmanaged>DWRITE_FONT_SIMULATIONS</unmanaged>
    public enum FontSimulations : int {	
        
        /// <summary>	
        /// Indicates that no simulations are applied to the font face.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_SIMULATIONS_NONE</unmanaged>
        None = unchecked((int)0),			
        
        /// <summary>	
        /// Indicates that algorithmic emboldening is applied to the font face.  DWRITE_FONT_SIMULATIONS_BOLD increases weight by applying a widening algorithm to the glyph outline. This may  be used to simulate a bold weight where no designed bold weight is available.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_SIMULATIONS_BOLD</unmanaged>
        Bold = unchecked((int)1),			
        
        /// <summary>	
        /// Indicates that algorithmic italicization is applied to the font face. DWRITE_FONT_SIMULATIONS_OBLIQUE applies obliquing (shear) to the glyph outline. This may be used to simulate an oblique/italic style where no designed oblique/italic style is available.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_SIMULATIONS_OBLIQUE</unmanaged>
        Oblique = unchecked((int)2),			
    }
    
    /// <summary>	
    /// Represents the density of a typeface, in terms of the lightness or heaviness of the strokes. The enumerated values correspond to the usWeightClass definition in the OpenType specification. The usWeightClass represents an integer value between 1 and 999. Lower values indicate lighter weights; higher values indicate heavier weights.	
    /// </summary>	
    /// <remarks>	
    /// Weight differences are generally differentiated by an increased stroke or thickness that is associated with a given character in a typeface, as compared to a "normal" character from that same typeface. 	
    /// The following illustration shows an example of Normal and UltraBold weights for the Palatino Linotype typeface.?Illustration of the letter "W" in Normal and UltraBold weights?Note??Not all weights are available for all typefaces. When a weight is not available for a typeface, the closest matching weight is returned.Font weight values less than 1 or greater than 999 are considered invalid, and they are rejected by font API functions.	
    /// </remarks>	
    /// <unmanaged>DWRITE_FONT_WEIGHT</unmanaged>
    public enum FontWeight : int {	
        
        /// <summary>	
        /// Predefined font weight : Thin (100).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_THIN</unmanaged>
        Thin = unchecked((int)100),			
        
        /// <summary>	
        /// Predefined font weight : Extra-light (200).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_LIGHT</unmanaged>
        ExtraLight = unchecked((int)200),			
        
        /// <summary>	
        /// Predefined font weight : Ultra-light (200).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_LIGHT</unmanaged>
        UltraLight = unchecked((int)200),			
        
        /// <summary>	
        /// Predefined font weight : Light (300).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_LIGHT</unmanaged>
        Light = unchecked((int)300),			
        
        /// <summary>	
        /// Predefined font weight : Normal (400).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_NORMAL</unmanaged>
        Normal = unchecked((int)400),			
        
        /// <summary>	
        /// Predefined font weight : Regular (400).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_REGULAR</unmanaged>
        Regular = unchecked((int)400),			
        
        /// <summary>	
        /// Predefined font weight : Medium (500).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_MEDIUM</unmanaged>
        Medium = unchecked((int)500),			
        
        /// <summary>	
        /// Predefined font weight : Demi-bold (600).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_DEMI_BOLD</unmanaged>
        DemiBold = unchecked((int)600),			
        
        /// <summary>	
        /// Predefined font weight : Semi-bold (600).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_SEMI_BOLD</unmanaged>
        SemiBold = unchecked((int)600),			
        
        /// <summary>	
        /// Predefined font weight : Bold (700).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_BOLD</unmanaged>
        Bold = unchecked((int)700),			
        
        /// <summary>	
        /// Predefined font weight : Extra-bold (800).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_BOLD</unmanaged>
        ExtraBold = unchecked((int)800),			
        
        /// <summary>	
        /// Predefined font weight : Ultra-bold (800).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_BOLD</unmanaged>
        UltraBold = unchecked((int)800),			
        
        /// <summary>	
        /// Predefined font weight : Black (900).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_BLACK</unmanaged>
        Black = unchecked((int)900),			
        
        /// <summary>	
        /// Predefined font weight : Heavy (900).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_HEAVY</unmanaged>
        Heavy = unchecked((int)900),			
        
        /// <summary>	
        /// Predefined font weight : Extra-black (950).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_EXTRA_BLACK</unmanaged>
        ExtraBlack = unchecked((int)950),			
        
        /// <summary>	
        /// Predefined font weight : Ultra-black (950).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_WEIGHT_ULTRA_BLACK</unmanaged>
        UltraBlack = unchecked((int)950),			
    }
    
    /// <summary>	
    /// Represents the degree to which a font has been stretched compared to a font's normal aspect ratio. The enumerated values correspond to the usWidthClass definition in the OpenType specification. The usWidthClass represents an integer value between 1 and 9?lower values indicate narrower widths; higher values indicate wider widths.	
    /// </summary>	
    /// <remarks>	
    /// A font stretch describes the degree to which a font form is stretched from its normal aspect ratio, which is the original width to height ratio specified for the glyphs in the font. 	
    /// The following illustration shows an example of Normal and Condensed stretches for the Rockwell Bold typeface.?Illustration of ?D2D? text in Normal and Condensed font stretch?Note??Values other than the ones defined in the enumeration are considered to be invalid, and are rejected by font API functions.	
    /// </remarks>	
    /// <unmanaged>DWRITE_FONT_STRETCH</unmanaged>
    public enum FontStretch : int {	
        
        /// <summary>	
        /// Predefined font stretch : Not known (0).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_UNDEFINED</unmanaged>
        Undefined = unchecked((int)0),			
        
        /// <summary>	
        /// Predefined font stretch : Ultra-condensed (1).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_ULTRA_CONDENSED</unmanaged>
        UltraCondensed = unchecked((int)1),			
        
        /// <summary>	
        /// Predefined font stretch : Extra-condensed (2).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_EXTRA_CONDENSED</unmanaged>
        ExtraCondensed = unchecked((int)2),			
        
        /// <summary>	
        /// Predefined font stretch : Condensed (3).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_CONDENSED</unmanaged>
        Condensed = unchecked((int)3),			
        
        /// <summary>	
        /// Predefined font stretch : Semi-condensed (4).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_SEMI_CONDENSED</unmanaged>
        SemiCondensed = unchecked((int)4),			
        
        /// <summary>	
        /// Predefined font stretch : Normal (5).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_NORMAL</unmanaged>
        Normal = unchecked((int)5),			
        
        /// <summary>	
        /// Predefined font stretch : Medium (5).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_MEDIUM</unmanaged>
        Medium = unchecked((int)5),			
        
        /// <summary>	
        /// Predefined font stretch : Semi-expanded (6).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_SEMI_EXPANDED</unmanaged>
        SemiExpanded = unchecked((int)6),			
        
        /// <summary>	
        /// Predefined font stretch : Expanded (7).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_EXPANDED</unmanaged>
        Expanded = unchecked((int)7),			
        
        /// <summary>	
        /// Predefined font stretch : Extra-expanded (8).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_EXTRA_EXPANDED</unmanaged>
        ExtraExpanded = unchecked((int)8),			
        
        /// <summary>	
        /// Predefined font stretch : Ultra-expanded (9).	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STRETCH_ULTRA_EXPANDED</unmanaged>
        UltraExpanded = unchecked((int)9),			
    }
    
    /// <summary>	
    /// Represents the style of a font face as normal, italic, or oblique.	
    /// </summary>	
    /// <remarks>	
    /// Three terms categorize the slant of a font: normal, italic, and oblique. Font styleDescriptionNormalThe characters in a normal, or roman, font are upright. 	
    /// Italic 	
    /// The characters in an italic font are truly slanted and appear as they were designed. 	
    /// ObliqueThe characters in an oblique font are artificially slanted.?For Oblique, the slant is achieved by performing a shear transformation on the characters from a normal font. When a true italic font is not available on a computer or printer, an oblique style can be generated from the normal font and used to simulate an italic font.  The following illustration shows the normal, italic, and oblique font styles for the Palatino Linotype font. Notice how the italic font style has a more flowing and visually appealing appearance than the oblique font style, which is simply created by skewing the normal font style version of the text.?Illustration of normal, italic, and oblique font styles?Note?? Values other than the ones defined in the enumeration are considered to be invalid, and they are rejected by font API functions.	
    /// </remarks>	
    /// <unmanaged>DWRITE_FONT_STYLE</unmanaged>
    public enum FontStyle : int {	
        
        /// <summary>	
        /// Font style : Normal.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STYLE_NORMAL</unmanaged>
        Normal,
        
        /// <summary>	
        /// Font style : Oblique. 	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STYLE_OBLIQUE</unmanaged>
        Oblique,
        
        /// <summary>	
        /// Font style : Italic.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_STYLE_ITALIC</unmanaged>
        Italic,
    }
    
    /// <summary>	
    /// The informational string enumeration which identifies a string embedded in a font file.	
    /// </summary>	
    /// <unmanaged>DWRITE_INFORMATIONAL_STRING_ID</unmanaged>
    public enum InformationalStringId : int {	
        
        /// <summary>	
        /// Indicates the string containing the unspecified name ID.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_NONE</unmanaged>
        None,
        
        /// <summary>	
        /// Indicates the string containing the copyright notice provided by the font.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE</unmanaged>
        CopyrightNotice,
        
        /// <summary>	
        /// Indicates the string containing a version number.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS</unmanaged>
        VersionStrings,
        
        /// <summary>	
        /// Indicates the string containing the trademark information provided by the font.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_TRADEMARK</unmanaged>
        Trademark,
        
        /// <summary>	
        /// Indicates the string containing the name of the font manufacturer.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_MANUFACTURER</unmanaged>
        Manufacturer,
        
        /// <summary>	
        /// Indicates the string containing the name of the font designer.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_DESIGNER</unmanaged>
        Designer,
        
        /// <summary>	
        /// Indicates the string containing the URL of the font designer (with protocol, e.g., http://, ftp://).	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_DESIGNER_URL</unmanaged>
        DesignerUrl,
        
        /// <summary>	
        /// Indicates the string containing the description of the font. This may also contain revision information, usage recommendations, history, features, etc.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_DESCRIPTION</unmanaged>
        Description,
        
        /// <summary>	
        /// Indicates the string containing the URL of the font vendor (with protocol, e.g., http://, ftp://). If a unique serial number is embedded in the URL, it can be used to register the font.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL</unmanaged>
        FontVendorUrl,
        
        /// <summary>	
        /// Indicates the string containing the description of how the font may be legally used, or different example scenarios for licensed use. 	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION</unmanaged>
        LicenseDescription,
        
        /// <summary>	
        /// Indicates the string containing the URL where additional licensing information can be found.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL</unmanaged>
        LicenseInformationUrl,
        
        /// <summary>	
        /// Indicates the string containing the GDI-compatible family name. Since GDI allows a maximum of four fonts per family, fonts in the same family may have different GDI-compatible family names (e.g., "Arial", "Arial Narrow", "Arial Black").	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES</unmanaged>
        Win32FamilyNames,
        
        /// <summary>	
        /// Indicates the string containing a GDI-compatible subfamily name.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES</unmanaged>
        Win32SubfamilyNames,
        
        /// <summary>	
        /// Indicates the string containing the family name preferred by the designer. This enables font designers to group more than four fonts in a single family without losing compatibility with GDI. This name is typically only present if it differs from the GDI-compatible family name.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES</unmanaged>
        PreferredFamilyNames,
        
        /// <summary>	
        /// Indicates the string containing the subfamily name preferred by the designer. This name is typically only present if it differs from the GDI-compatible subfamily name.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES</unmanaged>
        PreferredSubfamilyNames,
        
        /// <summary>	
        /// Contains sample text for display in font lists. This can be the font name or any other text that the designer thinks is the best  example to display the font in.	
        /// </summary>	
        /// <unmanaged>DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT</unmanaged>
        SampleText,
    }
    
    /// <summary>	
    /// Specifies the type of DirectWrite factory object.	
    /// </summary>	
    /// <remarks>	
    /// A DirectWrite factory object contains information about its internal state, such as font loader registration and cached font data. In most cases you should use the shared factory object, because it allows multiple components that use DirectWrite to share internal DirectWrite state information, thereby reducing memory usage. However, there are cases when it is desirable to reduce the impact of a component on the rest of the process, such as a plug-in from an untrusted source,  by sandboxing and isolating it from the rest of the process components. In such cases, you should use an isolated factory for the sandboxed component.	
    /// </remarks>	
    /// <unmanaged>DWRITE_FACTORY_TYPE</unmanaged>
    public enum FactoryType : int {	
        
        /// <summary>	
        /// Indicates that the DirectWrite factory is a shared factory and that it allows for the reuse of cached font data across multiple in-process components. Such factories also take advantage of cross process font caching components for better performance.	
        /// </summary>	
        /// <unmanaged>DWRITE_FACTORY_TYPE_SHARED</unmanaged>
        Shared,
        
        /// <summary>	
        /// Indicates that the DirectWrite factory object is isolated. Objects created from the isolated factory do not interact with internal DirectWrite state from other components.	
        /// </summary>	
        /// <unmanaged>DWRITE_FACTORY_TYPE_ISOLATED</unmanaged>
        Isolated,
    }
    
    /// <summary>	
    /// Represents the internal structure of a device pixel (that is the physical arrangement of red, green, and blue color components) that is assumed for purposes of rendering text.	
    /// </summary>	
    /// <unmanaged>DWRITE_PIXEL_GEOMETRY</unmanaged>
    public enum PixelGeometry : int {	
        
        /// <summary>	
        /// The red, green, and blue color components of each pixel are assumed to occupy the same point.	
        /// </summary>	
        /// <unmanaged>DWRITE_PIXEL_GEOMETRY_FLAT</unmanaged>
        Flat,
        
        /// <summary>	
        /// Each pixel is composed of three vertical stripes, with red on the left, green in the center, and  blue on the right. This is the most common pixel geometry for LCD monitors.	   	
        /// </summary>	
        /// <unmanaged>DWRITE_PIXEL_GEOMETRY_RGB</unmanaged>
        Rgb,
        
        /// <summary>	
        /// Each pixel is composed of three vertical stripes, with blue on the left, green in the center, and  red on the right.	
        /// </summary>	
        /// <unmanaged>DWRITE_PIXEL_GEOMETRY_BGR</unmanaged>
        Bgr,
    }
    
    /// <summary>	
    ///  Represents a method of rendering glyphs. 	
    /// </summary>	
    /// <unmanaged>DWRITE_RENDERING_MODE</unmanaged>
    public enum RenderingMode : int {	
        
        /// <summary>	
        /// Specifies that the rendering mode is determined automatically, based on the font and size.	
        /// </summary>	
        /// <unmanaged>DWRITE_RENDERING_MODE_DEFAULT</unmanaged>
        Default,
        
        /// <summary>	
        /// Specifies that no anti-aliasing is performed. Each pixel is either set to the foreground color of the text or retains the color of the background.	
        /// </summary>	
        /// <unmanaged>DWRITE_RENDERING_MODE_ALIASED</unmanaged>
        Aliased,
        
        /// <summary>	
        /// Specifies ClearType rendering with the same metrics as bi-level text. Glyphs can only be positioned on whole-pixel boundaries.	
        /// </summary>	
        /// <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC</unmanaged>
        CleartypeGdiClassic,
        
        /// <summary>	
        /// Specifies ClearType rendering with the same metrics as text rendering using GDI using a font created with CLEARTYPE_NATURAL_QUALITY. Glyph metrics are closer to their ideal values than with bi-level text, but glyphs are still positioned on whole-pixel boundaries.	
        /// </summary>	
        /// <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL</unmanaged>
        CleartypeGdiNatural,
        
        /// <summary>	
        /// Specifies ClearType rendering with anti-aliasing in the horizontal dimension only. This is typically used with small to medium font sizes (up to 16 ppem).	
        /// </summary>	
        /// <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL</unmanaged>
        CleartypeNatural,
        
        /// <summary>	
        /// Specifies ClearType rendering with anti-aliasing in both horizontal and vertical dimensions. This is typically used at larger sizes to makes curves and diagonal lines look smoother, at the expense of some softness.	
        /// </summary>	
        /// <unmanaged>DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC</unmanaged>
        CleartypeNaturalSymmetric,
        
        /// <summary>	
        /// Specifies that rendering should bypass the rasterizer and use the outlines directly. This is typically used at very large sizes.	
        /// </summary>	
        /// <unmanaged>DWRITE_RENDERING_MODE_OUTLINE</unmanaged>
        Outline,
    }
    
    /// <summary>	
    ///  Specifies the direction in which reading progresses. 	
    /// </summary>	
    /// <unmanaged>DWRITE_READING_DIRECTION</unmanaged>
    public enum ReadingDirection : int {	
        
        /// <summary>	
        /// Indicates that reading progresses from left to right.	
        /// </summary>	
        /// <unmanaged>DWRITE_READING_DIRECTION_LEFT_TO_RIGHT</unmanaged>
        LeftToRight,
        
        /// <summary>	
        /// Indicates that reading progresses from right to left.	
        /// </summary>	
        /// <unmanaged>DWRITE_READING_DIRECTION_RIGHT_TO_LEFT</unmanaged>
        RightToLeft,
    }
    
    /// <summary>	
    ///  Indicates the direction of flow for placing lines of text in a paragraph. 	
    /// </summary>	
    /// <unmanaged>DWRITE_FLOW_DIRECTION</unmanaged>
    public enum FlowDirection : int {	
        
        /// <summary>	
        /// Specifies that text lines are placed from top to bottom.	
        /// </summary>	
        /// <unmanaged>DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM</unmanaged>
        TopToBottom,
    }
    
    /// <summary>	
    /// Specifies the alignment of paragraph text along the reading direction axis, relative to the leading and trailing edge of the layout box.	
    /// </summary>	
    /// <unmanaged>DWRITE_TEXT_ALIGNMENT</unmanaged>
    public enum TextAlignment : int {	
        
        /// <summary>	
        /// The leading edge of the paragraph text is aligned to the leading edge of the layout box.	
        /// </summary>	
        /// <unmanaged>DWRITE_TEXT_ALIGNMENT_LEADING</unmanaged>
        Leading,
        
        /// <summary>	
        /// The trailing edge of the paragraph text is aligned to the  trailing edge of the layout box.	
        /// </summary>	
        /// <unmanaged>DWRITE_TEXT_ALIGNMENT_TRAILING</unmanaged>
        Trailing,
        
        /// <summary>	
        /// The center of the paragraph text is aligned to the center of the layout box.	
        /// </summary>	
        /// <unmanaged>DWRITE_TEXT_ALIGNMENT_CENTER</unmanaged>
        Center,
    }
    
    /// <summary>	
    ///  Specifies the alignment of paragraph text along the flow direction axis, relative to the top and bottom of the flow's layout box. 	
    /// </summary>	
    /// <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT</unmanaged>
    public enum ParagraphAlignment : int {	
        
        /// <summary>	
        /// The top of the text flow is aligned to the top edge of the layout box.	
        /// </summary>	
        /// <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_NEAR</unmanaged>
        Near,
        
        /// <summary>	
        /// The bottom of the text flow is aligned to the bottom edge of the layout box.	
        /// </summary>	
        /// <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_FAR</unmanaged>
        Far,
        
        /// <summary>	
        /// The center of the flow is aligned to the center of the layout box.	
        /// </summary>	
        /// <unmanaged>DWRITE_PARAGRAPH_ALIGNMENT_CENTER</unmanaged>
        Center,
    }
    
    /// <summary>	
    ///  Specifies the word wrapping to be used in a particular multiline paragraph.  	
    /// </summary>	
    /// <unmanaged>DWRITE_WORD_WRAPPING</unmanaged>
    public enum WordWrapping : int {	
        
        /// <summary>	
        /// Indicates that words are broken across lines to avoid text overflowing the layout box.	
        /// </summary>	
        /// <unmanaged>DWRITE_WORD_WRAPPING_WRAP</unmanaged>
        Wrap,
        
        /// <summary>	
        /// Indicates that words are kept within the same line even when it overflows the layout box. This option is often used with scrolling to reveal overflow text.	
        /// </summary>	
        /// <unmanaged>DWRITE_WORD_WRAPPING_NO_WRAP</unmanaged>
        NoWrap,
    }
    
    /// <summary>	
    /// The method used for line spacing in a text layout.	
    /// </summary>	
    /// <remarks>	
    /// The line spacing method is set by using the {{SetLineSpacing}} method of the <see cref="SlimDX2.DirectWrite.TextFormat"/> or <see cref="SlimDX2.DirectWrite.TextLayout"/> interfaces.  To get  the current line spacing method of a text format or text layou use the {{GetLineSpacing}}.	
    /// </remarks>	
    /// <unmanaged>DWRITE_LINE_SPACING_METHOD</unmanaged>
    public enum LineSpacingMethod : int {	
        
        /// <summary>	
        /// Line spacing depends solely on the content, adjusting to accommodate the size of fonts and inline objects.	
        /// </summary>	
        /// <unmanaged>DWRITE_LINE_SPACING_METHOD_DEFAULT</unmanaged>
        Default,
        
        /// <summary>	
        /// Lines are explicitly set to uniform spacing, regardless of the size of fonts and inline objects. This can be useful to avoid the uneven appearance that can occur from font fallback.	
        /// </summary>	
        /// <unmanaged>DWRITE_LINE_SPACING_METHOD_UNIFORM</unmanaged>
        Uniform,
    }
    
    /// <summary>	
    /// Specifies  the text granularity used to trim text overflowing the layout box.	
    /// </summary>	
    /// <unmanaged>DWRITE_TRIMMING_GRANULARITY</unmanaged>
    public enum TrimmingGranularity : int {	
        
        /// <summary>	
        /// No trimming occurs. Text flows beyond the layout width.	
        /// </summary>	
        /// <unmanaged>DWRITE_TRIMMING_GRANULARITY_NONE</unmanaged>
        None,
        
        /// <summary>	
        /// Trimming occurs at a character cluster boundary.	
        /// </summary>	
        /// <unmanaged>DWRITE_TRIMMING_GRANULARITY_CHARACTER</unmanaged>
        Character,
        
        /// <summary>	
        /// Trimming occurs at a word boundary.	
        /// </summary>	
        /// <unmanaged>DWRITE_TRIMMING_GRANULARITY_WORD</unmanaged>
        Word,
    }
    
    /// <summary>	
    /// A value that indicates the typographic feature of text supplied by the font.	
    /// </summary>	
    /// <unmanaged>DWRITE_FONT_FEATURE_TAG</unmanaged>
    public enum FontFeatureTag : int {	
        
        /// <summary>	
        ///  Replaces figures separated by a slash with an alternative form.Equivalent OpenType tag: 'afrc' 	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS</unmanaged>
        AlternativeFractions = unchecked((int)1668441697),			
        
        /// <summary>	
        ///  Turns capital characters into petite capitals. It is generally used for words which would otherwise be set in all caps, such as acronyms, but which are desired in petite-cap form to avoid disrupting the flow of text. See the pcap feature description for notes on the relationship of caps, smallcaps and petite caps.Equivalent OpenType tag: 'c2pc'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS</unmanaged>
        PetiteCapitalsFromCapitals = unchecked((int)1668297315),			
        
        /// <summary>	
        /// Turns capital characters into small capitals. It is generally used for words which would otherwise be set in all caps, such as acronyms, but which are desired in small-cap form to avoid disrupting the flow of text. Equivalent OpenType tag: 'c2sc'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS</unmanaged>
        SmallCapitalsFromCapitals = unchecked((int)1668493923),			
        
        /// <summary>	
        ///  In specified situations, replaces default glyphs with alternate forms which provide better joining behavior. Used in script typefaces which are designed to have some or all of their glyphs join.Equivalent OpenType tag: 'calt'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES</unmanaged>
        ContextualAlternates = unchecked((int)1953259875),			
        
        /// <summary>	
        ///  Shifts various punctuation marks up to a position that works better with all-capital sequences or sets of lining figures; also changes oldstyle figures to lining figures. By default, glyphs in a text face are designed to work with lowercase characters. Some characters should be shifted vertically to fit the higher visual center of all-capital or lining text. Also, lining figures are the same height (or close to it) as capitals, and fit much better with all-capital text.Equivalent OpenType tag: 'case'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS</unmanaged>
        CaseSensitiveForms = unchecked((int)1702060387),			
        
        /// <summary>	
        ///  To minimize the number of glyph alternates, it is sometimes desired to decompose a character into two glyphs. Additionally, it may be preferable to compose two characters into a single glyph for better glyph processing. This feature permits such composition/decomposition. The feature should be processed as the first feature processed, and should be processed only when it is called.Equivalent OpenType tag: 'ccmp'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION</unmanaged>
        GlyphCompositionDecomposition = unchecked((int)1886217059),			
        
        /// <summary>	
        ///  Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. Unlike other ligature features, clig specifies the context in which the ligature is recommended. This capability is important in some script designs and for swash ligatures.Equivalent OpenType tag: 'clig'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES</unmanaged>
        ContextualLigatures = unchecked((int)1734962275),			
        
        /// <summary>	
        ///  Globally adjusts inter-glyph spacing for all-capital text. Most typefaces contain capitals and lowercase characters, and the capitals are positioned to work with the lowercase. When capitals are used for words, they need more space between them for legibility and esthetics. This feature would not apply to monospaced designs. Of course the user may want to override this behavior in order to do more pronounced letterspacing for esthetic reasons. Equivalent OpenType tag: 'cpsp'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING</unmanaged>
        CapitalSpacing = unchecked((int)1886613603),			
        
        /// <summary>	
        /// Replaces default character glyphs with corresponding swash glyphs in a specified context. Note that there may be more than one swash alternate for a given character. Equivalent OpenType tag: 'cswh'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH</unmanaged>
        ContextualSwash = unchecked((int)1752658787),			
        
        /// <summary>	
        ///  In cursive scripts like Arabic, this feature cursively positions adjacent glyphs.Equivalent OpenType tag: 'curs'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING</unmanaged>
        CursivePositioning = unchecked((int)1936880995),			
        
        /// <summary>	
        ///  Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers those ligatures which may be used for special effect, at the user's preference.Equivalent OpenType tag: 'dlig'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_DEFAULT</unmanaged>
        Default = unchecked((int)1953261156),			
        
        /// <summary>	
        ///  Replaces standard forms in Japanese fonts with corresponding forms preferred by typographers.  For example, a user would invoke this feature to replace kanji character U+5516 with U+555E.	
        /// Equivalent OpenType tag: 'expt'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES</unmanaged>
        DiscretionaryLigatures = unchecked((int)1734962276),			
        
        /// <summary>	
        ///  Replaces figures separated by a slash with 'common' (diagonal) fractions.Equivalent OpenType tag: 'frac'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS</unmanaged>
        ExpertForms = unchecked((int)1953527909),			
        
        /// <summary>	
        ///  Replaces glyphs set on other widths with glyphs set on full (usually em) widths. In a CJKV font, this may include "lower ASCII" Latin characters and various symbols. In a European font, this feature replaces proportionally-spaced glyphs with monospaced glyphs, which are generally set on widths of 0.6 em. For example, a user may invoke this feature in a Japanese font to get full monospaced Latin glyphs instead of the corresponding proportionally-spaced versions.Equivalent OpenType tag: 'fwid'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_FRACTIONS</unmanaged>
        Fractions = unchecked((int)1667330662),			
        
        /// <summary>	
        ///  Produces the half forms of consonants in Indic scripts. For example, in Hindi (Devanagari script), the conjunct KKa, obtained by doubling the Ka, is denoted with a half form of Ka followed by the full form. Equivalent OpenType tag: 'half'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_FULL_WIDTH</unmanaged>
        FullWidth = unchecked((int)1684633446),			
        
        /// <summary>	
        ///  Produces the halant forms of consonants in Indic scripts. For example, in Sanskrit (Devanagari script), syllable final consonants are frequently required in their halant form.Equivalent OpenType tag: 'haln'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_HALF_FORMS</unmanaged>
        HalfForms = unchecked((int)1718378856),			
        
        /// <summary>	
        ///  Respaces glyphs designed to be set on full-em widths, fitting them onto half-em widths. This differs from hwid in that it does not substitute new glyphs.Equivalent OpenType tag: 'halt'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_HALANT_FORMS</unmanaged>
        HalantForms = unchecked((int)1852596584),			
        
        /// <summary>	
        ///  Replaces the default (current) forms with the historical alternates. While some ligatures are also used for historical effect, this feature deals only with single characters. Some fonts include the historical forms as alternates, so they can be used for a 'period' effect.  Equivalent OpenType tag: 'hist'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH</unmanaged>
        AlternateHalfWidth = unchecked((int)1953259880),			
        
        /// <summary>	
        ///  Replaces standard kana with forms that have been specially designed for only horizontal writing. This is a typographic optimization for improved fit and more even color.Equivalent OpenType tag: 'hkna'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS</unmanaged>
        HistoricalForms = unchecked((int)1953720680),			
        
        /// <summary>	
        ///  Replaces the default (current) forms with the historical alternates. Some ligatures were in common use in the past, but appear anachronistic today. Some fonts include the historical forms as alternates, so they can be used for a 'period' effect.Equivalent OpenType tag: 'hlig'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES</unmanaged>
        HorizontalKanaAlternates = unchecked((int)1634626408),			
        
        /// <summary>	
        ///  Replaces glyphs on proportional widths, or fixed widths other than half an em, with glyphs on half-em (en) widths. Many CJKV fonts have glyphs which are set on multiple widths; this feature selects the half-em version. There are various contexts in which this is the preferred behavior, including compatibility with older desktop documents.Equivalent OpenType tag: 'hwid'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES</unmanaged>
        HistoricalLigatures = unchecked((int)1734962280),			
        
        /// <summary>	
        ///  Used to access the JIS X 0212-1990 glyphs for the cases when the JIS X 0213:2004 form is encoded. The JIS X 0212-1990 (aka, "Hojo Kanji") and JIS X 0213:2004 character sets overlap significantly. In some cases their prototypical glyphs differ. When building fonts that support both JIS X 0212-1990 and JIS X 0213:2004 (such as those supporting the Adobe-Japan 1-6 character collection), it is recommended that JIS X 0213:2004 forms be the preferred encoded form.Equivalent OpenType tag: 'hojo'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_HALF_WIDTH</unmanaged>
        HalfWidth = unchecked((int)1684633448),			
        
        /// <summary>	
        ///  The National Language Council (NLC) of Japan has defined new glyph shapes for a number of JIS characters, which were incorporated into JIS X 0213:2004 as new prototypical forms. The 'jp04' feature is A subset of the 'nlck' feature, and is used to access these prototypical glyphs in a manner that maintains the integrity of JIS X 0213:2004.Equivalent OpenType tag: 'jp04'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS</unmanaged>
        HojoKanjiForms = unchecked((int)1869246312),			
        
        /// <summary>	
        /// Replaces default (JIS90) Japanese glyphs with the corresponding forms from the JIS C 6226-1978 (JIS78) specification.Equivalent OpenType tag: 'jp78'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS04_FORMS</unmanaged>
        Jis04Forms = unchecked((int)875589738),			
        
        /// <summary>	
        /// Replaces default (JIS90) Japanese glyphs with the corresponding forms from the JIS X 0208-1983 (JIS83) specification.Equivalent OpenType tag: 'jp83'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS78_FORMS</unmanaged>
        Jis78Forms = unchecked((int)943157354),			
        
        /// <summary>	
        ///  Replaces Japanese glyphs from the JIS78 or JIS83 specifications with the corresponding forms from the JIS X 0208-1990 (JIS90) specification.Equivalent OpenType tag: 'jp90'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS83_FORMS</unmanaged>
        Jis83Forms = unchecked((int)859336810),			
        
        /// <summary>	
        ///  Adjusts amount of space between glyphs, generally to provide optically consistent spacing between glyphs. Although a well-designed typeface has consistent inter-glyph spacing overall, some glyph combinations require adjustment for improved legibility. Besides standard adjustment in the horizontal direction, this feature can supply size-dependent kerning data via device tables, "cross-stream" kerning in the Y text direction, and adjustment of glyph placement independent of the advance adjustment. Note that this feature may apply to runs of more than two glyphs, and would not be used in monospaced fonts. Also note that this feature does not apply to text set vertically.Equivalent OpenType tag: 'kern'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_JIS90_FORMS</unmanaged>
        Jis90Forms = unchecked((int)809070698),			
        
        /// <summary>	
        ///  Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers the ligatures which the designer/manufacturer judges should be used in normal conditions.Equivalent OpenType tag: 'liga'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_KERNING</unmanaged>
        Kerning = unchecked((int)1852990827),			
        
        /// <summary>	
        /// Changes selected figures from oldstyle to the default lining form. For example, a user may invoke this feature in order to get lining figures, which fit better with all-capital text. This feature overrides results of the Oldstyle Figures feature (onum).Equivalent OpenType tag: 'lnum'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES</unmanaged>
        StandardLigatures = unchecked((int)1634167148),			
        
        /// <summary>	
        ///  Enables localized forms of glyphs to be substituted for default forms. Many scripts used to write multiple languages over wide geographical areas have developed localized variant forms of specific letters, which are used by individual literary communities. For example, a number of letters in the Bulgarian and Serbian alphabets have forms distinct from their Russian counterparts and from each other. In some cases the localized form differs only subtly from the script 'norm', in others the forms are radically distinct. Equivalent OpenType tag: 'locl'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_LINING_FIGURES</unmanaged>
        LiningFigures = unchecked((int)1836412524),			
        
        /// <summary>	
        ///  Positions mark glyphs with respect to base glyphs. For example, in Arabic script positioning the Hamza above the Yeh.Equivalent OpenType tag: 'mark'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS</unmanaged>
        LocalizedForms = unchecked((int)1818455916),			
        
        /// <summary>	
        ///  Replaces standard typographic forms of Greek glyphs with corresponding forms commonly used in mathematical notation (which are a subset of the Greek alphabet).Equivalent OpenType tag: 'mgrk'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING</unmanaged>
        MarkPositioning = unchecked((int)1802658157),			
        
        /// <summary>	
        ///  Positions marks with respect to other marks. Required in various non-Latin scripts like Arabic. For example, in Arabic, the ligaturised mark Ha with Hamza above it can also be obtained by positioning these marks relative to one another.Equivalent OpenType tag: 'mkmk'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK</unmanaged>
        MathematicalGreek = unchecked((int)1802659693),			
        
        /// <summary>	
        ///  Replaces default glyphs with various notational forms (such as glyphs placed in open or solid circles, squares, parentheses, diamonds or rounded boxes). In some cases an annotation form may already be present, but the user may want a different one.Equivalent OpenType tag: 'nalt'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING</unmanaged>
        MarkToMarkPositioning = unchecked((int)1802333037),			
        
        /// <summary>	
        ///  Used to access  glyphs made from glyph shapes defined by the National Language Council (NLC) of Japan for a number of JIS characters in 2000. Equivalent OpenType tag: 'nlck'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS</unmanaged>
        AlternateAnnotationForms = unchecked((int)1953259886),			
        
        /// <summary>	
        ///  Changes selected figures from the default lining style to oldstyle form. For example, a user may invoke this feature to get oldstyle figures, which fit better into the flow of normal upper- and lowercase text. This feature overrides results of the Lining Figures feature (lnum).Equivalent OpenType tag: 'onum'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS</unmanaged>
        NlcKanjiForms = unchecked((int)1801677934),			
        
        /// <summary>	
        ///  Replaces default alphabetic glyphs with the corresponding ordinal forms for use after figures. One exception to the follows-a-figure rule is the numero character (U+2116), which is actually a ligature substitution, but is best accessed through this feature.Equivalent OpenType tag: 'ordn'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES</unmanaged>
        OldStyleFigures = unchecked((int)1836412527),			
        
        /// <summary>	
        ///  Respaces glyphs designed to be set on full-em widths, fitting them onto individual (more or less proportional) horizontal widths. This differs from pwid in that it does not substitute new glyphs (GPOS, not GSUB feature). The user may prefer the monospaced form, or may simply want to ensure that the glyph is well-fit and not rotated in vertical setting (Latin forms designed for proportional spacing would be rotated).Equivalent OpenType tag: 'palt'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_ORDINALS</unmanaged>
        Ordinals = unchecked((int)1852076655),			
        
        /// <summary>	
        /// Turns lowercase characters into petite capitals. Forms related to petite capitals, such as specially designed figures, may be included. Some fonts contain an additional size of capital letters, shorter than the regular smallcaps and it is referred to as petite caps. Such forms are most likely to be found in designs with a small lowercase x-height, where they better harmonise with lowercase text than the taller smallcaps (for examples of petite caps, see the Emigre type families Mrs Eaves and Filosofia). Equivalent OpenType tag: 'pcap'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH</unmanaged>
        ProportionalAlternateWidth = unchecked((int)1953259888),			
        
        /// <summary>	
        ///  Replaces figure glyphs set on uniform (tabular) widths with corresponding glyphs set on glyph-specific (proportional) widths. Tabular widths will generally be the default, but this cannot be safely assumed. Of course this feature would not be present in monospaced designs.Equivalent OpenType tag: 'pnum'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS</unmanaged>
        PetiteCapitals = unchecked((int)1885430640),			
        
        /// <summary>	
        ///  Replaces glyphs set on uniform widths (typically full or half-em) with proportionally spaced glyphs. The proportional variants are often used for the Latin characters in CJKV fonts, but may also be used for Kana in Japanese fonts.Equivalent OpenType tag: 'pwid'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES</unmanaged>
        ProportionalFigures = unchecked((int)1836412528),			
        
        /// <summary>	
        ///  Replaces glyphs on other widths with glyphs set on widths of one quarter of an em (half an en). The characters involved are normally figures and some forms of punctuation.Equivalent OpenType tag: 'qwid'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS</unmanaged>
        ProportionalWidths = unchecked((int)1684633456),			
        
        /// <summary>	
        ///  Replaces a sequence of glyphs with a single glyph which is preferred for typographic purposes. This feature covers those ligatures, which the script determines as required to be used in normal conditions. This feature is important for some scripts to ensure correct glyph formation. Equivalent OpenType tag: 'rlig'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS</unmanaged>
        QuarterWidths = unchecked((int)1684633457),			
        
        /// <summary>	
        ///  Identifies glyphs in the font which have been designed for "ruby", from the old typesetting term for four-point-sized type. Japanese typesetting often uses smaller kana glyphs, generally in superscripted form, to clarify the meaning of kanji which may be unfamiliar to the reader. Equivalent OpenType tag: 'ruby'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES</unmanaged>
        RequiredLigatures = unchecked((int)1734962290),			
        
        /// <summary>	
        ///  Replaces the default forms with the stylistic alternates. Many fonts contain alternate glyph designs for a purely esthetic effect; these don't always fit into a clear category like swash or historical. As in the case of swash glyphs, there may be more than one alternate form.  Equivalent OpenType tag: 'salt'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS</unmanaged>
        RubyNotationForms = unchecked((int)2036495730),			
        
        /// <summary>	
        ///  Replaces lining or oldstyle figures with inferior figures (smaller glyphs which sit lower than the standard baseline, primarily for chemical or mathematical notation). May also replace lowercase characters with alphabetic inferiors.Equivalent OpenType tag: 'sinf'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES</unmanaged>
        StylisticAlternates = unchecked((int)1953259891),			
        
        /// <summary>	
        ///  Turns lowercase characters into small capitals. This corresponds to the common SC font layout. It is generally used for display lines set in Large &amp; small caps, such as titles. Forms related to small capitals, such as oldstyle figures, may be included.Equivalent OpenType tag: 'smcp'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS</unmanaged>
        ScientificInferiors = unchecked((int)1718511987),			
        
        /// <summary>	
        ///  Replaces 'traditional' Chinese or Japanese forms with the corresponding 'simplified' forms.Equivalent OpenType tag: 'smpl'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS</unmanaged>
        SmallCapitals = unchecked((int)1885564275),			
        
        /// <summary>	
        ///  In addition to, or instead of, stylistic alternatives of individual glyphs (see 'salt' feature), some fonts may contain sets of stylistic variant glyphs corresponding to portions of the character set, such as multiple variants for lowercase letters in a Latin font. Glyphs in stylistic sets may be designed to harmonise visually, interract in particular ways, or otherwise work together. Examples of fonts including stylistic sets are Zapfino Linotype and Adobe's Poetica. Individual features numbered sequentially with the tag name convention 'ss01' 'ss02' 'ss03' . 'ss20' provide a mechanism for glyphs in these sets to be associated via GSUB lookup indexes to default forms and to each other, and for users to select from available stylistic setsEquivalent OpenType tag: 'ss01'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS</unmanaged>
        SimplifiedForms = unchecked((int)1819307379),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss02'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1</unmanaged>
        StylisticSet1 = unchecked((int)825258867),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss03'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2</unmanaged>
        StylisticSet2 = unchecked((int)842036083),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss04'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3</unmanaged>
        StylisticSet3 = unchecked((int)858813299),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss05'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4</unmanaged>
        StylisticSet4 = unchecked((int)875590515),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss06'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5</unmanaged>
        StylisticSet5 = unchecked((int)892367731),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss07'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6</unmanaged>
        StylisticSet6 = unchecked((int)909144947),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss08'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7</unmanaged>
        StylisticSet7 = unchecked((int)925922163),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss09'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8</unmanaged>
        StylisticSet8 = unchecked((int)942699379),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss10'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9</unmanaged>
        StylisticSet9 = unchecked((int)959476595),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss11'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10</unmanaged>
        StylisticSet10 = unchecked((int)808547187),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss12'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11</unmanaged>
        StylisticSet11 = unchecked((int)825324403),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss13'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12</unmanaged>
        StylisticSet12 = unchecked((int)842101619),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss14'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13</unmanaged>
        StylisticSet13 = unchecked((int)858878835),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss15'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14</unmanaged>
        StylisticSet14 = unchecked((int)875656051),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss16'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15</unmanaged>
        StylisticSet15 = unchecked((int)892433267),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss17'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16</unmanaged>
        StylisticSet16 = unchecked((int)909210483),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss18'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17</unmanaged>
        StylisticSet17 = unchecked((int)925987699),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss19'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18</unmanaged>
        StylisticSet18 = unchecked((int)942764915),			
        
        /// <summary>	
        /// See the description for DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1.Equivalent OpenType tag: 'ss20'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19</unmanaged>
        StylisticSet19 = unchecked((int)959542131),			
        
        /// <summary>	
        ///  May replace a default glyph with a subscript glyph, or it may combine a glyph substitution with positioning adjustments for proper placement.Equivalent OpenType tag: 'subs'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20</unmanaged>
        StylisticSet20 = unchecked((int)808612723),			
        
        /// <summary>	
        ///  Replaces lining or oldstyle figures with superior figures (primarily for footnote indication), and replaces lowercase letters with superior letters (primarily for abbreviated French titles).Equivalent OpenType tag: 'sups'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_SUBSCRIPT</unmanaged>
        Subscript = unchecked((int)1935832435),			
        
        /// <summary>	
        ///  Replaces default character glyphs with corresponding swash glyphs. Note that there may be more than one swash alternate for a given character.Equivalent OpenType tag: 'swsh'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT</unmanaged>
        Superscript = unchecked((int)1936749939),			
        
        /// <summary>	
        ///  Replaces the default glyphs with corresponding forms designed specifically for titling. These may be all-capital and/or larger on the body, and adjusted for viewing at larger sizes.Equivalent OpenType tag: 'titl'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_SWASH</unmanaged>
        Swash = unchecked((int)1752397683),			
        
        /// <summary>	
        ///  Replaces 'simplified' Japanese kanji forms with the corresponding 'traditional' forms. This is equivalent to the Traditional Forms feature, but explicitly limited to the traditional forms considered proper for use in personal names (as many as 205 glyphs in some fonts).Equivalent OpenType tag: 'tnam'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_TITLING</unmanaged>
        Titling = unchecked((int)1819568500),			
        
        /// <summary>	
        ///  Replaces figure glyphs set on proportional widths with corresponding glyphs set on uniform (tabular) widths. Tabular widths will generally be the default, but this cannot be safely assumed. Of course this feature would not be present in monospaced designs.Equivalent OpenType tag: 'tnum'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS</unmanaged>
        TraditionalNameForms = unchecked((int)1835101812),			
        
        /// <summary>	
        ///  Replaces 'simplified' Chinese hanzi or Japanese kanji forms with the corresponding 'traditional' forms.Equivalent OpenType tag: 'trad'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES</unmanaged>
        TabularFigures = unchecked((int)1836412532),			
        
        /// <summary>	
        ///  Replaces glyphs on other widths with glyphs set on widths of one third of an em. The characters involved are normally figures and some forms of punctuation.Equivalent OpenType tag: 'twid'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS</unmanaged>
        TraditionalForms = unchecked((int)1684107892),			
        
        /// <summary>	
        ///  Maps upper- and lowercase letters to a mixed set of lowercase and small capital forms, resulting in a single case alphabet (for an example of unicase, see the Emigre type family Filosofia). The letters substituted may vary from font to font, as appropriate to the design. If aligning to the x-height, smallcap glyphs may be substituted, or specially designed unicase forms might be used. Substitutions might also include specially designed figures.	
        /// Equivalent OpenType tag: 'unic'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS</unmanaged>
        ThirdWidths = unchecked((int)1684633460),			
        
        /// <summary>	
        /// Allows the user to change from the default 0 to a slashed form. Some fonts contain both a default form of zero, and an alternative form which uses a diagonal slash through the counter. Especially in condensed designs, it can be difficult to distinguish between 0 and O (zero and capital O) in any situation where capitals and lining figures may be arbitrarily mixed. Equivalent OpenType tag: 'zero'	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_UNICASE</unmanaged>
        Unicase = unchecked((int)1667853941),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO</unmanaged>
        SlashedZero = unchecked((int)1869768058),			
    }
    
    /// <summary>	
    /// Indicates additional shaping requirements for text.	
    /// </summary>	
    /// <unmanaged>DWRITE_SCRIPT_SHAPES</unmanaged>
    public enum ScriptShapes : int {	
        
        /// <summary>	
        /// Indicates that there is no additional shaping requirements for text. Text is shaped with the writing system default behavior.	
        /// </summary>	
        /// <unmanaged>DWRITE_SCRIPT_SHAPES_DEFAULT</unmanaged>
        Default = unchecked((int)0),			
        
        /// <summary>	
        /// Indicates that text should leave no visible control or format control characters.	
        /// </summary>	
        /// <unmanaged>DWRITE_SCRIPT_SHAPES_NO_VISUAL</unmanaged>
        NoVisual = unchecked((int)1),			
    }
    
    /// <summary>	
    ///  Indicates the condition at the edges of inline object or text used to determine line-breaking behavior.	
    /// </summary>	
    /// <unmanaged>DWRITE_BREAK_CONDITION</unmanaged>
    public enum BreakCondition : int {	
        
        /// <summary>	
        ///  Indicates whether a break is allowed by determining  the condition of the neighboring text span or inline object.	
        /// </summary>	
        /// <unmanaged>DWRITE_BREAK_CONDITION_NEUTRAL</unmanaged>
        Neutral,
        
        /// <summary>	
        ///  Indicates that a line break is allowed, unless overruled by the condition of the neighboring text span or inline object, either prohibited by a "may not break" condition or forced by a "must break" condition.				 	
        /// </summary>	
        /// <unmanaged>DWRITE_BREAK_CONDITION_CAN_BREAK</unmanaged>
        CanBreak,
        
        /// <summary>	
        ///  Indicates that there should be no line  break, unless overruled by a "must break" condition from the neighboring text span or inline object.		 	
        /// </summary>	
        /// <unmanaged>DWRITE_BREAK_CONDITION_MAY_NOT_BREAK</unmanaged>
        MayNotBreak,
        
        /// <summary>	
        ///  Indicates that the line break must happen, regardless of the condition of the adjacent text span or inline object.			 	
        /// </summary>	
        /// <unmanaged>DWRITE_BREAK_CONDITION_MUST_BREAK</unmanaged>
        MustBreak,
    }
    
    /// <summary>	
    /// Specifies how to apply number substitution on digits and related punctuation.	
    /// </summary>	
    /// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD</unmanaged>
    public enum NumberSubstitutionMethod : int {	
        
        /// <summary>	
        /// Specifies that the substitution method should be determined based on the LOCALE_IDIGITSUBSTITUTION value of the specified text culture.	
        /// </summary>	
        /// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE</unmanaged>
        FromCulture,
        
        /// <summary>	
        /// If the culture is Arabic or Persian, specifies that the number shapes depend on the context. Either traditional or nominal number shapes are used, depending on the nearest preceding strong character or (if there is none) the reading direction of the paragraph.	
        /// </summary>	
        /// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL</unmanaged>
        Contextual,
        
        /// <summary>	
        /// Specifies that code points 0x30-0x39 are always rendered as nominal numeral shapes (ones of the European number), that is, no substitution is performed.	
        /// </summary>	
        /// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE</unmanaged>
        None,
        
        /// <summary>	
        /// Specifies that numbers are rendered using the national number shapes as specified by the LOCALE_SNATIVEDIGITS value of the specified text culture.	
        /// </summary>	
        /// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL</unmanaged>
        National,
        
        /// <summary>	
        /// Specifies that numbers are rendered using the traditional shapes for the specified culture. For most cultures, this is the same as NativeNational. However, NativeNational results in Latin numbers for some Arabic cultures, whereasDWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL results in arabic numbers for all Arabic cultures.	
        /// </summary>	
        /// <unmanaged>DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL</unmanaged>
        Traditional,
    }
    
    /// <summary>	
    /// Identifies a type of alpha texture.	
    /// </summary>	
    /// <remarks>	
    /// An alpha texture is a bitmap of alpha values, each representing opacity of a pixel or subpixel.	
    /// </remarks>	
    /// <unmanaged>DWRITE_TEXTURE_TYPE</unmanaged>
    public enum TextureType : int {	
        
        /// <summary>	
        /// Specifies an alpha texture for aliased text rendering (that is,  each pixel is either fully opaque or fully transparent), with one byte per pixel.	
        /// </summary>	
        /// <unmanaged>DWRITE_TEXTURE_ALIASED_1x1</unmanaged>
        Aliased1x1,
        
        /// <summary>	
        /// Specifies an alpha texture for ClearType text rendering, with three bytes per pixel in the horizontal dimension and one byte per pixel in the vertical dimension.	
        /// </summary>	
        /// <unmanaged>DWRITE_TEXTURE_CLEARTYPE_3x1</unmanaged>
        Cleartype3x1,
    }
}
