// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Structs for SlimDX2.XAPO.Fx namespace.
//     This code was generated by a tool.
//     Date : 11/13/2010 16:58:26
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX2.XAPO.Fx {

    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>FXEQ_PARAMETERS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 1 )]
    public  partial struct EqualizerParameters {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float FrequencyCenter0</unmanaged>
        public float FrequencyCenter0;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Gain0</unmanaged>
        public float Gain0;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Bandwidth0</unmanaged>
        public float Bandwidth0;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float FrequencyCenter1</unmanaged>
        public float FrequencyCenter1;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Gain1</unmanaged>
        public float Gain1;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Bandwidth1</unmanaged>
        public float Bandwidth1;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float FrequencyCenter2</unmanaged>
        public float FrequencyCenter2;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Gain2</unmanaged>
        public float Gain2;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Bandwidth2</unmanaged>
        public float Bandwidth2;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float FrequencyCenter3</unmanaged>
        public float FrequencyCenter3;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Gain3</unmanaged>
        public float Gain3;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Bandwidth3</unmanaged>
        public float Bandwidth3;
    }
    
    /// <summary>	
    /// Parameters for use with the FXMasteringLimiter XAPO.	
    /// </summary>	
    /// <unmanaged>FXMASTERINGLIMITER_PARAMETERS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 1 )]
    public  partial struct MasteringLimiterParameters {	
        
        /// <summary>Constant None.</summary>
        public const int MinimumRelease = 1;
        
        /// <summary>Constant None.</summary>
        public const int MaximumRelease = 20;
        
        /// <summary>Constant None.</summary>
        public const int DefaultRelease = 6;
        
        /// <summary>Constant None.</summary>
        public const int MinimumLoudness = 1;
        
        /// <summary>Constant None.</summary>
        public const int MaximumLoudness = 1800;
        
        /// <summary>Constant None.</summary>
        public const int DefaultLoudness = 1000;
        
        /// <summary>	
        ///  Speed at which the limiter stops affecting audio once it  drops below the limiter's threshold.  Value must be between FXMASTERINGLIMITER_MIN_RELEASE and  FXMASTERINGLIMITER_MAX_RELEASE. 	
        /// </summary>	
        /// <unmanaged>UINT32 Release</unmanaged>
        public int Release;
        
        /// <summary>	
        ///  Threshold of the limiter.  Value must be between  FXMASTERINGLIMITER_MIN_LOUDNESS and FXMASTERINGLIMITER_MAX_LOUDNESS. 	
        /// </summary>	
        /// <unmanaged>UINT32 Loudness</unmanaged>
        public int Loudness;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>FXREVERB_PARAMETERS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 1 )]
    public  partial struct ReverbParameters {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Diffusion</unmanaged>
        public float Diffusion;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float RoomSize</unmanaged>
        public float RoomSize;
    }
    
    /// <summary>	
    /// Parameters for use with the FXEcho XAPO.	
    /// </summary>	
    /// <unmanaged>FXECHO_PARAMETERS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 1 )]
    public  partial struct EchoParameters {	
        
        /// <summary>	
        ///  Ratio of wet (processed) signal to dry (original) signal. 	
        /// </summary>	
        /// <unmanaged>float WetDryMix</unmanaged>
        public float WetDryMix;
        
        /// <summary>	
        ///  Amount of output to feed back into input. 	
        /// </summary>	
        /// <unmanaged>float Feedback</unmanaged>
        public float Feedback;
        
        /// <summary>	
        ///  Delay to all channels in milliseconds. 	
        /// </summary>	
        /// <unmanaged>float Delay</unmanaged>
        public float Delay;
    }
}
