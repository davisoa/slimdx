// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Interfaces for SlimDX2.D3DCompiler namespace.
//     This code was generated by a tool.
//     Date : 11/07/2010 23:15:09
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX2.D3DCompiler {

    
    /// <summary>	
    /// An include interface allows an application to create user-overridable methods for opening and closing files when loading an effect from memory.	
    /// </summary>	
    /// <unmanaged>ID3DInclude</unmanaged>
    public partial interface Include {
        
        
        /// <summary>	
        /// A user-implemented method for opening and reading the contents of a shader #include file.	
        /// </summary>	
        /// <param name="includeType">A <see cref="SlimDX2.D3DCompiler.IncludeType"/>-typed value that indicates the location of the #include file. </param>
        /// <param name="fileNameRef">Name of the #include file.</param>
        /// <param name="pParentData">Pointer to the container that includes the #include file.</param>
        /// <param name="dataRef">Pointer to the buffer that Open returns that contains the include directives. This pointer remains valid until <see cref="SlimDX2.D3DCompiler.Include.Close"/> is called.</param>
        /// <param name="bytesRef">Pointer to the number of bytes that Open returns in ppData.</param>
        /// <returns>The user-implemented method should return S_OK. If Open fails when reading the #include file, the application programming interface (API) that caused Open to be called fails. This failure can occur in one of the following situations:The high-level shader language (HLSL) shader fails one of the D3D10CompileShader*** functions.The effect fails one of the D3D10CreateEffect*** functions.</returns>
        /// <unmanaged>HRESULT Open([None] D3D_INCLUDE_TYPE IncludeType,[None] const char* pFileName,[None] LPCVOID pParentData,[None] LPCVOID* ppData,[None] UINT* pBytes)</unmanaged>
        /* public SlimDX2.Result Open(SlimDX2.D3DCompiler.IncludeType includeType, string fileNameRef, IntPtr pParentData, IntPtr dataRef, int bytesRef) */

        
        /// <summary>	
        /// A user-implemented method for closing a shader #include file.	
        /// </summary>	
        /// <remarks>	
        /// If <see cref="SlimDX2.D3DCompiler.Include.Open"/> was successful, Close is guaranteed to be called before the API using the <see cref="SlimDX2.D3DCompiler.Include"/> interface returns.	
        /// </remarks>	
        /// <param name="pData">Pointer to the buffer that contains the include directives. This is the pointer that was returned by the corresponding <see cref="SlimDX2.D3DCompiler.Include.Open"/> call.</param>
        /// <returns>The user-implemented Close method should return S_OK. If Close fails when it closes the #include file, the application programming interface (API) that caused Close to be called fails. This failure can occur in one of the following situations:The high-level shader language (HLSL) shader fails one of the D3D10CompileShader*** functions.The effect fails one of the D3D10CreateEffect*** functions.</returns>
        /// <unmanaged>HRESULT Close([None] LPCVOID pData)</unmanaged>
        /* public SlimDX2.Result Close(IntPtr pData) */

    }
    
    /// <summary>	
    /// This shader-reflection interface provides access to variable type.	
    /// </summary>	
    /// <unmanaged>ID3D11ShaderReflectionType</unmanaged>
    [Guid("6e6ffa6a-9bae-4613-a51e-91652d508c21")]
    public partial class ShaderReflectionType : SlimDX2.CppObject {
        public ShaderReflectionType(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// Get the description of a shader-reflection-variable type.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>HRESULT GetDesc([Out] D3D11_SHADER_TYPE_DESC* pDesc)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderTypeDescription Description {
                get { SlimDX2.D3DCompiler.ShaderTypeDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Gets the base class of a class.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>ID3D11ShaderReflectionType* GetSubType()</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionType SubType {
                get { return GetSubType(); }
        }
        
        /// <summary>	
        /// Gets an <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/> interface containing the variable base class type.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>ID3D11ShaderReflectionType* GetBaseClass()</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionType BaseClass {
                get { return GetBaseClass(); }
        }
        
        /// <summary>	
        /// Gets the number of interfaces.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>UINT GetNumInterfaces()</unmanaged>
        public int NumInterfaces {
                get { return GetNumInterfaces(); }
        }
        
        /// <summary>	
        /// Get the description of a shader-reflection-variable type.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="descRef">A pointer to a shader-type description (see <see cref="SlimDX2.D3DCompiler.ShaderTypeDescription"/>).</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT GetDesc([Out] D3D11_SHADER_TYPE_DESC* pDesc)</unmanaged>
        internal SlimDX2.Result GetDescription(out SlimDX2.D3DCompiler.ShaderTypeDescription descRef) {
            unsafe {
                SlimDX2.D3DCompiler.ShaderTypeDescription.__Native descRef_ = new SlimDX2.D3DCompiler.ShaderTypeDescription.__Native();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 0 * 4, &descRef_);
                descRef = new SlimDX2.D3DCompiler.ShaderTypeDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a shader-reflection-variable type by index.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="index">Zero-based index.</param>
        /// <returns>A pointer to a <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/>.</returns>
        /// <unmanaged>ID3D11ShaderReflectionType* GetMemberTypeByIndex([In] UINT Index)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionType GetMemberTypeByIndex(int index) {
            unsafe {
                SlimDX2.D3DCompiler.ShaderReflectionType __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionType)new SlimDX2.D3DCompiler.ShaderReflectionType((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 1 * 4, index));
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a shader-reflection-variable type by name.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="name">Member name.</param>
        /// <returns>A pointer to a <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/>.</returns>
        /// <unmanaged>ID3D11ShaderReflectionType* GetMemberTypeByName([In] const char* Name)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionType GetMemberTypeByName(string name) {
            unsafe {
                IntPtr name_ = Marshal.StringToHGlobalAnsi(name);
                SlimDX2.D3DCompiler.ShaderReflectionType __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionType)new SlimDX2.D3DCompiler.ShaderReflectionType((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 2 * 4, (void*)name_));
                Marshal.FreeHGlobal(name_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a shader-reflection-variable type.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="index">Zero-based index.</param>
        /// <returns>The variable type.</returns>
        /// <unmanaged>const char* GetMemberTypeName([In] UINT Index)</unmanaged>
        public IntPtr GetMemberTypeName(int index) {
            unsafe {
                IntPtr __result__;
                __result__= (IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 3 * 4, index);
                return __result__;
            }
        }
        
        /// <summary>	
        /// Indicates whether two <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/> pointers have the same underlying type.	
        /// </summary>	
        /// <remarks>	
        /// IsEqual indicates whether the sources of the <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/> pointers have the same underlying type. For example, if two ID3D11ShaderReflectionType Interface pointers were retrieved from variables, IsEqual can be used to see if  the variables have the same type.This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="typeRef">A pointer to a <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/>.</param>
        /// <returns>Returns S_OK if the pointers have the same underlying type; otherwise returns S_FALSE.</returns>
        /// <unmanaged>HRESULT IsEqual([In] ID3D11ShaderReflectionType* pType)</unmanaged>
        public SlimDX2.Result IsEqual(SlimDX2.D3DCompiler.ShaderReflectionType typeRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 4 * 4, (void*)((typeRef == null)?IntPtr.Zero:typeRef.NativePointer));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the base class of a class.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>Returns a pointer to a <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/> containing the base class type.  Returns NULL if the class does not have a base class.</returns>
        /// <unmanaged>ID3D11ShaderReflectionType* GetSubType()</unmanaged>
        internal SlimDX2.D3DCompiler.ShaderReflectionType GetSubType() {
            unsafe {
                SlimDX2.D3DCompiler.ShaderReflectionType __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionType)new SlimDX2.D3DCompiler.ShaderReflectionType((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 5 * 4));
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets an <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/> interface containing the variable base class type.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>Returns A pointer to a <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/>.</returns>
        /// <unmanaged>ID3D11ShaderReflectionType* GetBaseClass()</unmanaged>
        internal SlimDX2.D3DCompiler.ShaderReflectionType GetBaseClass() {
            unsafe {
                SlimDX2.D3DCompiler.ShaderReflectionType __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionType)new SlimDX2.D3DCompiler.ShaderReflectionType((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 6 * 4));
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the number of interfaces.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>Returns the number of interfaces.</returns>
        /// <unmanaged>UINT GetNumInterfaces()</unmanaged>
        internal int GetNumInterfaces() {
            unsafe {
                int __result__;
                __result__= (int)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 7 * 4);
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get an interface by index.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="uIndex">Zero-based index.</param>
        /// <returns>A pointer to a <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/>.</returns>
        /// <unmanaged>ID3D11ShaderReflectionType* GetInterfaceByIndex([In] UINT uIndex)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionType GetInterfaceByIndex(int uIndex) {
            unsafe {
                SlimDX2.D3DCompiler.ShaderReflectionType __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionType)new SlimDX2.D3DCompiler.ShaderReflectionType((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 8 * 4, uIndex));
                return __result__;
            }
        }
        
        /// <summary>	
        /// Indicates whether a variable is of the specified type.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="typeRef">A pointer to a <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/>.</param>
        /// <returns>Returns S_OK if object being queried is equal to or inherits from the type in the pType parameter; otherwise returns S_FALSE.</returns>
        /// <unmanaged>HRESULT IsOfType([In] ID3D11ShaderReflectionType* pType)</unmanaged>
        public SlimDX2.Result IsOfType(SlimDX2.D3DCompiler.ShaderReflectionType typeRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 9 * 4, (void*)((typeRef == null)?IntPtr.Zero:typeRef.NativePointer));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Indicates whether a class type implements an interface.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="baseRef">A pointer to a <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/>.</param>
        /// <returns>Returns S_OK if the interface is implemented; otherwise return S_FALSE.</returns>
        /// <unmanaged>HRESULT ImplementsInterface([In] ID3D11ShaderReflectionType* pBase)</unmanaged>
        public SlimDX2.Result ImplementsInterface(SlimDX2.D3DCompiler.ShaderReflectionType baseRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 10 * 4, (void*)((baseRef == null)?IntPtr.Zero:baseRef.NativePointer));
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// This shader-reflection interface provides access to a variable.	
    /// </summary>	
    /// <unmanaged>ID3D11ShaderReflectionVariable</unmanaged>
    [Guid("51f23923-f3e5-4bd1-91cb-606177d8db4c")]
    public partial class ShaderReflectionVariable : SlimDX2.CppObject {
        public ShaderReflectionVariable(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// Get a shader-variable description.	
        /// </summary>	
        /// <remarks>	
        /// This method can be used to determine if the <see cref="SlimDX2.D3DCompiler.ShaderReflectionVariable"/> is valid, the method returns E_FAIL when the variable is not valid.This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>HRESULT GetDesc([Out] D3D11_SHADER_VARIABLE_DESC* pDesc)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderVariableDescription Description {
                get { SlimDX2.D3DCompiler.ShaderVariableDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Get a shader-variable type.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>ID3D11ShaderReflectionType* GetType()</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionType TypeInfo {
                get { return GetTypeInfo(); }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* GetBuffer()</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer Buffer {
                get { return GetBuffer(); }
        }
        
        /// <summary>	
        /// Get a shader-variable description.	
        /// </summary>	
        /// <remarks>	
        /// This method can be used to determine if the <see cref="SlimDX2.D3DCompiler.ShaderReflectionVariable"/> is valid, the method returns E_FAIL when the variable is not valid.This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="descRef">A pointer to a shader-variable description (see <see cref="SlimDX2.D3DCompiler.ShaderVariableDescription"/>).</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT GetDesc([Out] D3D11_SHADER_VARIABLE_DESC* pDesc)</unmanaged>
        internal SlimDX2.Result GetDescription(out SlimDX2.D3DCompiler.ShaderVariableDescription descRef) {
            unsafe {
                SlimDX2.D3DCompiler.ShaderVariableDescription.__Native descRef_ = new SlimDX2.D3DCompiler.ShaderVariableDescription.__Native();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 0 * 4, &descRef_);
                descRef = new SlimDX2.D3DCompiler.ShaderVariableDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a shader-variable type.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>A pointer to a <see cref="SlimDX2.D3DCompiler.ShaderReflectionType"/>.</returns>
        /// <unmanaged>ID3D11ShaderReflectionType* GetType()</unmanaged>
        internal SlimDX2.D3DCompiler.ShaderReflectionType GetTypeInfo() {
            unsafe {
                SlimDX2.D3DCompiler.ShaderReflectionType __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionType)new SlimDX2.D3DCompiler.ShaderReflectionType((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 1 * 4));
                return __result__;
            }
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* GetBuffer()</unmanaged>
        internal SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer GetBuffer() {
            unsafe {
                SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer)new SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 2 * 4));
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the corresponding interface slot for a variable that represents an interface pointer.	
        /// </summary>	
        /// <remarks>	
        /// GetInterfaceSlot gets the corresponding slot in an dynamic linkage array for an interface instance.  The returned slot number is used to set an interface instance to a particular class instance.  See the HLSL {{Interfaces and Classes}} overview for additional information.This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="uArrayIndex">Index of the array element to get the slot number for.  For a non-array variable this value will be zero.</param>
        /// <returns>Returns the index of the interface in the interface array.</returns>
        /// <unmanaged>UINT GetInterfaceSlot([In] UINT uArrayIndex)</unmanaged>
        public int GetInterfaceSlot(int uArrayIndex) {
            unsafe {
                int __result__;
                __result__= (int)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 3 * 4, uArrayIndex);
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// This shader-reflection interface provides access to a constant buffer.	
    /// </summary>	
    /// <unmanaged>ID3D11ShaderReflectionConstantBuffer</unmanaged>
    [Guid("eb62d63d-93dd-4318-8ae8-c6f83ad371b8")]
    public partial class ShaderReflectionConstantBuffer : SlimDX2.CppObject {
        public ShaderReflectionConstantBuffer(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// Get a constant-buffer description.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>HRESULT GetDesc([Out] D3D11_SHADER_BUFFER_DESC* pDesc)</unmanaged>
        public SlimDX2.D3DCompiler.ConstantBufferDescription Description {
                get { SlimDX2.D3DCompiler.ConstantBufferDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Get a constant-buffer description.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="descRef">A pointer to a <see cref="SlimDX2.D3DCompiler.ConstantBufferDescription"/>, which represents a shader-buffer description.</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT GetDesc([Out] D3D11_SHADER_BUFFER_DESC* pDesc)</unmanaged>
        internal SlimDX2.Result GetDescription(out SlimDX2.D3DCompiler.ConstantBufferDescription descRef) {
            unsafe {
                SlimDX2.D3DCompiler.ConstantBufferDescription.__Native descRef_ = new SlimDX2.D3DCompiler.ConstantBufferDescription.__Native();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 0 * 4, &descRef_);
                descRef = new SlimDX2.D3DCompiler.ConstantBufferDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a shader-reflection variable by index.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="index">Zero-based index.</param>
        /// <returns>A pointer to a shader-reflection variable interface (see <see cref="SlimDX2.D3DCompiler.ShaderReflectionVariable"/>).</returns>
        /// <unmanaged>ID3D11ShaderReflectionVariable* GetVariableByIndex([In] UINT Index)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionVariable GetVariableByIndex(int index) {
            unsafe {
                SlimDX2.D3DCompiler.ShaderReflectionVariable __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionVariable)new SlimDX2.D3DCompiler.ShaderReflectionVariable((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 1 * 4, index));
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a shader-reflection variable by name.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="name">Variable name.</param>
        /// <returns>Returns a sentinel object (end of list marker). To determine if GetVariableByName successfully completed, call <see cref="SlimDX2.D3DCompiler.ShaderReflectionVariable.GetDescription"/> and check the returned HRESULT; any return value other than success means that GetVariableByName failed.</returns>
        /// <unmanaged>ID3D11ShaderReflectionVariable* GetVariableByName([In] const char* Name)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionVariable GetVariableByName(string name) {
            unsafe {
                IntPtr name_ = Marshal.StringToHGlobalAnsi(name);
                SlimDX2.D3DCompiler.ShaderReflectionVariable __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionVariable)new SlimDX2.D3DCompiler.ShaderReflectionVariable((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 2 * 4, (void*)name_));
                Marshal.FreeHGlobal(name_ );
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// A shader-reflection interface accesses shader information.	
    /// </summary>	
    /// <unmanaged>ID3D11ShaderReflection</unmanaged>
    [Guid("0a233719-3960-4578-9d7c-203b8b1d9cc1")]
    public partial class ShaderReflection : SlimDX2.ComObject {
        public ShaderReflection(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// Get a shader description.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>HRESULT GetDesc([Out] D3D11_SHADER_DESC* pDesc)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderDescription Description {
                get { SlimDX2.D3DCompiler.ShaderDescription __output__; GetDescription(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Gets the number of Mov instructions.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>UINT GetMovInstructionCount()</unmanaged>
        public int MovInstructionCount {
                get { return GetMovInstructionCount(); }
        }
        
        /// <summary>	
        /// Gets the number of Movc instructions.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>UINT GetMovcInstructionCount()</unmanaged>
        public int MovcInstructionCount {
                get { return GetMovcInstructionCount(); }
        }
        
        /// <summary>	
        /// Gets the number of conversion instructions.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>UINT GetConversionInstructionCount()</unmanaged>
        public int ConversionInstructionCount {
                get { return GetConversionInstructionCount(); }
        }
        
        /// <summary>	
        /// Gets the number of bitwise instructions.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>UINT GetBitwiseInstructionCount()</unmanaged>
        public int BitwiseInstructionCount {
                get { return GetBitwiseInstructionCount(); }
        }
        
        /// <summary>	
        /// Gets the geometry-shader input-primitive description.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>D3D_PRIMITIVE GetGSInputPrimitive()</unmanaged>
        public SlimDX2.D3DCompiler.InputPrimitive GSInputPrimitive {
                get { return GetGSInputPrimitive(); }
        }
        
        /// <summary>	
        /// Indicates whether a shader is a sample frequency shader.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>BOOL IsSampleFrequencyShader()</unmanaged>
        public bool IsSampleFrequencyShader {
                get { return IsSampleFrequencyShader_(); }
        }
        
        /// <summary>	
        /// Gets the number of interface slots in a shader.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>UINT GetNumInterfaceSlots()</unmanaged>
        public int NumInterfaceSlots {
                get { return GetNumInterfaceSlots(); }
        }
        
        /// <summary>	
        /// Gets the minimum feature level.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <unmanaged>HRESULT GetMinFeatureLevel([Out] D3D_FEATURE_LEVEL* pLevel)</unmanaged>
        public SlimDX2.Direct3D.FeatureLevel MinFeatureLevel {
                get { SlimDX2.Direct3D.FeatureLevel __output__; GetMinFeatureLevel(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Get a shader description.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="descRef">A pointer to a shader description. See <see cref="SlimDX2.D3DCompiler.ShaderDescription"/>.</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT GetDesc([Out] D3D11_SHADER_DESC* pDesc)</unmanaged>
        internal SlimDX2.Result GetDescription(out SlimDX2.D3DCompiler.ShaderDescription descRef) {
            unsafe {
                SlimDX2.D3DCompiler.ShaderDescription.__Native descRef_ = new SlimDX2.D3DCompiler.ShaderDescription.__Native();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 3 * 4, &descRef_);
                descRef = new SlimDX2.D3DCompiler.ShaderDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a constant buffer by index.	
        /// </summary>	
        /// <remarks>	
        /// A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="index">Zero-based index.</param>
        /// <returns>A pointer to a constant buffer (see <see cref="SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer"/>).</returns>
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByIndex([In] UINT Index)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer GetConstantBufferByIndex(int index) {
            unsafe {
                SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer)new SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 4 * 4, index));
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a constant buffer by name.	
        /// </summary>	
        /// <remarks>	
        /// A constant buffer supplies either scalar constants or texture constants to a shader. A shader can use one or more constant buffers. For best performance, separate constants into buffers based on the frequency they are updated.This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="name">The constant-buffer name.</param>
        /// <returns>A pointer to a constant buffer (see <see cref="SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer"/>).</returns>
        /// <unmanaged>ID3D11ShaderReflectionConstantBuffer* GetConstantBufferByName([In] const char* Name)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer GetConstantBufferByName(string name) {
            unsafe {
                IntPtr name_ = Marshal.StringToHGlobalAnsi(name);
                SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer)new SlimDX2.D3DCompiler.ShaderReflectionConstantBuffer((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 5 * 4, (void*)name_));
                Marshal.FreeHGlobal(name_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a description of how a resource is bound to a shader.	
        /// </summary>	
        /// <remarks>	
        /// A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. GetResourceBindingDesc gets information about how one resource in the set is bound as an input to the shader. The  ResourceIndex parameter specifies the index for the resource.This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="resourceIndex">A zero-based resource index.</param>
        /// <param name="descRef">A pointer to an input-binding description. See <see cref="SlimDX2.D3DCompiler.ShaderInputBindDescription"/>.</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT GetResourceBindingDesc([In] UINT ResourceIndex,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>
        public SlimDX2.Result GetResourceBindingDescription(int resourceIndex, out SlimDX2.D3DCompiler.ShaderInputBindDescription descRef) {
            unsafe {
                SlimDX2.D3DCompiler.ShaderInputBindDescription.__Native descRef_ = new SlimDX2.D3DCompiler.ShaderInputBindDescription.__Native();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 6 * 4, resourceIndex, &descRef_);
                descRef = new SlimDX2.D3DCompiler.ShaderInputBindDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get an input-parameter description for a shader.	
        /// </summary>	
        /// <remarks>	
        /// An input-parameter description is also called a shader signature. The shader signature contains information about the input parameters such as the order or parameters, their data type, and a parameter semantic.This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="parameterIndex">A zero-based parameter index.</param>
        /// <param name="descRef">A pointer to a shader-input-signature description. See <see cref="SlimDX2.D3DCompiler.SignatureParameterDescription"/>.</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT GetInputParameterDesc([In] UINT ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        public SlimDX2.Result GetInputParameterDescription(int parameterIndex, out SlimDX2.D3DCompiler.SignatureParameterDescription descRef) {
            unsafe {
                SlimDX2.D3DCompiler.SignatureParameterDescription.__Native descRef_ = new SlimDX2.D3DCompiler.SignatureParameterDescription.__Native();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 7 * 4, parameterIndex, &descRef_);
                descRef = new SlimDX2.D3DCompiler.SignatureParameterDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get an output-parameter description for a shader.	
        /// </summary>	
        /// <remarks>	
        /// An output-parameter description is also called a shader signature. The shader signature contains information about the output parameters such as the order or parameters, their data type, and a parameter semantic.This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="parameterIndex">A zero-based parameter index.</param>
        /// <param name="descRef">A pointer to a shader-output-parameter description. See <see cref="SlimDX2.D3DCompiler.SignatureParameterDescription"/>.</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT GetOutputParameterDesc([In] UINT ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        public SlimDX2.Result GetOutputParameterDescription(int parameterIndex, out SlimDX2.D3DCompiler.SignatureParameterDescription descRef) {
            unsafe {
                SlimDX2.D3DCompiler.SignatureParameterDescription.__Native descRef_ = new SlimDX2.D3DCompiler.SignatureParameterDescription.__Native();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 8 * 4, parameterIndex, &descRef_);
                descRef = new SlimDX2.D3DCompiler.SignatureParameterDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a patch-constant parameter description for a shader.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="parameterIndex">A zero-based parameter index.</param>
        /// <param name="descRef">A pointer to a shader-input-signature description. See <see cref="SlimDX2.D3DCompiler.SignatureParameterDescription"/>.</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT GetPatchConstantParameterDesc([In] UINT ParameterIndex,[Out] D3D11_SIGNATURE_PARAMETER_DESC* pDesc)</unmanaged>
        public SlimDX2.Result GetPatchConstantParameterDescription(int parameterIndex, out SlimDX2.D3DCompiler.SignatureParameterDescription descRef) {
            unsafe {
                SlimDX2.D3DCompiler.SignatureParameterDescription.__Native descRef_ = new SlimDX2.D3DCompiler.SignatureParameterDescription.__Native();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 9 * 4, parameterIndex, &descRef_);
                descRef = new SlimDX2.D3DCompiler.SignatureParameterDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets a variable by name.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="name">A pointer to a string containing the variable name.</param>
        /// <returns>Returns a <see cref="SlimDX2.D3DCompiler.ShaderReflectionVariable"/> interface.</returns>
        /// <unmanaged>ID3D11ShaderReflectionVariable* GetVariableByName([In] const char* Name)</unmanaged>
        public SlimDX2.D3DCompiler.ShaderReflectionVariable GetVariableByName(string name) {
            unsafe {
                IntPtr name_ = Marshal.StringToHGlobalAnsi(name);
                SlimDX2.D3DCompiler.ShaderReflectionVariable __result__;
                __result__= (SlimDX2.D3DCompiler.ShaderReflectionVariable)new SlimDX2.D3DCompiler.ShaderReflectionVariable((IntPtr)SlimDX2.D3DCompiler.LocalInterop.CallivoidPtr(_nativePointer, 10 * 4, (void*)name_));
                Marshal.FreeHGlobal(name_ );
                return __result__;
            }
        }
        
        /// <summary>	
        /// Get a description of how a resource is bound to a shader. 	
        /// </summary>	
        /// <remarks>	
        /// A shader consists of executable code (the compiled HLSL functions) and a set of resources that supply the shader with input data. GetResourceBindingDescByName gets information about how one resource in the set is bound as an input to the shader. The  Name parameter specifies the name of the resource.This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="name">The constant-buffer name of the resource.</param>
        /// <param name="descRef">A pointer to an input-binding description. See <see cref="SlimDX2.D3DCompiler.ShaderInputBindDescription"/>.</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT GetResourceBindingDescByName([In] const char* Name,[Out] D3D11_SHADER_INPUT_BIND_DESC* pDesc)</unmanaged>
        public SlimDX2.Result GetResourceBindingDescByName(string name, out SlimDX2.D3DCompiler.ShaderInputBindDescription descRef) {
            unsafe {
                IntPtr name_ = Marshal.StringToHGlobalAnsi(name);
                SlimDX2.D3DCompiler.ShaderInputBindDescription.__Native descRef_ = new SlimDX2.D3DCompiler.ShaderInputBindDescription.__Native();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 11 * 4, (void*)name_, &descRef_);
                Marshal.FreeHGlobal(name_ );
                descRef = new SlimDX2.D3DCompiler.ShaderInputBindDescription();
                descRef.__MarshalFrom(ref descRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the number of Mov instructions.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>Returns the number of Mov instructions.</returns>
        /// <unmanaged>UINT GetMovInstructionCount()</unmanaged>
        internal int GetMovInstructionCount() {
            unsafe {
                int __result__;
                __result__= (int)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 12 * 4);
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the number of Movc instructions.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>Returns the number of Movc instructions.</returns>
        /// <unmanaged>UINT GetMovcInstructionCount()</unmanaged>
        internal int GetMovcInstructionCount() {
            unsafe {
                int __result__;
                __result__= (int)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 13 * 4);
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the number of conversion instructions.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>Returns the number of conversion instructions.</returns>
        /// <unmanaged>UINT GetConversionInstructionCount()</unmanaged>
        internal int GetConversionInstructionCount() {
            unsafe {
                int __result__;
                __result__= (int)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 14 * 4);
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the number of bitwise instructions.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>The number of bitwise instructions.</returns>
        /// <unmanaged>UINT GetBitwiseInstructionCount()</unmanaged>
        internal int GetBitwiseInstructionCount() {
            unsafe {
                int __result__;
                __result__= (int)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 15 * 4);
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the geometry-shader input-primitive description.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>The input-primitive description, see D3D10_PRIMITIVE_TOPOLOGY.</returns>
        /// <unmanaged>D3D_PRIMITIVE GetGSInputPrimitive()</unmanaged>
        internal SlimDX2.D3DCompiler.InputPrimitive GetGSInputPrimitive() {
            unsafe {
                SlimDX2.D3DCompiler.InputPrimitive __result__;
                __result__= (SlimDX2.D3DCompiler.InputPrimitive)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 16 * 4);
                return __result__;
            }
        }
        
        /// <summary>	
        /// Indicates whether a shader is a sample frequency shader.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>Returns true if the shader is a sample frequency shader; otherwise returns false.</returns>
        /// <unmanaged>BOOL IsSampleFrequencyShader()</unmanaged>
        internal bool IsSampleFrequencyShader_() {
            unsafe {
                bool __result__;
                __result__= (bool)(0!=SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 17 * 4));
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the number of interface slots in a shader.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <returns>The number of interface slots in the shader.</returns>
        /// <unmanaged>UINT GetNumInterfaceSlots()</unmanaged>
        internal int GetNumInterfaceSlots() {
            unsafe {
                int __result__;
                __result__= (int)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 18 * 4);
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the minimum feature level.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="levelRef">A pointer to one of the enumerated values in <see cref="SlimDX2.Direct3D.FeatureLevel"/>, which represents the minimum feature level.</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>HRESULT GetMinFeatureLevel([Out] D3D_FEATURE_LEVEL* pLevel)</unmanaged>
        internal SlimDX2.Result GetMinFeatureLevel(out SlimDX2.Direct3D.FeatureLevel levelRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* levelRef_ = &levelRef)
                    __result__= (SlimDX2.Result)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 19 * 4, levelRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Retrieves the sizes, in thread groups, of the X, Y, and Z dimensions of the shader's thread-group grid.	
        /// </summary>	
        /// <remarks>	
        /// This method's interface is hosted in the out-of-box DLL D3DCompiler_xx.dll.	
        /// </remarks>	
        /// <param name="sizeXRef">A pointer to the size, in thread groups, of the x-dimension of the thread-group grid. The maximum size is 65535.</param>
        /// <param name="sizeYRef">A pointer to the size, in thread groups, of the y-dimension of the thread-group grid. The maximum size is 65535.</param>
        /// <param name="sizeZRef">A pointer to the size, in thread groups, of the z-dimension of the thread-group grid. The maximum size is 65535.</param>
        /// <returns>Returns one of the following {{Direct3D 11 Return Codes}}.</returns>
        /// <unmanaged>UINT GetThreadGroupSize([Out, Optional] UINT* pSizeX,[Out, Optional] UINT* pSizeY,[Out, Optional] UINT* pSizeZ)</unmanaged>
        public int GetThreadGroupSize(out int sizeXRef, out int sizeYRef, out int sizeZRef) {
            unsafe {
                int __result__;
                fixed (void* sizeXRef_ = &sizeXRef)
                    fixed (void* sizeYRef_ = &sizeYRef)
                        fixed (void* sizeZRef_ = &sizeZRef)
                            __result__= (int)SlimDX2.D3DCompiler.LocalInterop.Calliint(_nativePointer, 20 * 4, sizeXRef_, sizeYRef_, sizeZRef_);
                return __result__;
            }
        }
    }
}
