// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Enums for SlimDX2.D3DCompiler namespace.
//     This code was generated by a tool.
//     Date : 11/03/2010 15:35:57
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace SlimDX2.D3DCompiler {

    
    /// <summary>	
    /// Values that indicate how the pipeline interprets geometry or hull shader input primitives.	
    /// </summary>	
    /// <remarks>	
    /// The <see cref="SlimDX2.D3DCompiler.ShaderReflection.GetGSInputPrimitive"/> method returns a D3D_PRIMITIVE-typed value.	
    /// </remarks>	
    /// <unmanaged>D3D_PRIMITIVE</unmanaged>
    public enum InputPrimitive : int {	
        
        /// <summary>	
        /// The shader has not been initialized with an input primitive type.	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_UNDEFINED</unmanaged>
        Undefined = unchecked((int)0),			
        
        /// <summary>	
        /// Interpret the input primitive as a point.	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_POINT</unmanaged>
        Point = unchecked((int)1),			
        
        /// <summary>	
        /// Interpret the input primitive as a line. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_LINE</unmanaged>
        Line = unchecked((int)2),			
        
        /// <summary>	
        /// Interpret the input primitive as a triangle. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_TRIANGLE</unmanaged>
        Triangle = unchecked((int)3),			
        
        /// <summary>	
        /// Interpret the input primitive as a line with adjacency data. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_LINE_ADJ</unmanaged>
        LineWithAdjency = unchecked((int)6),			
        
        /// <summary>	
        /// Interpret the input primitive as a triangle with adjacency data. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_TRIANGLE_ADJ</unmanaged>
        TriangleWithAdjency = unchecked((int)7),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_1_CONTROL_POINT_PATCH</unmanaged>
        PatchWith1ControlPoints = unchecked((int)8),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_2_CONTROL_POINT_PATCH</unmanaged>
        PatchWith2ControlPoints = unchecked((int)9),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_3_CONTROL_POINT_PATCH</unmanaged>
        PatchWith3ControlPoints = unchecked((int)10),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_4_CONTROL_POINT_PATCH</unmanaged>
        PatchWith4ControlPoints = unchecked((int)11),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_5_CONTROL_POINT_PATCH</unmanaged>
        PatchWith5ControlPoints = unchecked((int)12),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_6_CONTROL_POINT_PATCH</unmanaged>
        PatchWith6ControlPoints = unchecked((int)13),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_7_CONTROL_POINT_PATCH</unmanaged>
        PatchWith7ControlPoints = unchecked((int)14),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_8_CONTROL_POINT_PATCH</unmanaged>
        PatchWith8ControlPoints = unchecked((int)15),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_9_CONTROL_POINT_PATCH</unmanaged>
        PatchWith9ControlPoints = unchecked((int)16),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_10_CONTROL_POINT_PATCH</unmanaged>
        PatchWith10ControlPoints = unchecked((int)17),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_11_CONTROL_POINT_PATCH</unmanaged>
        PatchWith11ControlPoints = unchecked((int)18),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_12_CONTROL_POINT_PATCH</unmanaged>
        PatchWith12ControlPoints = unchecked((int)19),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_13_CONTROL_POINT_PATCH</unmanaged>
        PatchWith13ControlPoints = unchecked((int)20),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_14_CONTROL_POINT_PATCH</unmanaged>
        PatchWith14ControlPoints = unchecked((int)21),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_15_CONTROL_POINT_PATCH</unmanaged>
        PatchWith15ControlPoints = unchecked((int)22),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_16_CONTROL_POINT_PATCH</unmanaged>
        PatchWith16ControlPoints = unchecked((int)23),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_17_CONTROL_POINT_PATCH</unmanaged>
        PatchWith17ControlPoints = unchecked((int)24),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_18_CONTROL_POINT_PATCH</unmanaged>
        PatchWith18ControlPoints = unchecked((int)25),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch. 	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_19_CONTROL_POINT_PATCH</unmanaged>
        PatchWith19ControlPoints = unchecked((int)26),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_20_CONTROL_POINT_PATCH</unmanaged>
        PatchWith20ControlPoints = unchecked((int)28),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_21_CONTROL_POINT_PATCH</unmanaged>
        PatchWith21ControlPoints = unchecked((int)29),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_22_CONTROL_POINT_PATCH</unmanaged>
        PatchWith22ControlPoints = unchecked((int)30),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_23_CONTROL_POINT_PATCH</unmanaged>
        PatchWith23ControlPoints = unchecked((int)31),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_24_CONTROL_POINT_PATCH</unmanaged>
        PatchWith24ControlPoints = unchecked((int)32),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_25_CONTROL_POINT_PATCH</unmanaged>
        PatchWith25ControlPoints = unchecked((int)33),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_26_CONTROL_POINT_PATCH</unmanaged>
        PatchWith26ControlPoints = unchecked((int)34),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_27_CONTROL_POINT_PATCH</unmanaged>
        PatchWith27ControlPoints = unchecked((int)35),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_28_CONTROL_POINT_PATCH</unmanaged>
        PatchWith28ControlPoints = unchecked((int)36),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_29_CONTROL_POINT_PATCH</unmanaged>
        PatchWith29ControlPoints = unchecked((int)37),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_30_CONTROL_POINT_PATCH</unmanaged>
        PatchWith30ControlPoints = unchecked((int)38),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_31_CONTROL_POINT_PATCH</unmanaged>
        PatchWith31ControlPoints = unchecked((int)39),			
        
        /// <summary>	
        /// Interpret the input primitive as a control point patch.  	
        /// </summary>	
        /// <unmanaged>D3D_PRIMITIVE_32_CONTROL_POINT_PATCH</unmanaged>
        PatchWith32ControlPoints = unchecked((int)40),			
    }
    
    /// <summary>	
    /// Values that indicate the location of a shader #include file. 	
    /// </summary>	
    /// <remarks>	
    /// You pass a D3D_INCLUDE_TYPE-typed value to the  IncludeType parameter in a call to the  <see cref="SlimDX2.D3DCompiler.Include.Open"/> method to indicate the location of the #include file.	
    /// </remarks>	
    /// <unmanaged>D3D_INCLUDE_TYPE</unmanaged>
    public enum IncludeType : int {	
        
        /// <summary>	
        /// The local directory.	
        /// </summary>	
        /// <unmanaged>D3D_INCLUDE_LOCAL</unmanaged>
        Local = unchecked((int)0),			
        
        /// <summary>	
        /// The system directory.	
        /// </summary>	
        /// <unmanaged>D3D_INCLUDE_SYSTEM</unmanaged>
        System = unchecked((int)1),			
    }
    
    /// <summary>	
    /// Values that identify the class of a shader variable.	
    /// </summary>	
    /// <remarks>	
    /// The class of a shader variable is not a programming class; the class identifies the variable class such as scalar, vector, object, and so on. D3D_SHADER_VARIABLE_CLASS-typed values are specified in the Class member of the <see cref="SlimDX2.D3DCompiler.ShaderTypeDescription"/> structure.	
    /// </remarks>	
    /// <unmanaged>D3D_SHADER_VARIABLE_CLASS</unmanaged>
    public enum ShaderVariableClass : int {	
        
        /// <summary>	
        /// The shader variable is a scalar.	
        /// </summary>	
        /// <unmanaged>D3D_SVC_SCALAR</unmanaged>
        Scalar = unchecked((int)0),			
        
        /// <summary>	
        /// The shader variable is a vector.	
        /// </summary>	
        /// <unmanaged>D3D_SVC_VECTOR</unmanaged>
        Vector = unchecked((int)1),			
        
        /// <summary>	
        /// The shader variable is a row-major matrix.	
        /// </summary>	
        /// <unmanaged>D3D_SVC_MATRIX_ROWS</unmanaged>
        MatrixRows = unchecked((int)2),			
        
        /// <summary>	
        /// The shader variable is a column-major matrix.	
        /// </summary>	
        /// <unmanaged>D3D_SVC_MATRIX_COLUMNS</unmanaged>
        MatrixColumns = unchecked((int)3),			
        
        /// <summary>	
        /// The shader variable is an object.	
        /// </summary>	
        /// <unmanaged>D3D_SVC_OBJECT</unmanaged>
        Object = unchecked((int)4),			
        
        /// <summary>	
        /// The shader variable is a structure.	
        /// </summary>	
        /// <unmanaged>D3D_SVC_STRUCT</unmanaged>
        Struct = unchecked((int)5),			
        
        /// <summary>	
        /// The shader variable is a class.	
        /// </summary>	
        /// <unmanaged>D3D_SVC_INTERFACE_CLASS</unmanaged>
        InterfaceClass = unchecked((int)6),			
        
        /// <summary>	
        /// The shader variable is an interface.	
        /// </summary>	
        /// <unmanaged>D3D_SVC_INTERFACE_POINTER</unmanaged>
        InterfacePointer = unchecked((int)7),			
    }
    
    /// <summary>	
    /// Values that identify information about a shader variable.	
    /// </summary>	
    /// <remarks>	
    /// A call to the  <see cref="SlimDX2.D3DCompiler.ShaderReflectionVariable.GetDescription"/> method returns D3D_SHADER_VARIABLE_FLAGS values in the  uFlags member of a  <see cref="SlimDX2.D3DCompiler.ShaderVariableDescription"/> structure.	
    /// </remarks>	
    /// <unmanaged>D3D_SHADER_VARIABLE_FLAGS</unmanaged>
    [Flags]
    public enum ShaderVariableFlags : int {	
        
        /// <summary>	
        /// Indicates that the registers assigned to this shader variable were explicitly declared in shader code (instead of automatically assigned by the compiler).	
        /// </summary>	
        /// <unmanaged>D3D_SVF_USERPACKED</unmanaged>
        Userpacked = unchecked((int)1),			
        
        /// <summary>	
        /// Indicates that this variable is used by this shader. This value confirms that a particular shader variable (which can be common to many different shaders) is indeed used by a particular shader.	
        /// </summary>	
        /// <unmanaged>D3D_SVF_USED</unmanaged>
        Used = unchecked((int)2),			
        
        /// <summary>	
        /// Indicates that this variable is an interface.	
        /// </summary>	
        /// <unmanaged>D3D_SVF_INTERFACE_POINTER</unmanaged>
        InterfacePointer = unchecked((int)4),			
        
        /// <summary>	
        /// Indicates that this variable is a parameter of an interface.	
        /// </summary>	
        /// <unmanaged>D3D_SVF_INTERFACE_PARAMETER</unmanaged>
        InterfaceParameter = unchecked((int)8),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Values that identify various data, texture, and buffer types that can be assigned to a shader variable.	
    /// </summary>	
    /// <remarks>	
    /// A call to the <see cref="SlimDX2.D3DCompiler.ShaderReflectionType.GetDescription"/> method returns a D3D_SHADER_VARIABLE_TYPE value in the  Type member of a  <see cref="SlimDX2.D3DCompiler.ShaderTypeDescription"/> structure.The types in a structured buffer describe the structure of the elements in the buffer. The layout of these types generally match their C++ struct counterparts. The following examples show structured buffers:	
    /// <code> struct mystruct {float4 val; uint ind;}; RWStructuredBuffer&lt;mystruct&gt; rwbuf;	
    /// RWStructuredBuffer&lt;float3&gt; rwbuf2; </code>	
    /// 	
    /// </remarks>	
    /// <unmanaged>D3D_SHADER_VARIABLE_TYPE</unmanaged>
    public enum ShaderVariableType : int {	
        
        /// <summary>	
        /// The variable is a void pointer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_VOID</unmanaged>
        Void = unchecked((int)0),			
        
        /// <summary>	
        /// The variable is a boolean.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_BOOL</unmanaged>
        Bool = unchecked((int)1),			
        
        /// <summary>	
        /// The variable is an integer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_INT</unmanaged>
        Int = unchecked((int)2),			
        
        /// <summary>	
        /// The variable is a floating-point number.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_FLOAT</unmanaged>
        Float = unchecked((int)3),			
        
        /// <summary>	
        /// The variable is a string.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_STRING</unmanaged>
        String = unchecked((int)4),			
        
        /// <summary>	
        /// The variable is a texture.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TEXTURE</unmanaged>
        Texture = unchecked((int)5),			
        
        /// <summary>	
        /// The variable is a 1D texture.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TEXTURE1D</unmanaged>
        Texture1D = unchecked((int)6),			
        
        /// <summary>	
        /// The variable is a 2D texture.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TEXTURE2D</unmanaged>
        Texture2D = unchecked((int)7),			
        
        /// <summary>	
        /// The variable is a 3D texture.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TEXTURE3D</unmanaged>
        Texture3D = unchecked((int)8),			
        
        /// <summary>	
        /// The variable is a texture cube.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TEXTURECUBE</unmanaged>
        Texturecube = unchecked((int)9),			
        
        /// <summary>	
        /// The variable is a sampler.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_SAMPLER</unmanaged>
        Sampler = unchecked((int)10),			
        
        /// <summary>	
        /// The variable is a pixel shader.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_SAMPLER1D</unmanaged>
        Sampler1d = unchecked((int)11),			
        
        /// <summary>	
        /// The variable is a vertex shader.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_SAMPLER2D</unmanaged>
        Sampler2d = unchecked((int)12),			
        
        /// <summary>	
        /// The variable is an unsigned integer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_SAMPLER3D</unmanaged>
        Sampler3d = unchecked((int)13),			
        
        /// <summary>	
        /// The variable is an 8-bit unsigned integer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_SAMPLERCUBE</unmanaged>
        Samplercube = unchecked((int)14),			
        
        /// <summary>	
        /// The variable is a geometry shader.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_PIXELSHADER</unmanaged>
        Pixelshader = unchecked((int)15),			
        
        /// <summary>	
        /// The variable is a rasterizer-state object.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_VERTEXSHADER</unmanaged>
        Vertexshader = unchecked((int)16),			
        
        /// <summary>	
        /// The variable is a depth-stencil-state object.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_PIXELFRAGMENT</unmanaged>
        Pixelfragment = unchecked((int)17),			
        
        /// <summary>	
        /// The variable is a blend-state object.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_VERTEXFRAGMENT</unmanaged>
        Vertexfragment = unchecked((int)18),			
        
        /// <summary>	
        /// The variable is a buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_UINT</unmanaged>
        UInt = unchecked((int)19),			
        
        /// <summary>	
        /// The variable is a constant buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_UINT8</unmanaged>
        UInt8 = unchecked((int)20),			
        
        /// <summary>	
        /// The variable is a texture buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_GEOMETRYSHADER</unmanaged>
        Geometryshader = unchecked((int)21),			
        
        /// <summary>	
        /// The variable is a 1D-texture array.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_RASTERIZER</unmanaged>
        Rasterizer = unchecked((int)22),			
        
        /// <summary>	
        /// The variable is a 2D-texture array.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_DEPTHSTENCIL</unmanaged>
        Depthstencil = unchecked((int)23),			
        
        /// <summary>	
        /// The variable is a render-target view.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_BLEND</unmanaged>
        Blend = unchecked((int)24),			
        
        /// <summary>	
        /// The variable is a depth-stencil view.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_BUFFER</unmanaged>
        Buffer = unchecked((int)25),			
        
        /// <summary>	
        /// The variable is a 2D-multisampled texture.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_CBUFFER</unmanaged>
        ConstantBuffer = unchecked((int)26),			
        
        /// <summary>	
        /// The variable is a 2D-multisampled-texture array.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TBUFFER</unmanaged>
        TextureBuffer = unchecked((int)27),			
        
        /// <summary>	
        /// The variable is a texture-cube array.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TEXTURE1DARRAY</unmanaged>
        Texture1DArray = unchecked((int)28),			
        
        /// <summary>	
        /// The variable holds a compiled hull-shader binary.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TEXTURE2DARRAY</unmanaged>
        Texture2DArray = unchecked((int)29),			
        
        /// <summary>	
        /// The variable holds a compiled domain-shader binary.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_RENDERTARGETVIEW</unmanaged>
        Rendertargetview = unchecked((int)30),			
        
        /// <summary>	
        /// The variable is an interface.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_DEPTHSTENCILVIEW</unmanaged>
        Depthstencilview = unchecked((int)31),			
        
        /// <summary>	
        /// The variable holds a compiled compute-shader binary.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TEXTURE2DMS</unmanaged>
        Texture2DMultisampled = unchecked((int)32),			
        
        /// <summary>	
        /// The variable is a double precision (64-bit) floating-point number.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TEXTURE2DMSARRAY</unmanaged>
        Texture2DMultisampledArray = unchecked((int)33),			
        
        /// <summary>	
        /// The variable is a 1D read-and-write texture.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_TEXTURECUBEARRAY</unmanaged>
        Texturecubearray = unchecked((int)34),			
        
        /// <summary>	
        /// The variable is an array of 1D read-and-write textures.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_HULLSHADER</unmanaged>
        Hullshader = unchecked((int)35),			
        
        /// <summary>	
        /// The variable is a 2D read-and-write texture.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_DOMAINSHADER</unmanaged>
        Domainshader = unchecked((int)36),			
        
        /// <summary>	
        /// The variable is an array of 2D read-and-write textures.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_INTERFACE_POINTER</unmanaged>
        InterfacePointer = unchecked((int)37),			
        
        /// <summary>	
        /// The variable is a 3D read-and-write texture.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_COMPUTESHADER</unmanaged>
        Computeshader = unchecked((int)38),			
        
        /// <summary>	
        /// The variable is a read-and-write buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_DOUBLE</unmanaged>
        Double = unchecked((int)39),			
        
        /// <summary>	
        /// The variable is a byte-address buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_RWTEXTURE1D</unmanaged>
        RWTexture1D = unchecked((int)40),			
        
        /// <summary>	
        /// The variable is a read-and-write byte-address buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_RWTEXTURE1DARRAY</unmanaged>
        RWTexture1DArray = unchecked((int)41),			
        
        /// <summary>	
        /// The variable is a structured buffer. For more information about structured buffer, see the Remarks section.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_RWTEXTURE2D</unmanaged>
        RWTexture2D = unchecked((int)42),			
        
        /// <summary>	
        /// The variable is a read-and-write structured buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_RWTEXTURE2DARRAY</unmanaged>
        RWTexture2DArray = unchecked((int)43),			
        
        /// <summary>	
        /// The variable is an append structured buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_RWTEXTURE3D</unmanaged>
        RWTexture3D = unchecked((int)44),			
        
        /// <summary>	
        /// The variable is a consume structured buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_RWBUFFER</unmanaged>
        RWBuffer = unchecked((int)45),			
        
        /// <summary>	
        /// The variable is a void pointer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_BYTEADDRESS_BUFFER</unmanaged>
        ByteaddressBuffer = unchecked((int)46),			
        
        /// <summary>	
        /// The variable is a boolean.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_RWBYTEADDRESS_BUFFER</unmanaged>
        RWByteAddressBuffer = unchecked((int)47),			
        
        /// <summary>	
        /// The variable is an integer.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_STRUCTURED_BUFFER</unmanaged>
        StructuredBuffer = unchecked((int)48),			
        
        /// <summary>	
        /// The variable is a floating-point number.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_RWSTRUCTURED_BUFFER</unmanaged>
        RwstructuredBuffer = unchecked((int)49),			
        
        /// <summary>	
        /// The variable is a string.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_APPEND_STRUCTURED_BUFFER</unmanaged>
        AppendStructuredBuffer = unchecked((int)50),			
        
        /// <summary>	
        /// The variable is a texture.	
        /// </summary>	
        /// <unmanaged>D3D_SVT_CONSUME_STRUCTURED_BUFFER</unmanaged>
        ConsumeStructuredBuffer = unchecked((int)51),			
    }
    
    /// <summary>	
    /// Values that identify shader-input options.	
    /// </summary>	
    /// <remarks>	
    /// D3D_SHADER_INPUT_FLAGS-typed values are specified in the uFlags member of the <see cref="SlimDX2.D3DCompiler.ShaderInputBindDescription"/> structure.	
    /// </remarks>	
    /// <unmanaged>D3D_SHADER_INPUT_FLAGS</unmanaged>
    [Flags]
    public enum ShaderInputFlags : int {	
        
        /// <summary>	
        /// Assign a shader input to a register based on the register assignment in the HLSL code (instead of letting the compiler choose the register).	
        /// </summary>	
        /// <unmanaged>D3D_SIF_USERPACKED</unmanaged>
        Userpacked = unchecked((int)1),			
        
        /// <summary>	
        /// Use a comparison sampler, which uses the {{SampleCmp (DirectX HLSL Texture Object)}} and {{SampleCmpLevelZero (DirectX HLSL Texture Object)}} sampling functions.	
        /// </summary>	
        /// <unmanaged>D3D_SIF_COMPARISON_SAMPLER</unmanaged>
        ComparisonSampler = unchecked((int)2),			
        
        /// <summary>	
        /// A 2-bit value for encoding texture components.	
        /// </summary>	
        /// <unmanaged>D3D_SIF_TEXTURE_COMPONENT_0</unmanaged>
        TextureComponent0 = unchecked((int)4),			
        
        /// <summary>	
        /// A 2-bit value for encoding texture components.	
        /// </summary>	
        /// <unmanaged>D3D_SIF_TEXTURE_COMPONENT_1</unmanaged>
        TextureComponent1 = unchecked((int)8),			
        
        /// <summary>	
        /// A 2-bit value for encoding texture components.	
        /// </summary>	
        /// <unmanaged>D3D_SIF_TEXTURE_COMPONENTS</unmanaged>
        TextureComponents = unchecked((int)12),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Values that identify resource types that can be bound to a shader and that are reflected as part of the resource description for the shader.	
    /// </summary>	
    /// <remarks>	
    /// D3D_SHADER_INPUT_TYPE-typed values are specified in the Type member of the <see cref="SlimDX2.D3DCompiler.ShaderInputBindDescription"/> structure.	
    /// </remarks>	
    /// <unmanaged>D3D_SHADER_INPUT_TYPE</unmanaged>
    public enum ShaderInputType : int {	
        
        /// <summary>	
        /// The shader resource is a constant buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_CBUFFER</unmanaged>
        ConstantBuffer = unchecked((int)0),			
        
        /// <summary>	
        /// The shader resource is a texture buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_TBUFFER</unmanaged>
        TextureBuffer = unchecked((int)1),			
        
        /// <summary>	
        /// The shader resource is a texture.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_TEXTURE</unmanaged>
        Texture = unchecked((int)2),			
        
        /// <summary>	
        /// The shader resource is a sampler.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_SAMPLER</unmanaged>
        Sampler = unchecked((int)3),			
        
        /// <summary>	
        /// The shader resource is a read-and-write buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_UAV_RWTYPED</unmanaged>
        UnorderedAccessViewRwtyped = unchecked((int)4),			
        
        /// <summary>	
        /// The shader resource is a structured buffer.For more information about structured buffer, see the Remarks section.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_STRUCTURED</unmanaged>
        Structured = unchecked((int)5),			
        
        /// <summary>	
        /// The shader resource is a read-and-write structured buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_UAV_RWSTRUCTURED</unmanaged>
        UnorderedAccessViewRwstructured = unchecked((int)6),			
        
        /// <summary>	
        /// The shader resource is a byte-address buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_BYTEADDRESS</unmanaged>
        Byteaddress = unchecked((int)7),			
        
        /// <summary>	
        /// The shader resource is a read-and-write byte-address buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_UAV_RWBYTEADDRESS</unmanaged>
        UnorderedAccessViewRWByteAddress = unchecked((int)8),			
        
        /// <summary>	
        /// The shader resource is an append-structured buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_UAV_APPEND_STRUCTURED</unmanaged>
        UnorderedAccessViewAppendStructured = unchecked((int)9),			
        
        /// <summary>	
        /// The shader resource is a consume-structured buffer.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_UAV_CONSUME_STRUCTURED</unmanaged>
        UnorderedAccessViewConsumeStructured = unchecked((int)10),			
        
        /// <summary>	
        /// The shader resource is a read-and-write structured buffer that uses the built-in counter to append or consume.	
        /// </summary>	
        /// <unmanaged>D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER</unmanaged>
        UnorderedAccessViewRwstructuredWithCounter = unchecked((int)11),			
    }
    
    /// <summary>	
    /// Values that identify the indended use of a constant-data buffer.	
    /// </summary>	
    /// <remarks>	
    /// D3D_SHADER_CBUFFER_FLAGS-typed values are specified in the uFlags member of the <see cref="SlimDX2.D3DCompiler.ConstantBufferDescription"/> structure.	
    /// </remarks>	
    /// <unmanaged>D3D_SHADER_CBUFFER_FLAGS</unmanaged>
    [Flags]
    public enum ShaderConstantBufferFlags : int {	
        
        /// <summary>	
        /// Bind the constant buffer to an input slot defined in HLSL code (instead of letting the compiler choose the input slot).	
        /// </summary>	
        /// <unmanaged>D3D_CBF_USERPACKED</unmanaged>
        ConstantBufferUserpacked = unchecked((int)1),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Values that identify the intended use of constant-buffer data. 	
    /// </summary>	
    /// <unmanaged>D3D_CBUFFER_TYPE</unmanaged>
    public enum ConstantBufferType : int {	
        
        /// <summary>	
        /// A buffer containing scalar constants.	
        /// </summary>	
        /// <unmanaged>D3D_CT_CBUFFER</unmanaged>
        ConstantBuffer = unchecked((int)0),			
        
        /// <summary>	
        /// A buffer containing texture data.	
        /// </summary>	
        /// <unmanaged>D3D_CT_TBUFFER</unmanaged>
        TextureBuffer = unchecked((int)1),			
        
        /// <summary>	
        /// A buffer containing interface pointers.	
        /// </summary>	
        /// <unmanaged>D3D_CT_INTERFACE_POINTERS</unmanaged>
        InterfacePointers = unchecked((int)2),			
        
        /// <summary>	
        /// A buffer containing binding information.	
        /// </summary>	
        /// <unmanaged>D3D_CT_RESOURCE_BIND_INFO</unmanaged>
        ResourceBindInformation = unchecked((int)3),			
    }
    
    /// <summary>	
    /// Values that identify shader parameters that use system-value semantics.	
    /// </summary>	
    /// <remarks>	
    /// The D3D_NAME values identify shader parameters that have {{predefined system-value}} semantics. These values are used in a shader-signature description. For more information about shader-signature description, see <see cref="SlimDX2.D3DCompiler.SignatureParameterDescription"/>.	
    /// </remarks>	
    /// <unmanaged>D3D_NAME</unmanaged>
    public enum ParameterName : int {	
        
        /// <summary>	
        /// This parameter does not use a predefined system-value semantic.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_UNDEFINED</unmanaged>
        Undefined = unchecked((int)0),			
        
        /// <summary>	
        /// This parameter contains position data.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_POSITION</unmanaged>
        Position = unchecked((int)1),			
        
        /// <summary>	
        /// This parameter contains clip-distance data.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_CLIP_DISTANCE</unmanaged>
        ClipDistance = unchecked((int)2),			
        
        /// <summary>	
        /// This parameter contains cull-distance data.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_CULL_DISTANCE</unmanaged>
        CullDistance = unchecked((int)3),			
        
        /// <summary>	
        /// This parameter contains a render-target-array index.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_RENDER_TARGET_ARRAY_INDEX</unmanaged>
        RenderTargetArrayIndex = unchecked((int)4),			
        
        /// <summary>	
        /// This parameter contains a viewport-array index.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_VIEWPORT_ARRAY_INDEX</unmanaged>
        ViewportArrayIndex = unchecked((int)5),			
        
        /// <summary>	
        /// This parameter contains a vertex ID.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_VERTEX_ID</unmanaged>
        VertexId = unchecked((int)6),			
        
        /// <summary>	
        /// This parameter contains a primitive ID.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_PRIMITIVE_ID</unmanaged>
        PrimitiveId = unchecked((int)7),			
        
        /// <summary>	
        /// This parameter contains an instance ID.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_INSTANCE_ID</unmanaged>
        InstanceId = unchecked((int)8),			
        
        /// <summary>	
        /// This parameter contains data that identifies whether or not the primitive faces the camera.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_IS_FRONT_FACE</unmanaged>
        IsFrontFace = unchecked((int)9),			
        
        /// <summary>	
        /// This parameter contains a sampler-array index.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_SAMPLE_INDEX</unmanaged>
        SampleIndex = unchecked((int)10),			
        
        /// <summary>	
        /// This parameter contains one of four tessellation factors that correspond to the amount of parts that a quad patch is broken into along the given edge. This flag is used to tessellate a quad patch.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR</unmanaged>
        FinalQuadEdgeTessfactor = unchecked((int)11),			
        
        /// <summary>	
        /// This parameter contains one of two tessellation factors that correspond to the amount of parts that a quad patch is broken into vertically and horizontally within the patch. This flag is used to tessellate a quad patch.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR</unmanaged>
        FinalQuadInsideTessfactor = unchecked((int)12),			
        
        /// <summary>	
        /// This parameter contains one of three tessellation factors that correspond to the amount of parts that a tri patch is broken into along the given edge. This flag is used to tessellate a tri patch.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR</unmanaged>
        FinalTriEdgeTessfactor = unchecked((int)13),			
        
        /// <summary>	
        /// This parameter contains the tessellation factor that corresponds to the amount of parts that a tri patch is broken into within the patch. This flag is used to tessellate a tri patch.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR</unmanaged>
        FinalTriInsideTessfactor = unchecked((int)14),			
        
        /// <summary>	
        /// This parameter contains the tessellation factor that corresponds to the number of lines broken into within the patch. This flag is used to tessellate an isolines patch.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR</unmanaged>
        FinalLineDetailTessfactor = unchecked((int)15),			
        
        /// <summary>	
        /// This parameter contains the tessellation factor that corresponds to the number of lines that are created within the patch. This flag is used to tessellate an isolines patch.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR</unmanaged>
        FinalLineDensityTessfactor = unchecked((int)16),			
        
        /// <summary>	
        /// This parameter contains render-target data.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_TARGET</unmanaged>
        Target = unchecked((int)64),			
        
        /// <summary>	
        /// This parameter contains depth data.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_DEPTH</unmanaged>
        Depth = unchecked((int)65),			
        
        /// <summary>	
        /// This parameter contains alpha-coverage data.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_COVERAGE</unmanaged>
        Coverage = unchecked((int)66),			
        
        /// <summary>	
        /// This parameter signifies that the value is greater than or equal to a reference value. This flag is used to specify conservative depth for a pixel shader.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_DEPTH_GREATER_EQUAL</unmanaged>
        DepthGreaterEqual = unchecked((int)67),			
        
        /// <summary>	
        /// This parameter signifies that the value is less than or equal to a reference value. This flag is used to specify conservative depth for a pixel shader.	
        /// </summary>	
        /// <unmanaged>D3D_NAME_DEPTH_LESS_EQUAL</unmanaged>
        DepthLessEqual = unchecked((int)68),			
    }
    
    /// <summary>	
    /// Values that identify the return type of a resource.	
    /// </summary>	
    /// <remarks>	
    /// A resource return type is specified in the ReturnType member of the <see cref="SlimDX2.D3DCompiler.ShaderInputBindDescription"/> structure.	
    /// </remarks>	
    /// <unmanaged>D3D_RESOURCE_RETURN_TYPE</unmanaged>
    public enum ResourceReturnType : int {	
        
        /// <summary>	
        /// Return type is an unsigned integer value normalized to a value between 0 and 1.	
        /// </summary>	
        /// <unmanaged>D3D_RETURN_TYPE_UNORM</unmanaged>
        UNorm = unchecked((int)1),			
        
        /// <summary>	
        /// Return type is a signed integer value normalized to a value between -1 and 1.	
        /// </summary>	
        /// <unmanaged>D3D_RETURN_TYPE_SNORM</unmanaged>
        SNorm = unchecked((int)2),			
        
        /// <summary>	
        /// Return type is a signed integer.	
        /// </summary>	
        /// <unmanaged>D3D_RETURN_TYPE_SINT</unmanaged>
        SInt = unchecked((int)3),			
        
        /// <summary>	
        /// Return type is an unsigned integer.	
        /// </summary>	
        /// <unmanaged>D3D_RETURN_TYPE_UINT</unmanaged>
        UInt = unchecked((int)4),			
        
        /// <summary>	
        /// Return type is a floating-point number.	
        /// </summary>	
        /// <unmanaged>D3D_RETURN_TYPE_FLOAT</unmanaged>
        Float = unchecked((int)5),			
        
        /// <summary>	
        /// Return type is unknown.	
        /// </summary>	
        /// <unmanaged>D3D_RETURN_TYPE_MIXED</unmanaged>
        Mixed = unchecked((int)6),			
        
        /// <summary>	
        /// Return type is a double-precision value.	
        /// </summary>	
        /// <unmanaged>D3D_RETURN_TYPE_DOUBLE</unmanaged>
        Double = unchecked((int)7),			
        
        /// <summary>	
        /// Return type is a multiple-dword type, such as a double or uint64, and the component is continued from the previous component that was declared.  The first component represents the lower bits.	
        /// </summary>	
        /// <unmanaged>D3D_RETURN_TYPE_CONTINUED</unmanaged>
        Continued = unchecked((int)8),			
    }
    
    /// <summary>	
    /// Values that identify the data types that can be stored in a register.	
    /// </summary>	
    /// <remarks>	
    /// A register component type is specified in the ComponentType member of the <see cref="SlimDX2.D3DCompiler.SignatureParameterDescription"/> structure.	
    /// </remarks>	
    /// <unmanaged>D3D_REGISTER_COMPONENT_TYPE</unmanaged>
    public enum RegisterComponentType : int {	
        
        /// <summary>	
        /// The data type is unknown.	
        /// </summary>	
        /// <unmanaged>D3D_REGISTER_COMPONENT_UNKNOWN</unmanaged>
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// 32-bit unsigned integer.	
        /// </summary>	
        /// <unmanaged>D3D_REGISTER_COMPONENT_UINT32</unmanaged>
        Uint32 = unchecked((int)1),			
        
        /// <summary>	
        /// 32-bit signed integer.	
        /// </summary>	
        /// <unmanaged>D3D_REGISTER_COMPONENT_SINT32</unmanaged>
        Sint32 = unchecked((int)2),			
        
        /// <summary>	
        /// 32-bit floating-point number.	
        /// </summary>	
        /// <unmanaged>D3D_REGISTER_COMPONENT_FLOAT32</unmanaged>
        Float32 = unchecked((int)3),			
    }
    
    /// <summary>	
    /// Values that identify domain options for tessellator data.	
    /// </summary>	
    /// <remarks>	
    /// The data domain defines the type of data. This enumeration is used by <see cref="SlimDX2.D3DCompiler.ShaderDescription"/>.	
    /// </remarks>	
    /// <unmanaged>D3D_TESSELLATOR_DOMAIN</unmanaged>
    public enum TessellatorDomain : int {	
        
        /// <summary>	
        /// The data type is undefined.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_DOMAIN_UNDEFINED</unmanaged>
        Undefined = unchecked((int)0),			
        
        /// <summary>	
        /// Isoline data.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_DOMAIN_ISOLINE</unmanaged>
        Isoline = unchecked((int)1),			
        
        /// <summary>	
        /// Triangle data.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_DOMAIN_TRI</unmanaged>
        Tri = unchecked((int)2),			
        
        /// <summary>	
        /// Quad data.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_DOMAIN_QUAD</unmanaged>
        Quad = unchecked((int)3),			
    }
    
    /// <summary>	
    /// Values that identify partitioning options.	
    /// </summary>	
    /// <remarks>	
    /// During tessellation, the partition option helps to determine how the algorithm chooses the next partition value; this enumeration is used by <see cref="SlimDX2.D3DCompiler.ShaderDescription"/>.	
    /// </remarks>	
    /// <unmanaged>D3D_TESSELLATOR_PARTITIONING</unmanaged>
    public enum TessellatorPartitioning : int {	
        
        /// <summary>	
        /// The partitioning type is undefined.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING_UNDEFINED</unmanaged>
        Undefined = unchecked((int)0),			
        
        /// <summary>	
        /// Partition with integers only.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING_INTEGER</unmanaged>
        Integer = unchecked((int)1),			
        
        /// <summary>	
        /// Partition with a power-of-two number only.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING_POW2</unmanaged>
        Pow2 = unchecked((int)2),			
        
        /// <summary>	
        /// Partition with an odd, fractional number.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD</unmanaged>
        FractionalOdd = unchecked((int)3),			
        
        /// <summary>	
        /// Partition with an even, fractional number.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN</unmanaged>
        FractionalEven = unchecked((int)4),			
    }
    
    /// <summary>	
    /// Values that identify output primitive types.	
    /// </summary>	
    /// <remarks>	
    /// The output primitive type determines how the tessellator output data is organized; this enumeration is used by <see cref="SlimDX2.D3DCompiler.ShaderDescription"/>.	
    /// </remarks>	
    /// <unmanaged>D3D_TESSELLATOR_OUTPUT_PRIMITIVE</unmanaged>
    public enum Primitive : int {	
        
        /// <summary>	
        /// The output primitive type is undefined.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_UNDEFINED</unmanaged>
        Undefined = unchecked((int)0),			
        
        /// <summary>	
        /// The output primitive type is a point.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_POINT</unmanaged>
        Point = unchecked((int)1),			
        
        /// <summary>	
        /// The output primitive type is a line.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_LINE</unmanaged>
        Line = unchecked((int)2),			
        
        /// <summary>	
        /// The output primitive type is a clockwise triangle.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW</unmanaged>
        TriangleCw = unchecked((int)3),			
        
        /// <summary>	
        /// The output primitive type is a counter clockwise triangle.	
        /// </summary>	
        /// <unmanaged>D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW</unmanaged>
        TriangleCcw = unchecked((int)4),			
    }
    
    /// <summary>	
    ///  Indicates shader type.	
    /// </summary>	
    /// <unmanaged>D3D11_SHADER_VERSION_TYPE</unmanaged>
    public enum ShaderVersionType : int {	
        
        /// <summary>	
        ///  Pixel shader. 	
        /// </summary>	
        /// <unmanaged>D3D11_SHVER_PIXEL_SHADER</unmanaged>
        VerPixelShader = unchecked((int)0),			
        
        /// <summary>	
        ///  Vertex shader. 	
        /// </summary>	
        /// <unmanaged>D3D11_SHVER_VERTEX_SHADER</unmanaged>
        VerVertexShader = unchecked((int)1),			
        
        /// <summary>	
        ///  Geometry shader. 	
        /// </summary>	
        /// <unmanaged>D3D11_SHVER_GEOMETRY_SHADER</unmanaged>
        VerGeometryShader = unchecked((int)2),			
        
        /// <summary>	
        ///  Hull shader. 	
        /// </summary>	
        /// <unmanaged>D3D11_SHVER_HULL_SHADER</unmanaged>
        VerHullShader = unchecked((int)3),			
        
        /// <summary>	
        ///  Domain shader. 	
        /// </summary>	
        /// <unmanaged>D3D11_SHVER_DOMAIN_SHADER</unmanaged>
        VerDomainShader = unchecked((int)4),			
        
        /// <summary>	
        ///  Compute shader. 	
        /// </summary>	
        /// <unmanaged>D3D11_SHVER_COMPUTE_SHADER</unmanaged>
        VerComputeShader = unchecked((int)5),			
    }
    
    /// <summary>	
    /// Strip flag options.	
    /// </summary>	
    /// <remarks>	
    /// These flags are used by <see cref="SlimDX2.D3DCompiler.D3D.StripShader"/>.	
    /// </remarks>	
    /// <unmanaged>D3DCOMPILER_STRIP_FLAGS</unmanaged>
    [Flags]
    public enum StripFlags : int {	
        
        /// <summary>	
        /// Remove reflection data.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILER_STRIP_REFLECTION_DATA</unmanaged>
        ReflectionData = unchecked((int)1),			
        
        /// <summary>	
        /// Remove debug information.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILER_STRIP_DEBUG_INFO</unmanaged>
        DebugInformation = unchecked((int)2),			
        
        /// <summary>	
        /// Remove test blob data.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILER_STRIP_TEST_BLOBS</unmanaged>
        TestBlobs = unchecked((int)4),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Values that identify parts of the content of an arbitrary length data buffer.	
    /// </summary>	
    /// <remarks>	
    /// These values are passed to the <see cref="SlimDX2.D3DCompiler.D3D.GetBlobPart"/> function.	
    /// </remarks>	
    /// <unmanaged>D3D_BLOB_PART</unmanaged>
    public enum BlobPart : int {	
        
        /// <summary>	
        /// The blob part is an input signature.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_INPUT_SIGNATURE_BLOB</unmanaged>
        InputSignatureBlob,
        
        /// <summary>	
        /// The blob part is an output signature.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_OUTPUT_SIGNATURE_BLOB</unmanaged>
        OutputSignatureBlob,
        
        /// <summary>	
        /// The blob part is an input and output signature.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_INPUT_AND_OUTPUT_SIGNATURE_BLOB</unmanaged>
        InputAndOutputSignatureBlob,
        
        /// <summary>	
        /// The blob part is a patch constant signature.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_PATCH_CONSTANT_SIGNATURE_BLOB</unmanaged>
        PatchConstantSignatureBlob,
        
        /// <summary>	
        /// The blob part is all signature.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_ALL_SIGNATURE_BLOB</unmanaged>
        AllSignatureBlob,
        
        /// <summary>	
        /// The blob part is debug information.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_DEBUG_INFO</unmanaged>
        DebugInformation,
        
        /// <summary>	
        /// The blob part is a legacy shader.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_LEGACY_SHADER</unmanaged>
        LegacyShader,
        
        /// <summary>	
        /// The blob part is an XNA prepass shader.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_XNA_PREPASS_SHADER</unmanaged>
        XnaPrepassShader,
        
        /// <summary>	
        /// The blob part is an XNA shader.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_XNA_SHADER</unmanaged>
        XnaShader,
        
        /// <summary>	
        /// The blob part is a test alternate shader.Note This value identifies a test part and is only produced by special compiler versions. Therefore, this part type is typically not present in shaders.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_TEST_ALTERNATE_SHADER</unmanaged>
        TestAlternateShader = unchecked((int)32768),			
        
        /// <summary>	
        /// The blob part is test compilation details. Note This value identifies a test part and is only produced by special compiler versions. Therefore, this part type is typically not present in shaders.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_TEST_COMPILE_DETAILS</unmanaged>
        TestCompileDetails,
        
        /// <summary>	
        /// The blob part is test compilation performance. Note This value identifies a test part and is only produced by special compiler versions. Therefore, this part type is typically not present in shaders.	
        /// </summary>	
        /// <unmanaged>D3D_BLOB_TEST_COMPILE_PERF</unmanaged>
        TestCompilePerf,
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>D3DCOMPILE_SHADER_FLAGS</unmanaged>
    [Flags]
    public enum ShaderFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_DEBUG</unmanaged>
        Debug = unchecked((int)(1 << 0)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_SKIP_VALIDATION</unmanaged>
        SkipValidation = unchecked((int)(1 << 1)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_SKIP_OPTIMIZATION</unmanaged>
        SkipOptimization = unchecked((int)(1 << 2)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_PACK_MATRIX_ROW_MAJOR</unmanaged>
        PackMatrixRowMajor = unchecked((int)(1 << 3)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR</unmanaged>
        PackMatrixColumnMajor = unchecked((int)(1 << 4)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_PARTIAL_PRECISION</unmanaged>
        PartialPrecision = unchecked((int)(1 << 5)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT</unmanaged>
        ForceVsSoftwareNoOpt = unchecked((int)(1 << 6)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT</unmanaged>
        ForcePsSoftwareNoOpt = unchecked((int)(1 << 7)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_NO_PRESHADER</unmanaged>
        NoPreshader = unchecked((int)(1 << 8)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_AVOID_FLOW_CONTROL</unmanaged>
        AvoidFlowControl = unchecked((int)(1 << 9)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_PREFER_FLOW_CONTROL</unmanaged>
        PreferFlowControl = unchecked((int)(1 << 10)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_IEEE_STRICTNESS</unmanaged>
        IeeeStrictness = unchecked((int)(1 << 13)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL0</unmanaged>
        OptimizationLevel0 = unchecked((int)(1 << 14)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL1</unmanaged>
        OptimizationLevel1 = unchecked((int)0),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL2</unmanaged>
        OptimizationLevel2 = unchecked((int)((1 << 14) | (1 << 15))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_OPTIMIZATION_LEVEL3</unmanaged>
        OptimizationLevel3 = unchecked((int)(1 << 15)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_RESERVED16</unmanaged>
        Reserved16 = unchecked((int)(1 << 16)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_RESERVED17</unmanaged>
        Reserved17 = unchecked((int)(1 << 17)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_WARNINGS_ARE_ERRORS</unmanaged>
        WarningsAreErrors = unchecked((int)(1 << 18)),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>D3DCOMPILE_EFFECT_FLAGS</unmanaged>
    [Flags]
    public enum EffectFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_EFFECT_CHILD_EFFECT</unmanaged>
        ChildEffect = unchecked((int)(1 << 0)),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3DCOMPILE_EFFECT_ALLOW_SLOW_OPS</unmanaged>
        AllowSlowOperations = unchecked((int)(1 << 1)),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>D3DCOMPILE_DISASM_FLAGS</unmanaged>
    [Flags]
    public enum DisassemblyFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3D_DISASM_ENABLE_COLOR_CODE</unmanaged>
        DisassemblyEnableColorCode = unchecked((int)0x00000001),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS</unmanaged>
        DisassemblyEnableDefaultValuePrints = unchecked((int)0x00000002),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING</unmanaged>
        DisassemblyEnableInstructionNumbering = unchecked((int)0x00000004),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3D_DISASM_ENABLE_INSTRUCTION_CYCLE</unmanaged>
        DisassemblyEnableInstructionCycle = unchecked((int)0x00000008),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>D3D_DISASM_DISABLE_DEBUG_INFO</unmanaged>
        DisassemblyDisableDebugInformation = unchecked((int)0x00000010),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
}
