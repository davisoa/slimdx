// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Interfaces for SlimDX2.XAudio2 namespace.
//     This code was generated by a tool.
//     Date : 11/15/2010 14:52:49
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX2.XAudio2 {

    
    /// <summary>	
    /// IXAudio2 is the interface for the XAudio2 object, which manages all audio engine states, the audio processing thread, the voice graph, and so forth. This is the only XAudio2 interface that is derived from the COM IUnknown interface. It controls the lifetime of the XAudio2 object using two methods derived from IUnknown: {{IXAudio2::AddRef}} and {{IXAudio2::Release}}. No other XAudio2 objects are reference-counted; their lifetimes are explicitly controlled using create and destroy calls, and are bounded by the lifetime of the XAudio2 object that owns them.	
    /// </summary>	
    /// <unmanaged>IXAudio2</unmanaged>
    [Guid("8bcf1f58-9fe7-4583-8ac6-e2adc465c8bb")]
    public partial class XAudio2 : SlimDX2.ComObject {
        public XAudio2(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>Constant None.</summary>
        internal static System.Guid CLSID_XAudio2 = new System.Guid("5a508685-a254-4fba-9b82-9a24b00306af");
        
        /// <summary>Constant None.</summary>
        internal static System.Guid CLSID_XAudio2_Debug = new System.Guid("db05ea35-0329-4d4b-a53a-6dead03d3852");
        
        /// <summary>Constant None.</summary>
        internal static System.Guid IID_IXAudio2 = new System.Guid("8bcf1f58-9fe7-4583-8ac6-e2adc465c8bb");
        
        /// <summary>	
        /// Returns the number of available audio output devices.	
        /// </summary>	
        /// <unmanaged>HRESULT IXAudio2::GetDeviceCount([Out] int* pCount)</unmanaged>
        public int DeviceCount {
                get { int __output__; GetDeviceCount(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Returns current resource usage details, such as available memory or CPU usage.	
        /// </summary>	
        /// <unmanaged>void IXAudio2::GetPerformanceData([Out] XAUDIO2_PERFORMANCE_DATA* pPerfData)</unmanaged>
        public SlimDX2.XAudio2.PerformanceData PerformanceData {
                get { SlimDX2.XAudio2.PerformanceData __output__; GetPerformanceData(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Returns the number of available audio output devices.	
        /// </summary>	
        /// <param name="countRef">[out]  Number of available audio output devices that is returned.  On Xbox 360 this value will always be 1. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2::GetDeviceCount([Out] int* pCount)</unmanaged>
        internal SlimDX2.Result GetDeviceCount(out int countRef) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* countRef_ = &countRef)
                    __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 3 * 4, countRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Returns information about an audio output device.	
        /// </summary>	
        /// <param name="index">[in]  Index of the device to be queried. This value must be less than the count returned by <see cref="SlimDX2.XAudio2.XAudio2.GetDeviceCount"/>. </param>
        /// <param name="deviceDetailsRef">[out]  On success, pointer to an <see cref="SlimDX2.XAudio2.DeviceDetails"/> structure that is returned. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2::GetDeviceDetails([None] int Index,[Out] XAUDIO2_DEVICE_DETAILS* pDeviceDetails)</unmanaged>
        internal SlimDX2.Result GetDeviceDetails(int index, out SlimDX2.XAudio2.DeviceDetails deviceDetailsRef) {
            unsafe {
                SlimDX2.XAudio2.DeviceDetails.__Native deviceDetailsRef_ = new SlimDX2.XAudio2.DeviceDetails.__Native();
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 4 * 4, index, &deviceDetailsRef_);
                deviceDetailsRef = new SlimDX2.XAudio2.DeviceDetails();
                deviceDetailsRef.__MarshalFrom(ref deviceDetailsRef_);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Sets XAudio2 parameters and prepares XAudio2 for use.	
        /// </summary>	
        /// <param name="flags">[in]  Flags that specify the behavior of the XAudio2 object. This value must be 0. </param>
        /// <param name="xAudio2Processor">[in]  An enumeration value that specifies which CPU to use. The values have different meanings on different platforms: Windows  See the <see cref="SlimDX2.XAudio2.WindowsProcessorSpecifier"/> enumerator for details. Note Specifying a processor should generally be avoided because it can interfere with the scheduler's ability to schedule threads effectively across processors. Instead, pass the XAUDIO2_DEFAULT_PROCESSOR value.  Xbox 360  See the {{XAUDIO2_XBOX_HWTHREAD_SPECIFIER}} enumerator for details.  Specifying the value XAUDIO2_DEFAULT_PROCESSOR causes XAudio2 to use its default processor on each platform. Note that Xaudio2 only supports a single thread at a time and only one processor may be specified. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2::Initialize([None] int Flags,[None] XAUDIO2_PROCESSOR XAudio2Processor)</unmanaged>
        internal SlimDX2.Result Initialize(int flags, SlimDX2.XAudio2.WindowsProcessorSpecifier xAudio2Processor) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 5 * 4, flags, unchecked((int)xAudio2Processor));
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Adds an <see cref="SlimDX2.XAudio2.EngineCallback"/> pointer to the {{XAudio2}} engine callback list.  	
        /// </summary>	
        /// <param name="callbackRef">[in]  <see cref="SlimDX2.XAudio2.EngineCallback"/> pointer to add to the {{XAudio2}} engine callback list. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2::RegisterForCallbacks([In] IXAudio2EngineCallback* pCallback)</unmanaged>
        internal SlimDX2.Result RegisterForCallbacks_(IntPtr callbackRef) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 6 * 4, (void*)callbackRef);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Removes an <see cref="SlimDX2.XAudio2.EngineCallback"/> pointer from the {{XAudio2}} engine callback list.	
        /// </summary>	
        /// <param name="callbackRef">[in]  <see cref="SlimDX2.XAudio2.EngineCallback"/> pointer to remove from the {{XAudio2}} engine callback list. If the given pointer is present more than once in the list, only the first instance in the list will be removed. </param>
        /// <unmanaged>void IXAudio2::UnregisterForCallbacks([In] IXAudio2EngineCallback* pCallback)</unmanaged>
        internal void UnregisterForCallbacks_(IntPtr callbackRef) {
            unsafe {
                SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 7 * 4, (void*)callbackRef);
            }
        }
        
        /// <summary>	
        /// Creates and configures a source voice.	
        /// </summary>	
        /// <param name="sourceVoiceRef">[out]  If successful, returns a pointer to the new <see cref="SlimDX2.XAudio2.SourceVoice"/> object. </param>
        /// <param name="sourceFormatRef">[in]  Pointer to a <see cref="SlimDX2.Windows.WaveFormat"/> structure. This structure contains the expected format for all audio buffers submitted to the source voice. XAudio2 supports voice types of PCM, xWMA, ADPCM (Windows only), and XMA (Xbox 360 only). XAudio2 supports the following PCM formats.   8-bit (unsigned) integer PCM   16-bit integer PCM (Optimal format for XAudio2)   20-bit integer PCM (either in 24 or 32 bit containers)   24-bit integer PCM (either in 24 or 32 bit containers)   32-bit integer PCM   32-bit float PCM (Preferred format after 16-bit integer)   The number of channels in a source voice must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. The sample rate of a source voice must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. Note Data formats such as XMA, {{ADPCM}}, and {{xWMA}} that require more information than provided by <see cref="SlimDX2.Windows.WaveFormat"/> have a <see cref="SlimDX2.Windows.WaveFormat"/> structure as the first member in their format structure. When creating a source voice with one of those formats cast the format's structure as a <see cref="SlimDX2.Windows.WaveFormat"/> structure and use it as the value for pSourceFormat. </param>
        /// <param name="flags">[in]  Flags that specify the behavior of the source voice. A flag can be 0 or a combination of one or more of the following: ValueDescriptionXAUDIO2_VOICE_NOPITCHNo pitch control is available on the voice.?XAUDIO2_VOICE_NOSRCNo sample rate conversion is available on the voice, the voice's  outputs must have the same sample rate.Note The XAUDIO2_VOICE_NOSRC flag causes the voice to behave as though the XAUDIO2_VOICE_NOPITCH flag also is specified. ?XAUDIO2_VOICE_USEFILTERThe filter effect should be available on this voice.?XAUDIO2_VOICE_MUSICThe voice is used to play background music. The system automatically  can replace the voice with music selected by the user.? </param>
        /// <param name="maxFrequencyRatio">[in]  Highest allowable frequency ratio that can be set on this voice. The value for this argument must be between XAUDIO2_MIN_FREQ_RATIO and XAUDIO2_MAX_FREQ_RATIO. Subsequent calls to <see cref="SlimDX2.XAudio2.SourceVoice.SetFrequencyRatio"/> are clamped between XAUDIO2_MIN_FREQ_RATIO and MaxFrequencyRatio. The maximum value for this argument is defined as XAUDIO2_MAX_FREQ_RATIO, which allows pitch to be raised by up to 10 octaves. If MaxFrequencyRatio is less than 1.0, the voice will use that ratio immediately after being created (rather than the default of 1.0). Xbox 360  For XMA voices there is an additional restriction on the MaxFrequencyRatio argument and the voice's sample rate. The product of these two numbers cannot exceed XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MONO for one-channel voices or XAUDIO2_MAX_RATIO_TIMES_RATE_XMA_MULTICHANNEL for voices with any other number of channels. If the value specified for MaxFrequencyRatio is too high for the specified format, the call to CreateSourceVoice fails and produces a debug message.  Note XAudio2's memory usage can be reduced by using the lowest possible MaxFrequencyRatio value. </param>
        /// <param name="callbackRef">[in, optional]  Pointer to a client-provided callback interface, <see cref="SlimDX2.XAudio2.VoiceCallback"/>. </param>
        /// <param name="sendListRef">[in, optional]  Pointer to a list of <see cref="SlimDX2.XAudio2.VoiceSendDescriptors"/> structures that describe the set of destination voices for the source voice. If pSendList is NULL, the send list defaults to a single output to the first mastering voice created. </param>
        /// <param name="effectChainRef">[in, optional]  Pointer to a list of <see cref="SlimDX2.XAudio2.EffectChain"/> structures that describe an effect chain to use in the source voice. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2::CreateSourceVoice([Out] IXAudio2SourceVoice** ppSourceVoice,[In] const WAVEFORMATEX* pSourceFormat,[None] int Flags,[None] float MaxFrequencyRatio,[In, Optional] IXAudio2VoiceCallback* pCallback,[In, Optional] const XAUDIO2_VOICE_SENDS* pSendList,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        internal SlimDX2.Result CreateSourceVoice_(out SlimDX2.XAudio2.SourceVoice sourceVoiceRef, ref SlimDX2.Windows.WaveFormat sourceFormatRef, SlimDX2.XAudio2.VoiceFlags flags, float maxFrequencyRatio, IntPtr callbackRef, SlimDX2.XAudio2.VoiceSendDescriptors? sendListRef, SlimDX2.XAudio2.EffectChain? effectChainRef) {
            unsafe {
                IntPtr sourceVoiceRef_ = IntPtr.Zero;
                SlimDX2.Windows.WaveFormat.__Native sourceFormatRef_ = new SlimDX2.Windows.WaveFormat.__Native();
                sourceFormatRef.__MarshalTo(ref sourceFormatRef_);
                SlimDX2.XAudio2.VoiceSendDescriptors sendListRef_;
                if (sendListRef.HasValue)
                    sendListRef_ = sendListRef.Value;				
                SlimDX2.XAudio2.EffectChain effectChainRef_;
                if (effectChainRef.HasValue)
                    effectChainRef_ = effectChainRef.Value;				
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 8 * 4, &sourceVoiceRef_, &sourceFormatRef_, unchecked((int)flags), maxFrequencyRatio, (void*)callbackRef, (sendListRef.HasValue)?&sendListRef_:(void*)IntPtr.Zero, (effectChainRef.HasValue)?&effectChainRef_:(void*)IntPtr.Zero);
                sourceVoiceRef = (sourceVoiceRef_ == IntPtr.Zero)?null:new SlimDX2.XAudio2.SourceVoice(sourceVoiceRef_);	
                sourceFormatRef_.__MarshalFree();
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Creates and configures a submix voice.	
        /// </summary>	
        /// <param name="submixVoiceRef">[out]  On success, returns a pointer to the new  <see cref="SlimDX2.XAudio2.SubmixVoice"/> object. </param>
        /// <param name="inputChannels">[in]  Number of channels in the input audio data of the submix voice. InputChannels must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. </param>
        /// <param name="inputSampleRate">[in]  Sample rate of the input audio data of submix voice. This rate must be a multiple of  XAUDIO2_QUANTUM_DENOMINATOR.  InputSampleRate must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. </param>
        /// <param name="flags">[in]  Flags that specify the behavior of the submix voice. Can be 0 or the following: ValueDescriptionXAUDIO2_VOICE_USEFILTERThe filter effect should be available on this voice.? </param>
        /// <param name="processingStage">[in]  An arbitrary number that specifies when this voice is processed with respect to other submix  voices, if the XAudio2 engine is running other submix voices. The voice is processed after all other  voices that include a smaller ProcessingStage value, and before all other voices  that include a larger ProcessingStage value. Voices that include the same  ProcessingStage value are processed in any order. A submix voice cannot send to  another submix voice with a lower or equal ProcessingStage value; this prevents  audio being lost due to a submix cycle. </param>
        /// <param name="sendListRef">[in, optional]  Pointer to a list of <see cref="SlimDX2.XAudio2.VoiceSendDescriptors"/> structures that describe the set  of destination voices for the submix voice. If pSendList is NULL, the send list will default to a single output to the  first mastering voice created. </param>
        /// <param name="effectChainRef">[in, optional]  Pointer to a list of <see cref="SlimDX2.XAudio2.EffectChain"/> structures that describe an  effect chain to use in the submix voice. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2::CreateSubmixVoice([Out] IXAudio2SubmixVoice** ppSubmixVoice,[None] int InputChannels,[None] int InputSampleRate,[None] int Flags,[None] int ProcessingStage,[In, Optional] const XAUDIO2_VOICE_SENDS* pSendList,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        internal SlimDX2.Result CreateSubmixVoice(out SlimDX2.XAudio2.SubmixVoice submixVoiceRef, int inputChannels, int inputSampleRate, SlimDX2.XAudio2.VoiceSendFlags flags, int processingStage, SlimDX2.XAudio2.VoiceSendDescriptors? sendListRef, SlimDX2.XAudio2.EffectChain? effectChainRef) {
            unsafe {
                IntPtr submixVoiceRef_ = IntPtr.Zero;
                SlimDX2.XAudio2.VoiceSendDescriptors sendListRef_;
                if (sendListRef.HasValue)
                    sendListRef_ = sendListRef.Value;				
                SlimDX2.XAudio2.EffectChain effectChainRef_;
                if (effectChainRef.HasValue)
                    effectChainRef_ = effectChainRef.Value;				
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 9 * 4, &submixVoiceRef_, inputChannels, inputSampleRate, unchecked((int)flags), processingStage, (sendListRef.HasValue)?&sendListRef_:(void*)IntPtr.Zero, (effectChainRef.HasValue)?&effectChainRef_:(void*)IntPtr.Zero);
                submixVoiceRef = (submixVoiceRef_ == IntPtr.Zero)?null:new SlimDX2.XAudio2.SubmixVoice(submixVoiceRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Creates and configures a mastering voice.	
        /// </summary>	
        /// <param name="masteringVoiceRef">[out]  If successful, returns a pointer to the new <see cref="SlimDX2.XAudio2.MasteringVoice"/> object. </param>
        /// <param name="inputChannels">[in]  Number of channels the mastering voice expects in its input audio. InputChannels must be less than or equal to XAUDIO2_MAX_AUDIO_CHANNELS. InputChannels can be set to XAUDIO2_DEFAULT_CHANNELS, with the default being determined by the current platform. Windows  Attempts to detect the system speaker configuration setup.  Xbox 360  Defaults to 5.1 surround.  </param>
        /// <param name="inputSampleRate">[in]  Sample rate of the input audio data of the mastering voice. This rate must be a multiple of XAUDIO2_QUANTUM_DENOMINATOR. InputSampleRate must be between XAUDIO2_MIN_SAMPLE_RATE and XAUDIO2_MAX_SAMPLE_RATE. InputSampleRate can be set to XAUDIO2_DEFAULT_SAMPLERATE, with the default being determined by the current platform. Windows  Windows XP defaults to 44100. Windows Vista and Windows 7 default to the setting specified in the Sound Control Panel. The default for this setting is 44100 (or 48000 if required by the driver).  Xbox 360  Defaults to 48000.  </param>
        /// <param name="flags">[in]  Flags that specify the behavior of the mastering voice. Must be 0. </param>
        /// <param name="deviceIndex">[in]  Index of the output device that will be sent input by the mastering voice. Specifying the default value of 0 causes XAudio2 to select the global default audio device. </param>
        /// <param name="effectChainRef">[in, optional]  Pointer to an <see cref="SlimDX2.XAudio2.EffectChain"/> structure that describe an effect chain to use in the mastering voice, or NULL to use no effects. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2::CreateMasteringVoice([Out] IXAudio2MasteringVoice** ppMasteringVoice,[None] int InputChannels,[None] int InputSampleRate,[None] int Flags,[None] int DeviceIndex,[In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        internal SlimDX2.Result CreateMasteringVoice(out SlimDX2.XAudio2.MasteringVoice masteringVoiceRef, int inputChannels, int inputSampleRate, int flags, int deviceIndex, SlimDX2.XAudio2.EffectChain? effectChainRef) {
            unsafe {
                IntPtr masteringVoiceRef_ = IntPtr.Zero;
                SlimDX2.XAudio2.EffectChain effectChainRef_;
                if (effectChainRef.HasValue)
                    effectChainRef_ = effectChainRef.Value;				
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 10 * 4, &masteringVoiceRef_, inputChannels, inputSampleRate, flags, deviceIndex, (effectChainRef.HasValue)?&effectChainRef_:(void*)IntPtr.Zero);
                masteringVoiceRef = (masteringVoiceRef_ == IntPtr.Zero)?null:new SlimDX2.XAudio2.MasteringVoice(masteringVoiceRef_);	
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Creates and starts the audio processing thread.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2::StartEngine()</unmanaged>
        public SlimDX2.Result StartEngine() {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 11 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Stops and destroys the audio processing thread.	
        /// </summary>	
        /// <unmanaged>void IXAudio2::StopEngine()</unmanaged>
        public void StopEngine() {
            unsafe {
                SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 12 * 4);
            }
        }
        
        /// <summary>	
        /// Atomically applies a set of operations that are tagged with a given identifier.	
        /// </summary>	
        /// <param name="operationSet">[in]  Identifier of the set of operations to be applied. To commit all pending operations, pass XAUDIO2_COMMIT_ALL. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2::CommitChanges([None] int OperationSet)</unmanaged>
        public SlimDX2.Result CommitChanges(int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 13 * 4, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Returns current resource usage details, such as available memory or CPU usage.	
        /// </summary>	
        /// <param name="erfDataRef">[out]  On success, pointer to an <see cref="SlimDX2.XAudio2.PerformanceData"/> structure that is returned. </param>
        /// <unmanaged>void IXAudio2::GetPerformanceData([Out] XAUDIO2_PERFORMANCE_DATA* pPerfData)</unmanaged>
        internal void GetPerformanceData(out SlimDX2.XAudio2.PerformanceData erfDataRef) {
            unsafe {
                erfDataRef = new SlimDX2.XAudio2.PerformanceData();
                fixed (void* erfDataRef_ = &erfDataRef)
                    SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 14 * 4, erfDataRef_);
            }
        }
        
        /// <summary>	
        /// Changes global debug logging options for XAudio2.	
        /// </summary>	
        /// <param name="debugConfigurationRef"> Pointer to a <see cref="SlimDX2.XAudio2.DebugConfiguration"/> structure that contains the new debug configuration. </param>
        /// <param name="reservedRef">No documentation.</param>
        /// <unmanaged>void IXAudio2::SetDebugConfiguration([In, Optional] const XAUDIO2_DEBUG_CONFIGURATION* pDebugConfiguration,[In, Optional] void* pReserved)</unmanaged>
        public void SetDebugConfiguration(SlimDX2.XAudio2.DebugConfiguration? debugConfigurationRef, IntPtr reservedRef) {
            unsafe {
                SlimDX2.XAudio2.DebugConfiguration debugConfigurationRef_;
                if (debugConfigurationRef.HasValue)
                    debugConfigurationRef_ = debugConfigurationRef.Value;				
                SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 15 * 4, (debugConfigurationRef.HasValue)?&debugConfigurationRef_:(void*)IntPtr.Zero, (void*)reservedRef);
            }
        }
    }
    
    /// <summary>	
    /// IXAudio2Voice represents the base interface from which <see cref="SlimDX2.XAudio2.SourceVoice"/>, <see cref="SlimDX2.XAudio2.SubmixVoice"/> and <see cref="SlimDX2.XAudio2.MasteringVoice"/> are derived. The methods listed below are common to all voice subclasses.	
    /// </summary>	
    /// <unmanaged>IXAudio2Voice</unmanaged>
    public partial class Voice : SlimDX2.CppObject {
        public Voice(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// Returns information about the creation flags, input channels, and sample rate of a voice.	
        /// </summary>	
        /// <unmanaged>void IXAudio2Voice::GetVoiceDetails([Out] XAUDIO2_VOICE_DETAILS* pVoiceDetails)</unmanaged>
        public SlimDX2.XAudio2.VoiceDetails VoiceDetails {
                get { SlimDX2.XAudio2.VoiceDetails __output__; GetVoiceDetails(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Designates a new set of submix or mastering voices to receive the output of the voice.	
        /// </summary>	
        /// <unmanaged>HRESULT IXAudio2Voice::SetOutputVoices([In, Optional] const XAUDIO2_VOICE_SENDS* pSendList)</unmanaged>
        internal SlimDX2.XAudio2.VoiceSendDescriptors OutputVoices {
                set { SetOutputVoices(value); }
        }
        
        /// <summary>	
        /// Gets the voice's filter parameters.	
        /// </summary>	
        /// <unmanaged>void IXAudio2Voice::GetFilterParameters([Out] XAUDIO2_FILTER_PARAMETERS* pParameters)</unmanaged>
        public SlimDX2.XAudio2.FilterParameters FilterParameters {
                get { SlimDX2.XAudio2.FilterParameters __output__; GetFilterParameters(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Gets the current overall volume level of the voice.	
        /// </summary>	
        /// <unmanaged>void IXAudio2Voice::GetVolume([Out] float* pVolume)</unmanaged>
        public float Volume {
                get { float __output__; GetVolume(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Returns information about the creation flags, input channels, and sample rate of a voice.	
        /// </summary>	
        /// <param name="voiceDetailsRef">[in, out]  <see cref="SlimDX2.XAudio2.VoiceDetails"/> structure containing information about the voice. </param>
        /// <unmanaged>void IXAudio2Voice::GetVoiceDetails([Out] XAUDIO2_VOICE_DETAILS* pVoiceDetails)</unmanaged>
        internal void GetVoiceDetails(out SlimDX2.XAudio2.VoiceDetails voiceDetailsRef) {
            unsafe {
                voiceDetailsRef = new SlimDX2.XAudio2.VoiceDetails();
                fixed (void* voiceDetailsRef_ = &voiceDetailsRef)
                    SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 0 * 4, voiceDetailsRef_);
            }
        }
        
        /// <summary>	
        /// Designates a new set of submix or mastering voices to receive the output of the voice.	
        /// </summary>	
        /// <param name="sendListRef">[in]  Array of <see cref="SlimDX2.XAudio2.VoiceSendDescriptors"/> structure pointers to destination voices. If pSendList is NULL, the voice will send its output to the current mastering voice. To set the voice to not send its output anywhere set the OutputCount member of <see cref="SlimDX2.XAudio2.VoiceSendDescriptors"/> to 0. All of the voices in a send list must have the same input sample rate, see {{XAudio2 Sample Rate Conversions}} for additional information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::SetOutputVoices([In, Optional] const XAUDIO2_VOICE_SENDS* pSendList)</unmanaged>
        internal SlimDX2.Result SetOutputVoices(SlimDX2.XAudio2.VoiceSendDescriptors? sendListRef) {
            unsafe {
                SlimDX2.XAudio2.VoiceSendDescriptors sendListRef_;
                if (sendListRef.HasValue)
                    sendListRef_ = sendListRef.Value;				
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 1 * 4, (sendListRef.HasValue)?&sendListRef_:(void*)IntPtr.Zero);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Replaces the effect chain of the voice.	
        /// </summary>	
        /// <param name="effectChainRef">[in, optional]  Pointer to an <see cref="SlimDX2.XAudio2.EffectChain"/> structure that describes the new effect chain to use. If NULL is passed, the current effect chain is removed. Note If pEffectChain is non-NULL, the <see cref="SlimDX2.XAudio2.EffectChain"/> structure that it points to must specify at least one effect. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::SetEffectChain([In, Optional] const XAUDIO2_EFFECT_CHAIN* pEffectChain)</unmanaged>
        internal SlimDX2.Result SetEffectChain(SlimDX2.XAudio2.EffectChain? effectChainRef) {
            unsafe {
                SlimDX2.XAudio2.EffectChain effectChainRef_;
                if (effectChainRef.HasValue)
                    effectChainRef_ = effectChainRef.Value;				
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 2 * 4, (effectChainRef.HasValue)?&effectChainRef_:(void*)IntPtr.Zero);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Enables the effect at a given position in the effect chain of the voice.	
        /// </summary>	
        /// <param name="effectIndex">[in]  Zero-based index of an effect in the effect chain of the voice. </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::EnableEffect([None] int EffectIndex,[None] int OperationSet)</unmanaged>
        public SlimDX2.Result EnableEffect(int effectIndex, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 3 * 4, effectIndex, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Disables the effect at a given position in the effect chain of the voice.	
        /// </summary>	
        /// <param name="effectIndex">[in]  Zero-based index of an effect in the effect chain of the voice. </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::DisableEffect([None] int EffectIndex,[None] int OperationSet)</unmanaged>
        public SlimDX2.Result DisableEffect(int effectIndex, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 4 * 4, effectIndex, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Returns the running state of the effect at a specified position in the effect chain of the voice.	
        /// </summary>	
        /// <param name="effectIndex">[in]  Zero-based index of an effect in the effect chain of the voice. </param>
        /// <param name="enabledRef">[out]  Returns TRUE If the effect is enabled. If the effect is disabled, returns FALSE. </param>
        /// <unmanaged>void IXAudio2Voice::GetEffectState([None] int EffectIndex,[Out] BOOL* pEnabled)</unmanaged>
        internal void GetEffectState(int effectIndex, out bool enabledRef) {
            unsafe {
                fixed (void* enabledRef_ = &enabledRef)
                    SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 5 * 4, effectIndex, enabledRef_);
            }
        }
        
        /// <summary>	
        /// Sets parameters for a given effect in the voice's effect chain.	
        /// </summary>	
        /// <param name="effectIndex">[in]  Zero-based index of an effect within the voice's effect chain. </param>
        /// <param name="arametersRef">[in]  Returns the current values of the effect-specific parameters. </param>
        /// <param name="parametersByteSize">[in]  Size of the pParameters array in bytes. </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview  for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::SetEffectParameters([None] int EffectIndex,[In, Buffer] const void* pParameters,[None] int ParametersByteSize,[None] int OperationSet)</unmanaged>
        internal SlimDX2.Result SetEffectParameters(int effectIndex, IntPtr arametersRef, int parametersByteSize, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 6 * 4, effectIndex, (void*)arametersRef, parametersByteSize, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Returns the current effect-specific parameters of a given effect in the voice's effect chain.	
        /// </summary>	
        /// <param name="effectIndex">[in]  Zero-based index of an effect within the voice's effect chain. </param>
        /// <param name="arametersRef">[out]  Returns the current values of the effect-specific parameters. </param>
        /// <param name="parametersByteSize">[out]  Size, in bytes, of the pParameters array. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::GetEffectParameters([None] int EffectIndex,[Out, Buffer] void* pParameters,[None] int ParametersByteSize)</unmanaged>
        internal SlimDX2.Result GetEffectParameters(int effectIndex, IntPtr arametersRef, int parametersByteSize) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 7 * 4, effectIndex, (void*)arametersRef, parametersByteSize);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Sets the voice's filter parameters.	
        /// </summary>	
        /// <param name="arametersRef">[in]  Pointer to an <see cref="SlimDX2.XAudio2.FilterParameters"/> structure containing the filter information. </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::SetFilterParameters([In] const XAUDIO2_FILTER_PARAMETERS* pParameters,[None] int OperationSet)</unmanaged>
        public SlimDX2.Result SetFilterParameters(SlimDX2.XAudio2.FilterParameters arametersRef, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 8 * 4, &arametersRef, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the voice's filter parameters.	
        /// </summary>	
        /// <param name="arametersRef">[out]  Pointer to an <see cref="SlimDX2.XAudio2.FilterParameters"/> structure containing the filter information. </param>
        /// <unmanaged>void IXAudio2Voice::GetFilterParameters([Out] XAUDIO2_FILTER_PARAMETERS* pParameters)</unmanaged>
        internal void GetFilterParameters(out SlimDX2.XAudio2.FilterParameters arametersRef) {
            unsafe {
                arametersRef = new SlimDX2.XAudio2.FilterParameters();
                fixed (void* arametersRef_ = &arametersRef)
                    SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 9 * 4, arametersRef_);
            }
        }
        
        /// <summary>	
        /// Sets the filter parameters on one of this voice's sends.	
        /// </summary>	
        /// <param name="destinationVoiceRef">[in]  <see cref="SlimDX2.XAudio2.Voice"/> pointer to the destination voice of the send whose filter parameters will be set. </param>
        /// <param name="arametersRef">[in]  Pointer to an <see cref="SlimDX2.XAudio2.FilterParameters"/> structure containing the filter information. </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::SetOutputFilterParameters([In, Optional] IXAudio2Voice* pDestinationVoice,[In] const XAUDIO2_FILTER_PARAMETERS* pParameters,[None] int OperationSet)</unmanaged>
        public SlimDX2.Result SetOutputFilterParameters(SlimDX2.XAudio2.Voice destinationVoiceRef, SlimDX2.XAudio2.FilterParameters arametersRef, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 10 * 4, (void*)((destinationVoiceRef == null)?IntPtr.Zero:destinationVoiceRef.NativePointer), &arametersRef, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Returns the filter parameters from one of this voice's sends.	
        /// </summary>	
        /// <param name="destinationVoiceRef">[in]  <see cref="SlimDX2.XAudio2.Voice"/> pointer to the destination voice of the send whose filter parameters will be read. </param>
        /// <param name="arametersRef">[out]  Pointer to an <see cref="SlimDX2.XAudio2.FilterParameters"/> structure containing the filter information. </param>
        /// <unmanaged>void IXAudio2Voice::GetOutputFilterParameters([In, Optional] IXAudio2Voice* pDestinationVoice,[Out] XAUDIO2_FILTER_PARAMETERS* pParameters)</unmanaged>
        public void GetOutputFilterParameters(SlimDX2.XAudio2.Voice destinationVoiceRef, out SlimDX2.XAudio2.FilterParameters arametersRef) {
            unsafe {
                arametersRef = new SlimDX2.XAudio2.FilterParameters();
                fixed (void* arametersRef_ = &arametersRef)
                    SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 11 * 4, (void*)((destinationVoiceRef == null)?IntPtr.Zero:destinationVoiceRef.NativePointer), arametersRef_);
            }
        }
        
        /// <summary>	
        /// Sets the overall volume level for the voice.	
        /// </summary>	
        /// <param name="volume">[in]  Overall volume level to use. See Remarks for more information on volume levels. </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::SetVolume([None] float Volume,[None] int OperationSet)</unmanaged>
        public SlimDX2.Result SetVolume(float volume, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 12 * 4, volume, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the current overall volume level of the voice.	
        /// </summary>	
        /// <param name="volumeRef">[out]  Returns the current overall volume level of the voice. See Remarks for more information on volume levels. </param>
        /// <unmanaged>void IXAudio2Voice::GetVolume([Out] float* pVolume)</unmanaged>
        internal void GetVolume(out float volumeRef) {
            unsafe {
                fixed (void* volumeRef_ = &volumeRef)
                    SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 13 * 4, volumeRef_);
            }
        }
        
        /// <summary>	
        /// Sets the volume levels for the voice, per channel.	
        /// </summary>	
        /// <param name="channels">[in]  Number of channels in the voice. </param>
        /// <param name="volumesRef">[in]  Array containing the new volumes of each channel in the voice.  The array must have Channels elements.  See Remarks for more information on  volume levels. </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::SetChannelVolumes([None] int Channels,[In, Buffer] const float* pVolumes,[None] int OperationSet)</unmanaged>
        public SlimDX2.Result SetChannelVolumes(int channels, float[] volumesRef, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* volumesRef_ = &volumesRef[0])
                    __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 14 * 4, channels, volumesRef_, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Returns the volume levels for the voice, per channel.	
        /// </summary>	
        /// <param name="channels">[in]  Confirms the channel count of the voice. </param>
        /// <param name="volumesRef">[out]  Returns the current volume level of each channel in the voice. The array must have at least Channels elements. See  Remarks for more information on volume levels.  </param>
        /// <unmanaged>void IXAudio2Voice::GetChannelVolumes([None] int Channels,[Out, Buffer] float* pVolumes)</unmanaged>
        public void GetChannelVolumes(int channels, float[] volumesRef) {
            unsafe {
                fixed (void* volumesRef_ = &volumesRef[0])
                    SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 15 * 4, channels, volumesRef_);
            }
        }
        
        /// <summary>	
        /// Sets the volume level of each channel of the final output for the voice. These channels are mapped to the input channels of a specified destination voice.	
        /// </summary>	
        /// <param name="destinationVoiceRef">[in]  Pointer to a destination <see cref="SlimDX2.XAudio2.Voice"/> for which to set volume levels. Note If the voice sends to a single target voice then specifying NULL will cause SetOutputMatrix to operate on that target voice. </param>
        /// <param name="sourceChannels">[in]  Confirms the output channel count of the voice. This is the number of channels that are produced by the last effect in the chain. </param>
        /// <param name="destinationChannels">[in]  Confirms the input channel count of the destination voice. </param>
        /// <param name="levelMatrixRef">[in]  Array of [SourceChannels ? DestinationChannels] volume levels sent to the destination voice. The level sent from source channel S to destination channel D is specified in the form pLevelMatrix[SourceChannels ? D + S]. For example, when rendering two-channel stereo input into 5.1 output that is weighted toward the front channels?but is absent from the center and low-frequency channels?the matrix might have the values shown in the following table.  OutputLeft InputRight Input Left1.00.0 Right0.01.0 Front Center0.00.0 LFE0.00.0 Rear Left0.80.0 Rear Right0.00.8  Note that the left and right input are fully mapped to the output left and right channels; 80 percent of the left and right input is mapped to the rear left and right channels. See Remarks for more information on volume levels. </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2Voice::SetOutputMatrix([In, Optional] IXAudio2Voice* pDestinationVoice,[None] int SourceChannels,[None] int DestinationChannels,[In, Buffer] const float* pLevelMatrix,[None] int OperationSet)</unmanaged>
        public SlimDX2.Result SetOutputMatrix(SlimDX2.XAudio2.Voice destinationVoiceRef, int sourceChannels, int destinationChannels, float[] levelMatrixRef, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                fixed (void* levelMatrixRef_ = &levelMatrixRef[0])
                    __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 16 * 4, (void*)((destinationVoiceRef == null)?IntPtr.Zero:destinationVoiceRef.NativePointer), sourceChannels, destinationChannels, levelMatrixRef_, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Gets the volume level of each channel of the final output for the voice. These channels are mapped to the input channels of a specified destination voice.	
        /// </summary>	
        /// <param name="destinationVoiceRef">[in]  Pointer specifying the destination <see cref="SlimDX2.XAudio2.Voice"/> to retrieve the output matrix for. Note If the voice sends to a single target voice then specifying NULL will cause GetOutputMatrix to operate on that target voice. </param>
        /// <param name="sourceChannels">[in]  Confirms the output channel count of the voice. This is the number of channels that are produced by the last effect in the chain. </param>
        /// <param name="destinationChannels">[in]  Confirms the input channel count of the destination voice. </param>
        /// <param name="levelMatrixRef">[out]  Array of [SourceChannels * DestinationChannels] volume levels sent to the destination voice. The level sent from source channel S to destination channel D is returned in the form pLevelMatrix[DestinationChannels ? S + D]. See Remarks for more information on volume levels. </param>
        /// <unmanaged>void IXAudio2Voice::GetOutputMatrix([In, Optional] IXAudio2Voice* pDestinationVoice,[None] int SourceChannels,[None] int DestinationChannels,[Out, Buffer] float* pLevelMatrix)</unmanaged>
        public void GetOutputMatrix(SlimDX2.XAudio2.Voice destinationVoiceRef, int sourceChannels, int destinationChannels, float[] levelMatrixRef) {
            unsafe {
                fixed (void* levelMatrixRef_ = &levelMatrixRef[0])
                    SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 17 * 4, (void*)((destinationVoiceRef == null)?IntPtr.Zero:destinationVoiceRef.NativePointer), sourceChannels, destinationChannels, levelMatrixRef_);
            }
        }
        
        /// <summary>	
        /// Destroys the voice. If necessary, stops the voice and removes it from the XAudio2 graph.	
        /// </summary>	
        /// <unmanaged>void IXAudio2Voice::DestroyVoice()</unmanaged>
        public void DestroyVoice() {
            unsafe {
                SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 18 * 4);
            }
        }
    }
    
    /// <summary>	
    /// A source voice is used to submit audio data into the XAudio2 processing pipeline. Voice data must be sent to a mastering voice to be heard, either directly or through intermediate submix voices.	
    /// </summary>	
    /// <unmanaged>IXAudio2SourceVoice</unmanaged>
    public partial class SourceVoice : SlimDX2.XAudio2.Voice {
        public SourceVoice(IntPtr basePtr) : base(basePtr) {
        }
        
        
        /// <summary>	
        /// Returns the voice's current cursor position data.	
        /// </summary>	
        /// <unmanaged>void IXAudio2SourceVoice::GetState([Out] XAUDIO2_VOICE_STATE* pVoiceState)</unmanaged>
        public SlimDX2.XAudio2.VoiceState State {
                get { SlimDX2.XAudio2.VoiceState __output__; GetState(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Returns the frequency adjustment ratio of the voice.	
        /// </summary>	
        /// <unmanaged>void IXAudio2SourceVoice::GetFrequencyRatio([Out] float* pRatio)</unmanaged>
        public float FrequencyRatio {
                get { float __output__; GetFrequencyRatio(out __output__); return __output__; }
        }
        
        /// <summary>	
        /// Reconfigures the voice to consume source data at a different sample rate than the rate specified when the voice was created.	
        /// </summary>	
        /// <unmanaged>HRESULT IXAudio2SourceVoice::SetSourceSampleRate([None] int NewSourceSampleRate)</unmanaged>
        public int SourceSampleRate {
                set { SetSourceSampleRate(value); }
        }
        
        /// <summary>	
        /// Starts consumption and processing of audio by the voice. Delivers the result to any connected submix or mastering voices, or to the output device.	
        /// </summary>	
        /// <param name="flags">[in]  Flags that control how the voice is started. Must be 0. </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2SourceVoice::Start([None] int Flags,[None] int OperationSet)</unmanaged>
        internal SlimDX2.Result Start(int flags, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 19 * 4, flags, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Stops consumption of audio by the current voice.	
        /// </summary>	
        /// <param name="flags">[in]  Flags that control how the voice is stopped. Can be 0 or the following: ValueDescriptionXAUDIO2_PLAY_TAILSContinue emitting effect output after the voice is stopped.? </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the  {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2SourceVoice::Stop([None] int Flags,[None] int OperationSet)</unmanaged>
        public SlimDX2.Result Stop(SlimDX2.XAudio2.PlayFlags flags, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 20 * 4, unchecked((int)flags), operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Adds a new audio buffer to the voice queue.	
        /// </summary>	
        /// <param name="bufferRef">[in]  Pointer to an <see cref="SlimDX2.XAudio2.AudioBuffer"/> structure to queue. </param>
        /// <param name="bufferWMARef">[in]  Pointer to an additional <see cref="SlimDX2.XAudio2.BufferWma"/> structure used when  submitting WMA data. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2SourceVoice::SubmitSourceBuffer([In] const XAUDIO2_BUFFER* pBuffer,[In, Optional] const XAUDIO2_BUFFER_WMA* pBufferWMA)</unmanaged>
        public SlimDX2.Result SubmitSourceBuffer(ref SlimDX2.XAudio2.AudioBuffer bufferRef, SlimDX2.XAudio2.BufferWma? bufferWMARef) {
            unsafe {
                SlimDX2.XAudio2.AudioBuffer.__Native bufferRef_ = new SlimDX2.XAudio2.AudioBuffer.__Native();
                bufferRef.__MarshalTo(ref bufferRef_);
                SlimDX2.XAudio2.BufferWma bufferWMARef_;
                if (bufferWMARef.HasValue)
                    bufferWMARef_ = bufferWMARef.Value;				
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 21 * 4, &bufferRef_, (bufferWMARef.HasValue)?&bufferWMARef_:(void*)IntPtr.Zero);
                bufferRef_.__MarshalFree();
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Removes all pending audio buffers from the voice queue.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2SourceVoice::FlushSourceBuffers()</unmanaged>
        public SlimDX2.Result FlushSourceBuffers() {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 22 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Notifies an XAudio2 voice that no more buffers are coming after the last one that is currently in its queue.	
        /// </summary>	
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2SourceVoice::Discontinuity()</unmanaged>
        public SlimDX2.Result Discontinuity() {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 23 * 4);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Stops looping the voice when it reaches the end of the current loop region.	
        /// </summary>	
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2SourceVoice::ExitLoop([None] int OperationSet)</unmanaged>
        public SlimDX2.Result ExitLoop(int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 24 * 4, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Returns the voice's current cursor position data.	
        /// </summary>	
        /// <param name="voiceStateRef"> Pointer to an <see cref="SlimDX2.XAudio2.VoiceState"/> structure containing the state of the voice. </param>
        /// <unmanaged>void IXAudio2SourceVoice::GetState([Out] XAUDIO2_VOICE_STATE* pVoiceState)</unmanaged>
        internal void GetState(out SlimDX2.XAudio2.VoiceState voiceStateRef) {
            unsafe {
                voiceStateRef = new SlimDX2.XAudio2.VoiceState();
                fixed (void* voiceStateRef_ = &voiceStateRef)
                    SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 25 * 4, voiceStateRef_);
            }
        }
        
        /// <summary>	
        /// Sets the frequency adjustment ratio of the voice.	
        /// </summary>	
        /// <param name="ratio">[in]  Frequency adjustment ratio. This value must be between XAUDIO2_MIN_FREQ_RATIO and the MaxFrequencyRatio parameter specified when the voice was created (see <see cref="SlimDX2.XAudio2.XAudio2.CreateSourceVoice_"/>). XAUDIO2_MIN_FREQ_RATIO currently is 0.0005, which allows pitch to be lowered by up to 11 octaves. </param>
        /// <param name="operationSet">[in]  Identifies this call as part of a deferred batch. See the {{XAudio2 Operation Sets}} overview for more information. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2SourceVoice::SetFrequencyRatio([None] float Ratio,[None] int OperationSet)</unmanaged>
        public SlimDX2.Result SetFrequencyRatio(float ratio, int operationSet) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 26 * 4, ratio, operationSet);
                __result__.CheckError();
                return __result__;
            }
        }
        
        /// <summary>	
        /// Returns the frequency adjustment ratio of the voice.	
        /// </summary>	
        /// <param name="ratioRef">[out]  Returns the current frequency adjustment ratio if successful. </param>
        /// <unmanaged>void IXAudio2SourceVoice::GetFrequencyRatio([Out] float* pRatio)</unmanaged>
        internal void GetFrequencyRatio(out float ratioRef) {
            unsafe {
                fixed (void* ratioRef_ = &ratioRef)
                    SlimDX2.XAudio2.LocalInterop.Callivoid(_nativePointer, 27 * 4, ratioRef_);
            }
        }
        
        /// <summary>	
        /// Reconfigures the voice to consume source data at a different sample rate than the rate specified when the voice was created.	
        /// </summary>	
        /// <param name="newSourceSampleRate">[in]  The new sample rate the voice should process submitted data at. Valid sample rates are 1kHz to 200kHz. </param>
        /// <returns>No documentation.</returns>
        /// <unmanaged>HRESULT IXAudio2SourceVoice::SetSourceSampleRate([None] int NewSourceSampleRate)</unmanaged>
        internal SlimDX2.Result SetSourceSampleRate(int newSourceSampleRate) {
            unsafe {
                SlimDX2.Result __result__;
                __result__= (SlimDX2.Result)SlimDX2.XAudio2.LocalInterop.Calliint(_nativePointer, 28 * 4, newSourceSampleRate);
                __result__.CheckError();
                return __result__;
            }
        }
    }
    
    /// <summary>	
    /// A submix voice is used primarily for performance improvements and effects processing. Data buffers cannot be submitted directly to submix voices and will not be audible unless submitted to a mastering voice. A submix voice can be used to ensure that a particular set of voice data is converted to the same format and/or to have a particular effect chain processed on the collective result.	
    /// </summary>	
    /// <unmanaged>IXAudio2SubmixVoice</unmanaged>
    public partial class SubmixVoice : SlimDX2.XAudio2.Voice {
        public SubmixVoice(IntPtr basePtr) : base(basePtr) {
        }
        
    }
    
    /// <summary>	
    /// A mastering voice is used to represent the audio output device. Data buffers cannot be submitted directly to mastering voices, but data submitted to other types of voices must be directed to a mastering voice to be heard.	
    /// </summary>	
    /// <unmanaged>IXAudio2MasteringVoice</unmanaged>
    public partial class MasteringVoice : SlimDX2.XAudio2.Voice {
        public MasteringVoice(IntPtr basePtr) : base(basePtr) {
        }
        
    }
    
    /// <summary>	
    /// The IXAudio2EngineCallback interface contains methods that notify the client when certain events happen in the <see cref="SlimDX2.XAudio2.XAudio2"/> engine. This interface should be implemented by the XAudio2 client. XAudio2 calls these methods via an interface pointer provided by the client, using either the {{XAudio2Create}} or <see cref="SlimDX2.XAudio2.XAudio2.Initialize"/> method. Methods in this interface return void, rather than an HRESULT.	
    /// </summary>	
    /// <unmanaged>IXAudio2EngineCallback</unmanaged>
    internal partial interface EngineCallback {
        
        
        /// <summary>	
        /// Called by XAudio2 just before an audio processing pass begins.	
        /// </summary>	
        /// <unmanaged>void IXAudio2EngineCallback::OnProcessingPassStart()</unmanaged>
        /* public void OnProcessingPassStart() */

        
        /// <summary>	
        /// Called by XAudio2 just after an audio processing pass ends.	
        /// </summary>	
        /// <unmanaged>void IXAudio2EngineCallback::OnProcessingPassEnd()</unmanaged>
        /* public void OnProcessingPassEnd() */

        
        /// <summary>	
        /// Called if a critical system error occurs that requires XAudio2 to be closed down and restarted.	
        /// </summary>	
        /// <param name="error"> Error code returned by XAudio2. </param>
        /// <unmanaged>void IXAudio2EngineCallback::OnCriticalError([None] HRESULT Error)</unmanaged>
        /* public void OnCriticalError(int error) */

    }
    
    /// <summary>	
    /// The IXAudio2VoiceCallback interface contains methods that notify the client when certain events happen in a given <see cref="SlimDX2.XAudio2.SourceVoice"/>. This interface should be implemented by the XAudio2 client. XAudio2 calls these methods through an interface pointer provided by the client in the <see cref="SlimDX2.XAudio2.XAudio2.CreateSourceVoice_"/> method. Methods in this interface return void, rather than an HRESULT.	
    /// </summary>	
    /// <unmanaged>IXAudio2VoiceCallback</unmanaged>
    public partial interface VoiceCallback {
        
        
        /// <summary>	
        /// Called during each processing pass for each voice, just before XAudio2 reads data from the voice's buffer queue.	
        /// </summary>	
        /// <param name="bytesRequired"> The number of bytes that must be submitted immediately to avoid starvation. This allows the implementation of just-in-time streaming scenarios; the client can keep the absolute minimum data queued on the voice at all times, and pass it fresh data just before the data is required. This model provides the lowest possible latency attainable with XAudio2. For xWMA and XMA data BytesRequired will always be zero, since the concept of a frame of xWMA or XMA data is meaningless. Note In a situation where there is always plenty of data available on the source voice, BytesRequired should always report zero, because it doesn't need any samples immediately to avoid glitching. </param>
        /// <unmanaged>void IXAudio2VoiceCallback::OnVoiceProcessingPassStart([None] int BytesRequired)</unmanaged>
        /* public void OnVoiceProcessingPassStart(int bytesRequired) */

        
        /// <summary>	
        /// Called just after the processing pass for the voice ends.	
        /// </summary>	
        /// <unmanaged>void IXAudio2VoiceCallback::OnVoiceProcessingPassEnd()</unmanaged>
        /* public void OnVoiceProcessingPassEnd() */

        
        /// <summary>	
        /// Called when the voice has just finished playing a contiguous audio stream.	
        /// </summary>	
        /// <unmanaged>void IXAudio2VoiceCallback::OnStreamEnd()</unmanaged>
        /* public void OnStreamEnd() */

        
        /// <summary>	
        /// Called when the voice is about to start processing a new audio buffer.	
        /// </summary>	
        /// <param name="bufferContextRef"> Context pointer that was assigned to the pContext member of the <see cref="SlimDX2.XAudio2.AudioBuffer"/> structure when the buffer was submitted. </param>
        /// <unmanaged>void IXAudio2VoiceCallback::OnBufferStart([None] void* pBufferContext)</unmanaged>
        /* public void OnBufferStart(IntPtr bufferContextRef) */

        
        /// <summary>	
        /// Called when the voice finishes processing a buffer.	
        /// </summary>	
        /// <param name="bufferContextRef"> Context pointer assigned to the pContext member of the <see cref="SlimDX2.XAudio2.AudioBuffer"/> structure when the buffer was submitted. </param>
        /// <unmanaged>void IXAudio2VoiceCallback::OnBufferEnd([None] void* pBufferContext)</unmanaged>
        /* public void OnBufferEnd(IntPtr bufferContextRef) */

        
        /// <summary>	
        /// Called when the voice reaches the end position of a loop.	
        /// </summary>	
        /// <param name="bufferContextRef"> Context pointer that was assigned to the pContext member of the <see cref="SlimDX2.XAudio2.AudioBuffer"/> structure when the buffer was submitted. </param>
        /// <unmanaged>void IXAudio2VoiceCallback::OnLoopEnd([None] void* pBufferContext)</unmanaged>
        /* public void OnLoopEnd(IntPtr bufferContextRef) */

        
        /// <summary>	
        /// Called when a critical error occurs during voice processing.	
        /// </summary>	
        /// <param name="bufferContextRef"> Context pointer that was assigned to the pContext member of the <see cref="SlimDX2.XAudio2.AudioBuffer"/> structure when the buffer was submitted. </param>
        /// <param name="error"> The HRESULT code of the error encountered. </param>
        /// <unmanaged>void IXAudio2VoiceCallback::OnVoiceError([None] void* pBufferContext,[None] HRESULT Error)</unmanaged>
        /* public void OnVoiceError(IntPtr bufferContextRef, int error) */

    }
}
