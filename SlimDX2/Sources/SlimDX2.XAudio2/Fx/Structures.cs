// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Structs for SlimDX2.XAudio2.Fx namespace.
//     This code was generated by a tool.
//     Date : 11/15/2010 14:52:48
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX2.XAudio2.Fx {

    
    /// <summary>	
    /// Describes parameters for use with the volume meter APO.	
    /// </summary>	
    /// <unmanaged>XAUDIO2FX_VOLUMEMETER_LEVELS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 1 )]
    public  partial struct VolumemeterLevels {	
        
        /// <summary>	
        ///  Array that will be filled with the maximum absolute level for each channel during a processing pass. The array must be at least ChannelCount ? sizeof(float) bytes. pPeakLevels may be NULL if pRMSLevels is not NULL. 	
        /// </summary>	
        /// <unmanaged>float* pPeakLevels</unmanaged>
        internal IntPtr PeakLevelPointer;
        
        /// <summary>	
        ///  Array that will be filled with root mean square level for each channel during a processing pass. The array must be at least ChannelCount ? sizeof(float) bytes. pRMSLevels may be NULL if pPeakLevels is not NULL. 	
        /// </summary>	
        /// <unmanaged>float* pRMSLevels</unmanaged>
        internal IntPtr RmsLevelsPointer;
        
        /// <summary>	
        ///  Number of channels being processed. 	
        /// </summary>	
        /// <unmanaged>int ChannelCount</unmanaged>
        public int ChannelCount;
    }
    
    /// <summary>	
    /// Describes parameters for use in the reverb APO. 	
    /// </summary>	
    /// <unmanaged>XAUDIO2FX_REVERB_PARAMETERS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 1 )]
    public  partial struct ReverbParameters {	
        
        /// <summary>	
        ///  Percentage of the output that will be reverb. Allowable values are from 0 to 100. 	
        /// </summary>	
        /// <unmanaged>float WetDryMix</unmanaged>
        public float WetDryMix;
        
        /// <summary>	
        ///  The delay time of the first reflection relative to the direct path. Permitted range is from 0 to 300 milliseconds. 	
        /// </summary>	
        /// <unmanaged>int ReflectionsDelay</unmanaged>
        public int ReflectionsDelay;
        
        /// <summary>	
        ///  Delay of reverb relative to the first reflection. Permitted range is from 0 to 85 milliseconds. 	
        /// </summary>	
        /// <unmanaged>byte ReverbDelay</unmanaged>
        public byte ReverbDelay;
        
        /// <summary>	
        ///  Delay for the left rear output and right rear output. Permitted range is from 0 to 5 milliseconds. 	
        /// </summary>	
        /// <unmanaged>byte RearDelay</unmanaged>
        public byte RearDelay;
        
        /// <summary>	
        ///  Position of the left input within the simulated space relative to the listener. With PositionLeft set to the minimum value, the left input is placed close to the listener. In this position, early reflections are dominant and the reverb decay is set back in the sound field and reduced in amplitude. With PositionLeft set to the maximum value, the left input is placed at a maximum distance from the listener within the simulated room. PositionLeft does not affect the reverb decay time (liveness of the room), only the apparent position of the source relative to the listener. Permitted range is from 0 to 30 (no units). 	
        /// </summary>	
        /// <unmanaged>byte PositionLeft</unmanaged>
        public byte PositionLeft;
        
        /// <summary>	
        ///  Same as PositionLeft, but affecting only the right input. Permitted range is from 0 to 30 (no units). Note PositionRight is ignored in mono-in/mono-out mode. 	
        /// </summary>	
        /// <unmanaged>byte PositionRight</unmanaged>
        public byte PositionRight;
        
        /// <summary>	
        ///  Gives a greater or lesser impression of distance from the source to the listener. Permitted range is from 0 to 30 (no units). 	
        /// </summary>	
        /// <unmanaged>byte PositionMatrixLeft</unmanaged>
        public byte PositionMatrixLeft;
        
        /// <summary>	
        ///  Gives a greater or lesser impression of distance from the source to the listener. Permitted range is from 0 to 30 (no units). Note PositionMatrixRight is ignored in mono-in/mono-out mode. 	
        /// </summary>	
        /// <unmanaged>byte PositionMatrixRight</unmanaged>
        public byte PositionMatrixRight;
        
        /// <summary>	
        ///  Controls the character of the individual wall reflections. Set to minimum value to simulate a hard flat surface and to maximum value to simulate a diffuse surface. Permitted range is from 0 to 15 (no units). 	
        /// </summary>	
        /// <unmanaged>byte EarlyDiffusion</unmanaged>
        public byte EarlyDiffusion;
        
        /// <summary>	
        ///  Controls the character of the individual wall reverberations. Set to minimum value to simulate a hard flat surface and to maximum value to simulate a diffuse surface. Permitted range is from 0 to 15 (no units). 	
        /// </summary>	
        /// <unmanaged>byte LateDiffusion</unmanaged>
        public byte LateDiffusion;
        
        /// <summary>	
        ///  Adjusts the decay time of low frequencies relative to the decay time at 1 kHz. The values correspond to dB of gain as follows:  Value0123456789101112 Gain (dB)-8-7-6-5-4-3-2-10+1+2+3+4  Note that a LowEQGain value of 8 results in the decay time of low frequencies being equal to the decay time at 1 kHz. Permitted range is from 0 to 12 (no units). 	
        /// </summary>	
        /// <unmanaged>byte LowEQGain</unmanaged>
        public byte LowEQGain;
        
        /// <summary>	
        ///  Sets the corner frequency of the low pass filter that is controlled by the LowEQGain parameter. The values correspond to frequency in Hz as follows:  Value0123456789 Frequency (Hz)50100150200250300350400450500  Permitted range is from 0 to 9 (no units). 	
        /// </summary>	
        /// <unmanaged>byte LowEQCutoff</unmanaged>
        public byte LowEQCutoff;
        
        /// <summary>	
        ///  Adjusts the decay time of high frequencies relative to the decay time at 1 kHz. When set to zero, high frequencies decay at the same rate as 1 kHz. When set to maximum value, high frequencies decay at a much faster rate than 1 kHz.  Value012345678 Gain (dB)-8-7-6-5-4-3-2-10  Permitted range is from 0 to 8 (no units). 	
        /// </summary>	
        /// <unmanaged>byte HighEQGain</unmanaged>
        public byte HighEQGain;
        
        /// <summary>	
        ///  Sets the corner frequency of the high pass filter that is controlled by the HighEQGain parameter. The values correspond to frequency in kHz as follows:  Value01234567891011121314 Frequency (kHz)11.522.533.544.555.566.577.58  Permitted range is from 0 to 14 (no units). 	
        /// </summary>	
        /// <unmanaged>byte HighEQCutoff</unmanaged>
        public byte HighEQCutoff;
        
        /// <summary>	
        ///  Sets the corner frequency of the low pass filter for the room effect. Permitted range is from 20 to 20,000 Hz. 	
        /// </summary>	
        /// <unmanaged>float RoomFilterFreq</unmanaged>
        public float RoomFilterFreq;
        
        /// <summary>	
        ///  Sets the pass band intensity level of the low-pass filter for both the early reflections and the late field reverberation. Permitted range is from -100 to 0 dB. 	
        /// </summary>	
        /// <unmanaged>float RoomFilterMain</unmanaged>
        public float RoomFilterMain;
        
        /// <summary>	
        ///  Sets the intensity of the low-pass filter for both the early reflections and the late field reverberation at the corner frequency (RoomFilterFreq). Permitted range is from -100 to 0 dB. 	
        /// </summary>	
        /// <unmanaged>float RoomFilterHF</unmanaged>
        public float RoomFilterHF;
        
        /// <summary>	
        ///  Adjusts the intensity of the early reflections. Permitted range is from -100 to 20 dB. 	
        /// </summary>	
        /// <unmanaged>float ReflectionsGain</unmanaged>
        public float ReflectionsGain;
        
        /// <summary>	
        ///  Adjusts the intensity of the reverberations. Permitted range is from -100 to 20 dB. 	
        /// </summary>	
        /// <unmanaged>float ReverbGain</unmanaged>
        public float ReverbGain;
        
        /// <summary>	
        ///  Reverberation decay time at 1 kHz. This is the time that a full scale input signal decays by 60 dB. Permitted range is from 0.1 to infinity seconds. 	
        /// </summary>	
        /// <unmanaged>float DecayTime</unmanaged>
        public float DecayTime;
        
        /// <summary>	
        ///  Controls the modal density in the late field reverberation. For colorless spaces, Density should be set to the maximum value (100). As Density is decreased, the sound becomes hollow (comb filtered); this is an effect that can be useful if you are trying to model a silo. Permitted range as a percentage is from 0 to 100. 	
        /// </summary>	
        /// <unmanaged>float Density</unmanaged>
        public float Density;
        
        /// <summary>	
        ///  The apparent size of the acoustic space. Permitted range is from 1 to 100 feet. 	
        /// </summary>	
        /// <unmanaged>float RoomSize</unmanaged>
        public float RoomSize;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>XAUDIO2FX_REVERB_I3DL2_PARAMETERS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 1 )]
    public  partial struct ReverbI3DL2Parameters {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float WetDryMix</unmanaged>
        public float WetDryMix;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int Room</unmanaged>
        public int Room;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int RoomHF</unmanaged>
        public int RoomHF;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float RoomRolloffFactor</unmanaged>
        public float RoomRolloffFactor;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float DecayTime</unmanaged>
        public float DecayTime;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float DecayHFRatio</unmanaged>
        public float DecayHFRatio;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int Reflections</unmanaged>
        public int Reflections;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float ReflectionsDelay</unmanaged>
        public float ReflectionsDelay;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>int Reverb</unmanaged>
        public int Reverb;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float ReverbDelay</unmanaged>
        public float ReverbDelay;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Diffusion</unmanaged>
        public float Diffusion;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float Density</unmanaged>
        public float Density;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>float HFReference</unmanaged>
        public float HFReference;
    }
}
