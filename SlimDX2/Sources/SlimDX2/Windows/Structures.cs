// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Structs for SlimDX2.Windows namespace.
//     This code was generated by a tool.
//     Date : 11/15/2010 14:52:48
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX2.Windows {

    
    /// <summary>	
    /// [This documentation is for preview only, and is subject to change in later releases. Blank topics are included as placeholders.]	
    /// </summary>	
    /// <unmanaged>Win32</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    internal  partial struct Win32 {	
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>TEXTMETRICW</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Textmetricw {	
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmHeight</unmanaged>
            public int TmHeight;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmAscent</unmanaged>
            public int TmAscent;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmDescent</unmanaged>
            public int TmDescent;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmInternalLeading</unmanaged>
            public int TmInternalLeading;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmExternalLeading</unmanaged>
            public int TmExternalLeading;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmAveCharWidth</unmanaged>
            public int TmAveCharWidth;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmMaxCharWidth</unmanaged>
            public int TmMaxCharWidth;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmWeight</unmanaged>
            public int TmWeight;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmOverhang</unmanaged>
            public int TmOverhang;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmDigitizedAspectX</unmanaged>
            public int TmDigitizedAspectX;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int tmDigitizedAspectY</unmanaged>
            public int TmDigitizedAspectY;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>wchar_t tmFirstChar</unmanaged>
            public char TmFirstChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>wchar_t tmLastChar</unmanaged>
            public char TmLastChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>wchar_t tmDefaultChar</unmanaged>
            public char TmDefaultChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>wchar_t tmBreakChar</unmanaged>
            public char TmBreakChar;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmItalic</unmanaged>
            public byte TmItalic;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmUnderlined</unmanaged>
            public byte TmUnderlined;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmStruckOut</unmanaged>
            public byte TmStruckOut;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmPitchAndFamily</unmanaged>
            public byte TmPitchAndFamily;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte tmCharSet</unmanaged>
            public byte TmCharSet;
        }
        
        /// <summary>	
        /// </summary>	
        /// <unmanaged>TEXTMETRICA</unmanaged>
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        public  partial struct Textmetrica {	
            
            /// <summary>	
            /// The height (ascent + descent) of characters.	
            /// </summary>	
            /// <unmanaged>int tmHeight</unmanaged>
            public int TmHeight;
            
            /// <summary>	
            /// The ascent (units above the base line) of characters.	
            /// </summary>	
            /// <unmanaged>int tmAscent</unmanaged>
            public int TmAscent;
            
            /// <summary>	
            /// The descent (units below the base line) of characters.	
            /// </summary>	
            /// <unmanaged>int tmDescent</unmanaged>
            public int TmDescent;
            
            /// <summary>	
            /// The amount of leading (space) inside the bounds set by the tmHeight member. Accent marks and other diacritical characters may occur in this area. The designer may set this member to zero.	
            /// </summary>	
            /// <unmanaged>int tmInternalLeading</unmanaged>
            public int TmInternalLeading;
            
            /// <summary>	
            /// The amount of extra leading (space) that the application adds between rows. Since this area is outside the font, it contains no marks and is not altered by text output calls in either OPAQUE or TRANSPARENT mode. The designer may set this member to zero.	
            /// </summary>	
            /// <unmanaged>int tmExternalLeading</unmanaged>
            public int TmExternalLeading;
            
            /// <summary>	
            /// The average width of characters in the font (generally defined as the width of the letter x ). This value does not include the overhang required for bold or italic characters.	
            /// </summary>	
            /// <unmanaged>int tmAveCharWidth</unmanaged>
            public int TmAveCharWidth;
            
            /// <summary>	
            /// The width of the widest character in the font.	
            /// </summary>	
            /// <unmanaged>int tmMaxCharWidth</unmanaged>
            public int TmMaxCharWidth;
            
            /// <summary>	
            /// The weight of the font.	
            /// </summary>	
            /// <unmanaged>int tmWeight</unmanaged>
            public int TmWeight;
            
            /// <summary>	
            /// The extra width per string that may be added to some synthesized fonts. When synthesizing some attributes, such as bold or italic, graphics device interface (GDI) or a device may have to add width to a string on both a per-character and per-string basis. For example, GDI makes a string bold by expanding the spacing of each character and overstriking by an offset value; it italicizes a font by shearing the string. In either case, there is an overhang past the basic string. For bold strings, the overhang is the distance by which the overstrike is offset. For italic strings, the overhang is the amount the top of the font is sheared past the bottom of the font.The tmOverhang member enables the application to determine how much of the character width returned by a {{GetTextExtentPoint32}} function call on a single character is the actual character width and how much is the per-string extra width. The actual width is the extent minus the overhang.	
            /// </summary>	
            /// <unmanaged>int tmOverhang</unmanaged>
            public int TmOverhang;
            
            /// <summary>	
            /// The horizontal aspect of the device for which the font was designed.	
            /// </summary>	
            /// <unmanaged>int tmDigitizedAspectX</unmanaged>
            public int TmDigitizedAspectX;
            
            /// <summary>	
            /// The vertical aspect of the device for which the font was designed. The ratio of the tmDigitizedAspectX and tmDigitizedAspectY members is the aspect ratio of the device for which the font was designed.	
            /// </summary>	
            /// <unmanaged>int tmDigitizedAspectY</unmanaged>
            public int TmDigitizedAspectY;
            
            /// <summary>	
            /// The value of the first character defined in the font.	
            /// </summary>	
            /// <unmanaged>char tmFirstChar</unmanaged>
            public byte TmFirstChar;
            
            /// <summary>	
            /// The value of the last character defined in the font.	
            /// </summary>	
            /// <unmanaged>char tmLastChar</unmanaged>
            public byte TmLastChar;
            
            /// <summary>	
            /// The value of the character to be substituted for characters not in the font.	
            /// </summary>	
            /// <unmanaged>char tmDefaultChar</unmanaged>
            public byte TmDefaultChar;
            
            /// <summary>	
            /// The value of the character that will be used to define word breaks for text justification.	
            /// </summary>	
            /// <unmanaged>char tmBreakChar</unmanaged>
            public byte TmBreakChar;
            
            /// <summary>	
            /// Specifies an italic font if it is nonzero.	
            /// </summary>	
            /// <unmanaged>byte tmItalic</unmanaged>
            public byte TmItalic;
            
            /// <summary>	
            /// Specifies an underlined font if it is nonzero.	
            /// </summary>	
            /// <unmanaged>byte tmUnderlined</unmanaged>
            public byte TmUnderlined;
            
            /// <summary>	
            /// A strikeout font if it is nonzero.	
            /// </summary>	
            /// <unmanaged>byte tmStruckOut</unmanaged>
            public byte TmStruckOut;
            
            /// <summary>	
            /// Specifies information about the pitch, the technology, and the family of a physical font.The four low-order bits of this member specify information about the pitch and the technology of the font. A constant is defined for each of the four bits.ConstantMeaningTMPF_FIXED_PITCHIf this bit is set the font is a variable pitch font. If this bit is clear the font is a fixed pitch font. Note very carefully that those meanings are the opposite of what the constant name implies.TMPF_VECTORIf this bit is set the font is a vector font.TMPF_TRUETYPEIf this bit is set the font is a TrueType font.TMPF_DEVICEIf this bit is set the font is a device font.?An application should carefully test for qualities encoded in these low-order bits, making no arbitrary assumptions. For example, besides having their own bits set, TrueType and PostScript fonts set the TMPF_VECTOR bit. A monospace bitmap font has all of these low-order bits clear; a proportional bitmap font sets the TMPF_FIXED_PITCH bit. A Postscript printer device font sets the TMPF_DEVICE, TMPF_VECTOR, and TMPF_FIXED_PITCH bits.The four high-order bits of tmPitchAndFamily designate the font's font family. An application can use the value 0xF0 and the bitwise AND operator to mask out the four low-order bits of tmPitchAndFamily, thus obtaining a value that can be directly compared with font family names to find an identical match. For information about font families, see the description of the {{LOGFONT}} structure.	
            /// </summary>	
            /// <unmanaged>byte tmPitchAndFamily</unmanaged>
            public byte TmPitchAndFamily;
            
            /// <summary>	
            /// The character set of the font. The character set can be one of the following values.ANSI_CHARSETBALTIC_CHARSETCHINESEBIG5_CHARSETDEFAULT_CHARSETEASTEUROPE_CHARSETGB2312_CHARSETGREEK_CHARSETHANGUL_CHARSETMAC_CHARSETOEM_CHARSETRUSSIAN_CHARSETSHIFTJIS_CHARSETSYMBOL_CHARSETTURKISH_CHARSETVIETNAMESE_CHARSETKorean language edition of Windows:JOHAB_CHARSETMiddle East language edition of Windows:ARABIC_CHARSETHEBREW_CHARSETThai language edition of Windows:THAI_CHARSET	
            /// </summary>	
            /// <unmanaged>byte tmCharSet</unmanaged>
            public byte TmCharSet;
        }
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>LOGFONTW</unmanaged>
        public  partial struct Logfontw {	
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int lfHeight</unmanaged>
            public int LfHeight;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int lfWidth</unmanaged>
            public int LfWidth;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int lfEscapement</unmanaged>
            public int LfEscapement;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int lfOrientation</unmanaged>
            public int LfOrientation;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>int lfWeight</unmanaged>
            public int LfWeight;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfItalic</unmanaged>
            public byte LfItalic;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfUnderline</unmanaged>
            public byte LfUnderline;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfStrikeOut</unmanaged>
            public byte LfStrikeOut;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfCharSet</unmanaged>
            public byte LfCharSet;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfOutPrecision</unmanaged>
            public byte LfOutPrecision;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfClipPrecision</unmanaged>
            public byte LfClipPrecision;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfQuality</unmanaged>
            public byte LfQuality;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>byte lfPitchAndFamily</unmanaged>
            public byte LfPitchAndFamily;
            
            /// <summary>	
            /// No documentation.	
            /// </summary>	
            /// <unmanaged>wchar_t lfFaceName[32]</unmanaged>
            public string LfFaceName;
    
            // Internal native struct used for marshalling
            [StructLayout(LayoutKind.Sequential, Pack = 0 )]
            internal unsafe partial struct __Native {	
                public int LfHeight;
                public int LfWidth;
                public int LfEscapement;
                public int LfOrientation;
                public int LfWeight;
                public byte LfItalic;
                public byte LfUnderline;
                public byte LfStrikeOut;
                public byte LfCharSet;
                public byte LfOutPrecision;
                public byte LfClipPrecision;
                public byte LfQuality;
                public byte LfPitchAndFamily;
                public fixed char LfFaceName[32];
    		    // Method to free native struct
                internal unsafe void __MarshalFree()
                {
                }
            }
    		// Method to marshal from native to managed struct
            internal unsafe void __MarshalFrom(ref __Native @ref)
            {            
                this.LfHeight = @ref.LfHeight;
                this.LfWidth = @ref.LfWidth;
                this.LfEscapement = @ref.LfEscapement;
                this.LfOrientation = @ref.LfOrientation;
                this.LfWeight = @ref.LfWeight;
                this.LfItalic = @ref.LfItalic;
                this.LfUnderline = @ref.LfUnderline;
                this.LfStrikeOut = @ref.LfStrikeOut;
                this.LfCharSet = @ref.LfCharSet;
                this.LfOutPrecision = @ref.LfOutPrecision;
                this.LfClipPrecision = @ref.LfClipPrecision;
                this.LfQuality = @ref.LfQuality;
                this.LfPitchAndFamily = @ref.LfPitchAndFamily;
                fixed (char* __ptr = @ref.LfFaceName) this.LfFaceName = new string(__ptr, 0, 32);
            }
            // Method to marshal from managed struct tot native
            internal unsafe void __MarshalTo(ref __Native @ref)
            {
                @ref.LfHeight = this.LfHeight;
                @ref.LfWidth = this.LfWidth;
                @ref.LfEscapement = this.LfEscapement;
                @ref.LfOrientation = this.LfOrientation;
                @ref.LfWeight = this.LfWeight;
                @ref.LfItalic = this.LfItalic;
                @ref.LfUnderline = this.LfUnderline;
                @ref.LfStrikeOut = this.LfStrikeOut;
                @ref.LfCharSet = this.LfCharSet;
                @ref.LfOutPrecision = this.LfOutPrecision;
                @ref.LfClipPrecision = this.LfClipPrecision;
                @ref.LfQuality = this.LfQuality;
                @ref.LfPitchAndFamily = this.LfPitchAndFamily;
                fixed (char* __psrc = this.LfFaceName) fixed (char* __ptr = @ref.LfFaceName) Utilities.CopyMemory((IntPtr)__ptr, (IntPtr)__psrc, LfFaceName.Length * 2);
    		
    		}
        }
    }
    
    /// <summary>	
    ///  	
    /// </summary>	
    /// <unmanaged>RGNDATAHEADER</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct Rgndataheader {	
        
        /// <summary>	
        ///  The size, in bytes, of the header. 	
        /// </summary>	
        /// <unmanaged>int dwSize</unmanaged>
        public int DwSize;
        
        /// <summary>	
        ///  The type of region. This value must be RDH_RECTANGLES. 	
        /// </summary>	
        /// <unmanaged>int iType</unmanaged>
        public int IType;
        
        /// <summary>	
        ///  The number of rectangles that make up the region. 	
        /// </summary>	
        /// <unmanaged>int nCount</unmanaged>
        public int NCount;
        
        /// <summary>	
        ///  The size of the {{RGNDATA}} buffer required to receive the <see cref="SlimDX2.Rectangle"/> structures that make up the region. If the size is not known, this member can be zero. 	
        /// </summary>	
        /// <unmanaged>int nRgnSize</unmanaged>
        public int NRgnSize;
        
        /// <summary>	
        ///  A bounding rectangle for the region in logical units. 	
        /// </summary>	
        /// <unmanaged>RECT rcBound</unmanaged>
        public SlimDX2.Rectangle RcBound;
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>PALETTEENTRY</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct Paletteentry {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>byte peRed</unmanaged>
        public byte PeRed;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>byte peGreen</unmanaged>
        public byte PeGreen;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>byte peBlue</unmanaged>
        public byte PeBlue;
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>byte peFlags</unmanaged>
        public byte PeFlags;
    }
}
