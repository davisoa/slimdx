// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Enums for SlimDX2.DXGI namespace.
//     This code was generated by a tool.
//     Date : 11/15/2010 14:52:48
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace SlimDX2.DXGI {

    
    /// <summary>	
    /// Flags indicating the memory location of a resource.	
    /// </summary>	
    /// <unmanaged>DXGI_RESIDENCY</unmanaged>
    public enum Residency : int {	
        
        /// <summary>	
        /// The resource is located in video memory.	
        /// </summary>	
        /// <unmanaged>DXGI_RESIDENCY_FULLY_RESIDENT</unmanaged>
        FullyResident = unchecked((int)1),			
        
        /// <summary>	
        /// At least some of the resource is located in CPU memory.	
        /// </summary>	
        /// <unmanaged>DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged>
        ResidentInSharedMemory = unchecked((int)2),			
        
        /// <summary>	
        /// At least some of the resource has been paged out to the hard drive.	
        /// </summary>	
        /// <unmanaged>DXGI_RESIDENCY_EVICTED_TO_DISK</unmanaged>
        EvictedToDisk = unchecked((int)3),			
    }
    
    /// <summary>	
    /// Options for handling pixels in a display surface after calling <see cref="SlimDX2.DXGI.SwapChain.Present"/>.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is used by the <see cref="SlimDX2.DXGI.SwapChainDescription"/> structure.	
    /// </remarks>	
    /// <unmanaged>DXGI_SWAP_EFFECT</unmanaged>
    public enum SwapEffect : int {	
        
        /// <summary>	
        /// Use this flag to indicate that the contents of the back buffer are discarded after calling IDXGISwapChain::Present.  This flag is valid for a swap chain with more than one back buffer, although, an application only has read and write access to buffer 0.  Use this flag to enable the display driver to select the most efficient presentation technique for the swap chain.	
        /// </summary>	
        /// <unmanaged>DXGI_SWAP_EFFECT_DISCARD</unmanaged>
        Discard = unchecked((int)0),			
        
        /// <summary>	
        /// Use this flag to indicate that the contents of the back buffer are not discarded after calling IDXGISwapChain::Present.  Use this option to present the contents of the swap chain in order, from the first buffer (buffer 0) to the last buffer.  This flag cannot be used with multisampling.	
        /// </summary>	
        /// <unmanaged>DXGI_SWAP_EFFECT_SEQUENTIAL</unmanaged>
        Sequential = unchecked((int)1),			
    }
    
    /// <summary>	
    /// Options for swap-chain behavior.	
    /// </summary>	
    /// <remarks>	
    /// This enumeration is used by the <see cref="SlimDX2.DXGI.SwapChainDescription"/> structure.	
    /// </remarks>	
    /// <unmanaged>DXGI_SWAP_CHAIN_FLAG</unmanaged>
    [Flags]
    public enum SwapChainFlags : int {	
        
        /// <summary>	
        /// Turn off automatic image rotation; that is, do not perform a rotation when transfering the contents of the front buffer to the monitor.  Use this flag to avoid a bandwidth penalty when an application expects to handle rotation. This option is only valid during full-screen mode. 	
        /// </summary>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_NONPREROTATED</unmanaged>
        Nonprerotated = unchecked((int)1),			
        
        /// <summary>	
        /// Set this flag to enable an application to switch modes by calling <see cref="SlimDX2.DXGI.SwapChain.ResizeTarget"/>.  When switching from windowed to full-screen mode, the display mode (or monitor resolution) will be changed to match the dimensions of the application window.	
        /// </summary>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH</unmanaged>
        AllowModeSwitch = unchecked((int)2),			
        
        /// <summary>	
        /// Set this flag to enable an application to render using GDI on a swap chain or a surface.  This will allow the application to call GetDC on the 0th back buffer or a surface.	
        /// </summary>	
        /// <unmanaged>DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE</unmanaged>
        GdiCompatible = unchecked((int)4),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Identifies the type of DXGI adapter.	
    /// </summary>	
    /// <remarks>	
    /// The DXGI_ADAPTER_FLAG enumerated type is used by the Flags member of the <see cref="SlimDX2.DXGI.AdapterDescription1"/> structure to  identify the type of DXGI adapter.	
    /// </remarks>	
    /// <unmanaged>DXGI_ADAPTER_FLAG</unmanaged>
    [Flags]
    public enum AdapterFlags : int {	
        
        /// <summary>	
        /// Specifies no flags.	
        /// </summary>	
        /// <unmanaged>DXGI_ADAPTER_FLAG_NONE</unmanaged>
        None = unchecked((int)0),			
        
        /// <summary>	
        /// Value always set to 0. This flag is reserved.	
        /// </summary>	
        /// <unmanaged>DXGI_ADAPTER_FLAG_REMOTE</unmanaged>
        Remote = unchecked((int)1),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DXGI_PRESENT_FLAGS</unmanaged>
    [Flags]
    public enum PresentFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_PRESENT_TEST</unmanaged>
        Test = unchecked((int)0x00000001U),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_PRESENT_DO_NOT_SEQUENCE</unmanaged>
        DoNotSequence = unchecked((int)0x00000002U),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_PRESENT_RESTART</unmanaged>
        Restart = unchecked((int)0x00000004U),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DXGI_RESOURCE_PRIORITY</unmanaged>
    public enum ResourcePriority : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_RESOURCE_PRIORITY_MINIMUM</unmanaged>
        Minimum = unchecked((int)( 0x28000000 )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_RESOURCE_PRIORITY_LOW</unmanaged>
        Low = unchecked((int)( 0x50000000 )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_RESOURCE_PRIORITY_NORMAL</unmanaged>
        Normal = unchecked((int)( 0x78000000 )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_RESOURCE_PRIORITY_HIGH</unmanaged>
        High = unchecked((int)( 0xa0000000 )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_RESOURCE_PRIORITY_MAXIMUM</unmanaged>
        Maximum = unchecked((int)( 0xc8000000 )),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DXGI_MAP_FLAGS</unmanaged>
    [Flags]
    public enum MapFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_MAP_READ</unmanaged>
        Read = unchecked((int)( 1U )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_MAP_WRITE</unmanaged>
        Write = unchecked((int)( 2U )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_MAP_DISCARD</unmanaged>
        Discard = unchecked((int)( 4U )),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DXGI_ENUM_MODES_FLAGS</unmanaged>
    [Flags]
    public enum DisplayModeEnumerationFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ENUM_MODES_INTERLACED</unmanaged>
        Interlaced = unchecked((int)( 1U )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ENUM_MODES_SCALING</unmanaged>
        Scaling = unchecked((int)( 2U )),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DXGI_MWA_FLAGS</unmanaged>
    [Flags]
    public enum WindowAssociationFlags : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_MWA_NO_WINDOW_CHANGES</unmanaged>
        IgnoreAll = unchecked((int)( 1 << 0 )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_MWA_NO_ALT_ENTER</unmanaged>
        IgnoreAltEnter = unchecked((int)( 1 << 1 )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_MWA_NO_PRINT_SCREEN</unmanaged>
        IgnorePrintScreen = unchecked((int)( 1 << 2 )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_MWA_VALID</unmanaged>
        Valid = unchecked((int)( 0x7 )),			
        
        /// <summary>	
        /// None.	
        /// </summary>	
        /// <unmanaged>None</unmanaged>
        None = unchecked((int)0),			
    }
    
    /// <summary>	
    /// Flags indicating the method the raster uses to create an image on a surface.	
    /// </summary>	
    /// <unmanaged>DXGI_MODE_SCANLINE_ORDER</unmanaged>
    public enum DisplayModeScanlineOrder : int {	
        
        /// <summary>	
        /// Scanline order is unspecified.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED</unmanaged>
        Unspecified = unchecked((int)0),			
        
        /// <summary>	
        /// The image is created from the first scanline to the last without skipping any.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE</unmanaged>
        Progressive = unchecked((int)1),			
        
        /// <summary>	
        /// The image is created beginning with the upper field.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST</unmanaged>
        UpperFieldFirst = unchecked((int)2),			
        
        /// <summary>	
        /// The image is created beginning with the lower field.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST</unmanaged>
        LowerFieldFirst = unchecked((int)3),			
    }
    
    /// <summary>	
    /// Flags indicating how an image is stretched to fit a given monitor's resolution.	
    /// </summary>	
    /// <unmanaged>DXGI_MODE_SCALING</unmanaged>
    public enum DisplayModeScaling : int {	
        
        /// <summary>	
        /// Unspecified scaling.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_SCALING_UNSPECIFIED</unmanaged>
        Unspecified = unchecked((int)0),			
        
        /// <summary>	
        /// Specifies no scaling. The image is centered on the display. This flag is typically used for a fixed-dot-pitch display (such as an LED display).	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_SCALING_CENTERED</unmanaged>
        Centered = unchecked((int)1),			
        
        /// <summary>	
        /// Specifies stretched scaling.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_SCALING_STRETCHED</unmanaged>
        Stretched = unchecked((int)2),			
    }
    
    /// <summary>	
    /// Flags that indicate how the back buffers should be rotated to fit the physical rotation of a monitor.	
    /// </summary>	
    /// <unmanaged>DXGI_MODE_ROTATION</unmanaged>
    public enum DisplayModeRotation : int {	
        
        /// <summary>	
        /// Unspecified rotation.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_ROTATION_UNSPECIFIED</unmanaged>
        Unspecified = unchecked((int)0),			
        
        /// <summary>	
        /// Specifies no rotation.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_ROTATION_IDENTITY</unmanaged>
        Identity = unchecked((int)1),			
        
        /// <summary>	
        /// Specifies 90 degrees of rotation.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_ROTATION_ROTATE90</unmanaged>
        Rotate90 = unchecked((int)2),			
        
        /// <summary>	
        /// Specifies 180 degrees of rotation.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_ROTATION_ROTATE180</unmanaged>
        Rotate180 = unchecked((int)3),			
        
        /// <summary>	
        /// Specifies 270 degrees of rotation.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_ROTATION_ROTATE270</unmanaged>
        Rotate270 = unchecked((int)4),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DXGI_USAGE</unmanaged>
    public enum Usage : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_USAGE_SHADER_INPUT</unmanaged>
        ShaderInput = unchecked((int)( 1 << (0 + 4) )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_USAGE_RENDER_TARGET_OUTPUT</unmanaged>
        RenderTargetOutput = unchecked((int)( 1 << (1 + 4) )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_USAGE_BACK_BUFFER</unmanaged>
        BackBuffer = unchecked((int)( 1 << (2 + 4) )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_USAGE_SHARED</unmanaged>
        Shared = unchecked((int)( 1 << (3 + 4) )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_USAGE_READ_ONLY</unmanaged>
        ReadOnly = unchecked((int)( 1 << (4 + 4) )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_USAGE_DISCARD_ON_PRESENT</unmanaged>
        DiscardOnPresent = unchecked((int)( 1 << (5 + 4) )),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_USAGE_UNORDERED_ACCESS</unmanaged>
        UnorderedAccess = unchecked((int)( 1 << (6 + 4) )),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DXGI_ERROR</unmanaged>
    public enum DXGIError : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_INVALID_CALL</unmanaged>
        InvalidCall = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (1))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_NOT_FOUND</unmanaged>
        NotFound = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (2))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_MORE_DATA</unmanaged>
        MoreData = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (3))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_UNSUPPORTED</unmanaged>
        Unsupported = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (4))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_DEVICE_REMOVED</unmanaged>
        DeviceRemoved = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (5))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_DEVICE_HUNG</unmanaged>
        DeviceHung = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (6))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_DEVICE_RESET</unmanaged>
        DeviceReset = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (7))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_WAS_STILL_DRAWING</unmanaged>
        WasStillDrawing = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (10))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_FRAME_STATISTICS_DISJOINT</unmanaged>
        FrameStatisticsDisjoint = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (11))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged>
        GraphicsVidpnSourceInUse = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (12))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_DRIVER_INTERNAL_ERROR</unmanaged>
        DriverInternalError = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (32))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_NONEXCLUSIVE</unmanaged>
        Nonexclusive = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (33))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</unmanaged>
        NotCurrentlyAvailable = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (34))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED</unmanaged>
        RemoteClientDisconnected = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (35))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_ERROR_REMOTE_OUTOFMEMORY</unmanaged>
        RemoteOutofmemory = unchecked((int)(((1)<<31) | ((0x87a)<<16) | (36))),			
    }
    
    /// <summary>	
    /// No documentation.	
    /// </summary>	
    /// <unmanaged>DXGI_STATUS</unmanaged>
    public enum DXGIStatus : int {	
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_STATUS_OCCLUDED</unmanaged>
        Occluded = unchecked((int)(((0)<<31) | ((0x87a)<<16) | (1))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_STATUS_CLIPPED</unmanaged>
        Clipped = unchecked((int)(((0)<<31) | ((0x87a)<<16) | (2))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_STATUS_NO_REDIRECTION</unmanaged>
        NoRedirection = unchecked((int)(((0)<<31) | ((0x87a)<<16) | (4))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_STATUS_NO_DESKTOP_ACCESS</unmanaged>
        NoDesktopAccess = unchecked((int)(((0)<<31) | ((0x87a)<<16) | (5))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged>
        GraphicsVidpnSourceInUse = unchecked((int)(((0)<<31) | ((0x87a)<<16) | (6))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_STATUS_MODE_CHANGED</unmanaged>
        ModeChanged = unchecked((int)(((0)<<31) | ((0x87a)<<16) | (7))),			
        
        /// <summary>	
        /// No documentation.	
        /// </summary>	
        /// <unmanaged>DXGI_STATUS_MODE_CHANGE_IN_PROGRESS</unmanaged>
        ModeChangeInProgress = unchecked((int)(((0)<<31) | ((0x87a)<<16) | (8))),			
    }
    
    /// <summary>	
    /// Resource data formats which includes fully-typed and typeless formats. There is a list of format modifiers at the bottom of the page,  that more fully describes each format type.	
    /// </summary>	
    /// <remarks>	
    /// A few formats have additional restrictions.A resource declared with the DXGI_FORMAT_R32G32B32 family of formats cannot be used simultaneously for vertex and texture data. That is, you may not create a buffer resource with the DXGI_FORMAT_R32G32B32 family of formats that uses any of the following bind flags: D3D10_BIND_VERTEX_BUFFER, D3D10_BIND_INDEX_BUFFER, D3D10_BIND_CONSTANT_BUFFER, or D3D10_BIND_STREAM_OUTPUT (see <see cref="SlimDX2.Direct3D10.BindFlags"/>).DXGI_FORMAT_R1_UNORM is designed specifically for text filtering, and must be used with a format-specific, configurable 8x8 filter mode. When calling an HLSL sampling function using this format, the address offset parameter must be set to (0,0).A resource using a sub-sampled format (such as DXGI_FORMAT_R8G8_B8G8) must have a size that is a multiple of 2 in the x dimension.Format is not available in Direct3D 10 and Direct3D 10.1Format ModifiersEach enumeration value contains a format modifier which describes the data type.Format ModifiersDescription_FLOATA floating-point value; 32-bit floating-point formats use IEEE 754 single-precision (s23e8 format): sign bit, 8-bit biased (127) exponent,  and 23-bit mantissa. 16-bit floating-point formats use half-precision (s10e5 format): sign bit, 5-bit biased (15) exponent, and 10-bit mantissa._SINTTwo's complement signed integer. For example, a 3-bit SINT represents the values -4, -3, -2, -1, 0, 1, 2, 3._SNORMSigned normalized integer; which is interpreted in a resource as a signed integer, and is interpreted in a shader as a signed normalized floating-point value in the range [-1, 1]. For an 2's complement number, the maximum value is 1.0f (a 5-bit value 01111 maps to 1.0f), and the minimum value is -1.0f (a 5-bit value 10000 maps to -1.0f). In addition, the second-minimum number maps to -1.0f (a 5-bit value 10001 maps to -1.0f). The resulting integer representations are evenly spaced floating-point values in the range (-1.0f...0.0f), and also a complementary set of representations for numbers in the range (0.0f...1.0f)._SRGBStandard RGB data, which roughly displays colors in a linear ramp of luminosity levels such that an average observer, under average viewing conditions, can view them on an average display.  All 0's maps to 0.0f, and all 1's maps to 1.0f. The sequence of unsigned integer encodings between all 0's and all 1's represent a nonlinear progression in the floating-point interpretation of the numbers between 0.0f to 1.0f. For more detail, see the SRGB color standard, IEC 61996-2-1, at IEC (International Electrotechnical Commission). Conversion to or from sRGB space is automatically done by D3DX10 or D3DX9 texture-load functions. If the format has an alpha channel, the alpha data is also stored in sRGB color space. _TYPELESSTypeless data, with a defined number of bits. Typeless formats are designed for creating typeless resources; that is, a resource whose size is known, but whose data type is not yet fully defined. When a typeless resource is bound to a shader, the application or shader must resolve the format type (which must match the number of bits per component in the typeless format). A typeless format contains one or more subformats; each subformat resolves the data type. For example, in the R32G32B32 group, which defines types for three-component 96-bit data, there is one typeless format and three fully typed subformats.	
    /// <code> DXGI_FORMAT_R32G32B32_TYPELESS, DXGI_FORMAT_R32G32B32_FLOAT, DXGI_FORMAT_R32G32B32_UINT, DXGI_FORMAT_R32G32B32_SINT, </code>	
    /// 	
    /// _UINTUnsigned integer. For instance, a 3-bit UINT represents the values 0, 1, 2, 3, 4, 5, 6, 7._UNORMUnsigned normalized integer; which is interpreted in a resource as an unsigned integer, and is interpreted in a shader as an unsigned normalized floating-point value in the range [0, 1]. All 0's maps to 0.0f, and all 1's maps to 1.0f. A sequence of evenly spaced floating-point values from 0.0f to 1.0f are represented. For instance, a 2-bit UNORM represents 0.0f, 1/3, 2/3, and 1.0f. New Resource FormatsDirect3D 10 offers new data compression formats for compressing high-dynamic range (HDR) lighting data, normal maps and heightfields to a fraction of their original size. These compression types include:Shared-Exponent high-dynamic range (HDR) format (RGBE)New Block-Compressed 1-2 channel UNORM/SNORM formatsThe block compression formats can be used for any of the 2D or 3D texture types ( Texture2D, Texture2DArray, Texture3D, or TextureCube) including mipmap surfaces. The block compression techniques require texture dimensions to be a multiple of 4 (since the implementation compresses on blocks of 4x4 texels). In the texture sampler, compressed formats are always decompressed before texture filtering.	
    /// </remarks>	
    /// <unmanaged>DXGI_FORMAT</unmanaged>
    public enum Format : int {	
        
        /// <summary>	
        /// The format is not known.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_UNKNOWN</unmanaged>
        Unknown = unchecked((int)0),			
        
        /// <summary>	
        /// A four-component, 128-bit typeless format. 1	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32A32_TYPELESS</unmanaged>
        R32G32B32A32_Typeless = unchecked((int)1),			
        
        /// <summary>	
        /// A four-component, 128-bit floating-point format. 1	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32A32_FLOAT</unmanaged>
        R32G32B32A32_Float = unchecked((int)2),			
        
        /// <summary>	
        /// A four-component, 128-bit unsigned-integer format. 1	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32A32_UINT</unmanaged>
        R32G32B32A32_UInt = unchecked((int)3),			
        
        /// <summary>	
        /// A four-component, 128-bit signed-integer format. 1	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32A32_SINT</unmanaged>
        R32G32B32A32_SInt = unchecked((int)4),			
        
        /// <summary>	
        /// A three-component, 96-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32_TYPELESS</unmanaged>
        R32G32B32_Typeless = unchecked((int)5),			
        
        /// <summary>	
        /// A three-component, 96-bit floating-point format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32_FLOAT</unmanaged>
        R32G32B32_Float = unchecked((int)6),			
        
        /// <summary>	
        /// A three-component, 96-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32_UINT</unmanaged>
        R32G32B32_UInt = unchecked((int)7),			
        
        /// <summary>	
        /// A three-component, 96-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32B32_SINT</unmanaged>
        R32G32B32_SInt = unchecked((int)8),			
        
        /// <summary>	
        /// A four-component, 64-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_TYPELESS</unmanaged>
        R16G16B16A16_Typeless = unchecked((int)9),			
        
        /// <summary>	
        /// A four-component, 64-bit floating-point format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_FLOAT</unmanaged>
        R16G16B16A16_Float = unchecked((int)10),			
        
        /// <summary>	
        /// A four-component, 64-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_UNORM</unmanaged>
        R16G16B16A16_UNorm = unchecked((int)11),			
        
        /// <summary>	
        /// A four-component, 64-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_UINT</unmanaged>
        R16G16B16A16_UInt = unchecked((int)12),			
        
        /// <summary>	
        /// A four-component, 64-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_SNORM</unmanaged>
        R16G16B16A16_SNorm = unchecked((int)13),			
        
        /// <summary>	
        /// A four-component, 64-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16B16A16_SINT</unmanaged>
        R16G16B16A16_SInt = unchecked((int)14),			
        
        /// <summary>	
        /// A two-component, 64-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32_TYPELESS</unmanaged>
        R32G32_Typeless = unchecked((int)15),			
        
        /// <summary>	
        /// A two-component, 64-bit floating-point format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32_FLOAT</unmanaged>
        R32G32_Float = unchecked((int)16),			
        
        /// <summary>	
        /// A two-component, 64-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32_UINT</unmanaged>
        R32G32_UInt = unchecked((int)17),			
        
        /// <summary>	
        /// A two-component, 64-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G32_SINT</unmanaged>
        R32G32_SInt = unchecked((int)18),			
        
        /// <summary>	
        /// A two-component, 64-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32G8X24_TYPELESS</unmanaged>
        R32G8X24_Typeless = unchecked((int)19),			
        
        /// <summary>	
        /// A 32-bit floating-point component, and two unsigned-integer components (with an additional 32 bits).	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_D32_FLOAT_S8X24_UINT</unmanaged>
        D32_Float_S8X24_UInt = unchecked((int)20),			
        
        /// <summary>	
        /// A 32-bit floating-point component, and two typeless components (with an additional 32 bits).	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS</unmanaged>
        R32_Float_X8X24_Typeless = unchecked((int)21),			
        
        /// <summary>	
        /// A 32-bit typeless component, and two unsigned-integer components (with an additional 32 bits).	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_X32_TYPELESS_G8X24_UINT</unmanaged>
        X32_Typeless_G8X24_UInt = unchecked((int)22),			
        
        /// <summary>	
        /// A four-component, 32-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R10G10B10A2_TYPELESS</unmanaged>
        R10G10B10A2_Typeless = unchecked((int)23),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R10G10B10A2_UNORM</unmanaged>
        R10G10B10A2_UNorm = unchecked((int)24),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R10G10B10A2_UINT</unmanaged>
        R10G10B10A2_UInt = unchecked((int)25),			
        
        /// <summary>	
        /// Three partial-precision floating-point numbers encodeded into a single 32-bit value (a variant of s10e5).  There are no sign bits, and there is a 5-bit biased (15) exponent for each channel, 6-bit mantissa  for R and G, and a 5-bit mantissa for B, as shown in the following illustration.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R11G11B10_FLOAT</unmanaged>
        R11G11B10_Float = unchecked((int)26),			
        
        /// <summary>	
        /// A three-component, 32-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_TYPELESS</unmanaged>
        R8G8B8A8_Typeless = unchecked((int)27),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_UNORM</unmanaged>
        R8G8B8A8_UNorm = unchecked((int)28),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-normalized integer sRGB format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_UNORM_SRGB</unmanaged>
        R8G8B8A8_UNorm_SRgb = unchecked((int)29),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_UINT</unmanaged>
        R8G8B8A8_UInt = unchecked((int)30),			
        
        /// <summary>	
        /// A three-component, 32-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_SNORM</unmanaged>
        R8G8B8A8_SNorm = unchecked((int)31),			
        
        /// <summary>	
        /// A three-component, 32-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8B8A8_SINT</unmanaged>
        R8G8B8A8_SInt = unchecked((int)32),			
        
        /// <summary>	
        /// A two-component, 32-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16_TYPELESS</unmanaged>
        R16G16_Typeless = unchecked((int)33),			
        
        /// <summary>	
        /// A two-component, 32-bit floating-point format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16_FLOAT</unmanaged>
        R16G16_Float = unchecked((int)34),			
        
        /// <summary>	
        /// A two-component, 32-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16_UNORM</unmanaged>
        R16G16_UNorm = unchecked((int)35),			
        
        /// <summary>	
        /// A two-component, 32-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16_UINT</unmanaged>
        R16G16_UInt = unchecked((int)36),			
        
        /// <summary>	
        /// A two-component, 32-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16_SNORM</unmanaged>
        R16G16_SNorm = unchecked((int)37),			
        
        /// <summary>	
        /// A two-component, 32-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16G16_SINT</unmanaged>
        R16G16_SInt = unchecked((int)38),			
        
        /// <summary>	
        /// A single-component, 32-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32_TYPELESS</unmanaged>
        R32_Typeless = unchecked((int)39),			
        
        /// <summary>	
        /// A single-component, 32-bit floating-point format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_D32_FLOAT</unmanaged>
        D32_Float = unchecked((int)40),			
        
        /// <summary>	
        /// A single-component, 32-bit floating-point format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32_FLOAT</unmanaged>
        R32_Float = unchecked((int)41),			
        
        /// <summary>	
        /// A single-component, 32-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32_UINT</unmanaged>
        R32_UInt = unchecked((int)42),			
        
        /// <summary>	
        /// A single-component, 32-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R32_SINT</unmanaged>
        R32_SInt = unchecked((int)43),			
        
        /// <summary>	
        /// A two-component, 32-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R24G8_TYPELESS</unmanaged>
        R24G8_Typeless = unchecked((int)44),			
        
        /// <summary>	
        /// A 32-bit z-buffer format that uses 24 bits for the depth channel and 8 bits for the stencil channel.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_D24_UNORM_S8_UINT</unmanaged>
        D24_UNorm_S8_UInt = unchecked((int)45),			
        
        /// <summary>	
        /// A 32-bit format, that contains a 24 bit, single-component, unsigned-normalized integer, with an additional typeless 8 bits.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R24_UNORM_X8_TYPELESS</unmanaged>
        R24_UNorm_X8_Typeless = unchecked((int)46),			
        
        /// <summary>	
        /// A 32-bit format, that contains a 24 bit, single-component, typeless format,  with an additional 8 bit unsigned integer component.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_X24_TYPELESS_G8_UINT</unmanaged>
        X24_Typeless_G8_UInt = unchecked((int)47),			
        
        /// <summary>	
        /// A two-component, 16-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8_TYPELESS</unmanaged>
        R8G8_Typeless = unchecked((int)48),			
        
        /// <summary>	
        /// A two-component, 16-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8_UNORM</unmanaged>
        R8G8_UNorm = unchecked((int)49),			
        
        /// <summary>	
        /// A two-component, 16-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8_UINT</unmanaged>
        R8G8_UInt = unchecked((int)50),			
        
        /// <summary>	
        /// A two-component, 16-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8_SNORM</unmanaged>
        R8G8_SNorm = unchecked((int)51),			
        
        /// <summary>	
        /// A two-component, 16-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8_SINT</unmanaged>
        R8G8_SInt = unchecked((int)52),			
        
        /// <summary>	
        /// A single-component, 16-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16_TYPELESS</unmanaged>
        R16_Typeless = unchecked((int)53),			
        
        /// <summary>	
        /// A single-component, 16-bit floating-point format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16_FLOAT</unmanaged>
        R16_Float = unchecked((int)54),			
        
        /// <summary>	
        /// A single-component, 16-bit unsigned-normalized integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_D16_UNORM</unmanaged>
        D16_UNorm = unchecked((int)55),			
        
        /// <summary>	
        /// A single-component, 16-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16_UNORM</unmanaged>
        R16_UNorm = unchecked((int)56),			
        
        /// <summary>	
        /// A single-component, 16-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16_UINT</unmanaged>
        R16_UInt = unchecked((int)57),			
        
        /// <summary>	
        /// A single-component, 16-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16_SNORM</unmanaged>
        R16_SNorm = unchecked((int)58),			
        
        /// <summary>	
        /// A single-component, 16-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R16_SINT</unmanaged>
        R16_SInt = unchecked((int)59),			
        
        /// <summary>	
        /// A single-component, 8-bit typeless format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8_TYPELESS</unmanaged>
        R8_Typeless = unchecked((int)60),			
        
        /// <summary>	
        /// A single-component, 8-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8_UNORM</unmanaged>
        R8_UNorm = unchecked((int)61),			
        
        /// <summary>	
        /// A single-component, 8-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8_UINT</unmanaged>
        R8_UInt = unchecked((int)62),			
        
        /// <summary>	
        /// A single-component, 8-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8_SNORM</unmanaged>
        R8_SNorm = unchecked((int)63),			
        
        /// <summary>	
        /// A single-component, 8-bit signed-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8_SINT</unmanaged>
        R8_SInt = unchecked((int)64),			
        
        /// <summary>	
        /// A single-component, 8-bit unsigned-integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_A8_UNORM</unmanaged>
        A8_UNorm = unchecked((int)65),			
        
        /// <summary>	
        /// A single-component, 1-bit unsigned-normalized integer format. 2.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R1_UNORM</unmanaged>
        R1_UNorm = unchecked((int)66),			
        
        /// <summary>	
        /// Three partial-precision floating-point numbers encoded into a single 32-bit value all sharing the same 5-bit exponent (variant of s10e5).  There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit mantissa for each channel, as shown in the following illustration. 2.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R9G9B9E5_SHAREDEXP</unmanaged>
        R9G9B9E5_Sharedexp = unchecked((int)67),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-normalized integer format. 3	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R8G8_B8G8_UNORM</unmanaged>
        R8G8_B8G8_UNorm = unchecked((int)68),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-normalized integer format. 3	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_G8R8_G8B8_UNORM</unmanaged>
        G8R8_G8B8_UNorm = unchecked((int)69),			
        
        /// <summary>	
        /// Four-component typeless block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC1_TYPELESS</unmanaged>
        BC1_Typeless = unchecked((int)70),			
        
        /// <summary>	
        /// Four-component block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC1_UNORM</unmanaged>
        BC1_UNorm = unchecked((int)71),			
        
        /// <summary>	
        /// Four-component block-compression format for sRGB data.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC1_UNORM_SRGB</unmanaged>
        BC1_UNorm_SRgb = unchecked((int)72),			
        
        /// <summary>	
        /// Four-component typeless block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC2_TYPELESS</unmanaged>
        BC2_Typeless = unchecked((int)73),			
        
        /// <summary>	
        /// Four-component block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC2_UNORM</unmanaged>
        BC2_UNorm = unchecked((int)74),			
        
        /// <summary>	
        /// Four-component block-compression format for sRGB data.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC2_UNORM_SRGB</unmanaged>
        BC2_UNorm_SRgb = unchecked((int)75),			
        
        /// <summary>	
        /// Four-component typeless block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC3_TYPELESS</unmanaged>
        BC3_Typeless = unchecked((int)76),			
        
        /// <summary>	
        /// Four-component block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC3_UNORM</unmanaged>
        BC3_UNorm = unchecked((int)77),			
        
        /// <summary>	
        /// Four-component block-compression format for sRGB data.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC3_UNORM_SRGB</unmanaged>
        BC3_UNorm_SRgb = unchecked((int)78),			
        
        /// <summary>	
        /// One-component typeless block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC4_TYPELESS</unmanaged>
        BC4_Typeless = unchecked((int)79),			
        
        /// <summary>	
        /// One-component block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC4_UNORM</unmanaged>
        BC4_UNorm = unchecked((int)80),			
        
        /// <summary>	
        /// One-component block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC4_SNORM</unmanaged>
        BC4_SNorm = unchecked((int)81),			
        
        /// <summary>	
        /// Two-component typeless block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC5_TYPELESS</unmanaged>
        BC5_Typeless = unchecked((int)82),			
        
        /// <summary>	
        /// Two-component block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC5_UNORM</unmanaged>
        BC5_UNorm = unchecked((int)83),			
        
        /// <summary>	
        /// Two-component block-compression format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC5_SNORM</unmanaged>
        BC5_SNorm = unchecked((int)84),			
        
        /// <summary>	
        /// A three-component, 16-bit unsigned-normalized integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_B5G6R5_UNORM</unmanaged>
        B5G6R5_UNorm = unchecked((int)85),			
        
        /// <summary>	
        /// A four-component, 16-bit unsigned-normalized integer format that supports 1-bit alpha.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_B5G5R5A1_UNORM</unmanaged>
        B5G5R5A1_UNorm = unchecked((int)86),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-normalized integer format that supports 8-bit alpha.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8A8_UNORM</unmanaged>
        B8G8R8A8_UNorm = unchecked((int)87),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-normalized integer format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8X8_UNORM</unmanaged>
        B8G8R8X8_UNorm = unchecked((int)88),			
        
        /// <summary>	
        /// A four-component, 32-bit format that supports 2-bit alpha. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM</unmanaged>
        R10G10B10_Xr_Bias_A2_UNorm = unchecked((int)89),			
        
        /// <summary>	
        /// A four-component, 32-bit typeless format that supports 8-bit alpha. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8A8_TYPELESS</unmanaged>
        B8G8R8A8_Typeless = unchecked((int)90),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-normalized standard RGB format that supports 8-bit alpha. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8A8_UNORM_SRGB</unmanaged>
        B8G8R8A8_UNorm_SRgb = unchecked((int)91),			
        
        /// <summary>	
        /// A four-component, 32-bit typeless format. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8X8_TYPELESS</unmanaged>
        B8G8R8X8_Typeless = unchecked((int)92),			
        
        /// <summary>	
        /// A four-component, 32-bit unsigned-normalized standard RGB format. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_B8G8R8X8_UNORM_SRGB</unmanaged>
        B8G8R8X8_UNorm_SRgb = unchecked((int)93),			
        
        /// <summary>	
        /// A typeless block-compression format. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC6H_TYPELESS</unmanaged>
        BC6H_Typeless = unchecked((int)94),			
        
        /// <summary>	
        /// A block-compression format. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC6H_UF16</unmanaged>
        BC6H_Uf16 = unchecked((int)95),			
        
        /// <summary>	
        /// A block-compression format. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC6H_SF16</unmanaged>
        BC6H_Sf16 = unchecked((int)96),			
        
        /// <summary>	
        /// A typeless block-compression format. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC7_TYPELESS</unmanaged>
        BC7_Typeless = unchecked((int)97),			
        
        /// <summary>	
        /// A block-compression format. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC7_UNORM</unmanaged>
        BC7_UNorm = unchecked((int)98),			
        
        /// <summary>	
        /// A block-compression format. 4	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT_BC7_UNORM_SRGB</unmanaged>
        BC7_UNorm_SRgb = unchecked((int)99),			
    }
}
