// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Structs for SlimDX2.DXGI namespace.
//     This code was generated by a tool.
//     Date : 10/22/2010 22:38:38
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

namespace SlimDX2.DXGI {

    
    /// <summary>	
    /// Describes timing and presentation statistics for a frame.	
    /// </summary>	
    /// <remarks>	
    /// The DXGI_FRAME_STATISTICS structure is initialized by the <see cref="SlimDX2.DXGI.Output.GetFrameStatistics"/> method or by  the <see cref="SlimDX2.DXGI.SwapChain.GetFrameStatistics"/> method.	
    /// </remarks>	
    /// <unmanaged>DXGI_FRAME_STATISTICS</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct FrameStatistics {	
        
        /// <summary>	
        /// A value representing the running total count of times that an image has been presented to the monitor since the computer booted.  Note that the number of times that an image has been presented to the monitor is not necessarily the same as the number of times  that <see cref="SlimDX2.DXGI.SwapChain.Present"/> has been called.	
        /// </summary>	
        /// <unmanaged>UINT PresentCount</unmanaged>
        public int PresentCount;
        
        /// <summary>	
        /// A value representing  the running total count of v-blanks that have happened since the computer booted.	
        /// </summary>	
        /// <unmanaged>UINT PresentRefreshCount</unmanaged>
        public int PresentRefreshCount;
        
        /// <summary>	
        /// A value representing  the running total count of v-blanks that have happened since the computer booted.	
        /// </summary>	
        /// <unmanaged>UINT SyncRefreshCount</unmanaged>
        public int SyncRefreshCount;
        
        /// <summary>	
        /// A value representing the high-resolution performance counter timer.  This value is the same as the value returned by the {{QueryPerformanceCounter}} function.	
        /// </summary>	
        /// <unmanaged>LARGE_INTEGER SyncQPCTime</unmanaged>
        public long SyncQPCTime;
        
        /// <summary>	
        /// Reserved. Always returns 0.	
        /// </summary>	
        /// <unmanaged>LARGE_INTEGER SyncGPUTime</unmanaged>
        public long SyncGPUTime;
    }
    
    /// <summary>	
    /// A mapped rectangle used for accessing a surface.	
    /// </summary>	
    /// <remarks>	
    /// The DXGI_MAPPED_RECT structure is initialized by the <see cref="SlimDX2.DXGI.Surface.Map"/> method.	
    /// </remarks>	
    /// <unmanaged>DXGI_MAPPED_RECT</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct MappedRect {	
        
        /// <summary>	
        /// A value describing the width of the surface.	
        /// </summary>	
        /// <unmanaged>INT Pitch</unmanaged>
        public int Pitch;
        
        /// <summary>	
        /// A pointer to the image buffer of the surface.	
        /// </summary>	
        /// <unmanaged>BYTE* pBits</unmanaged>
        public IntPtr PBits;
    }
    
    /// <summary>	
    /// Describes an adapter (or video card) by using DXGI 1.0.	
    /// </summary>	
    /// <remarks>	
    /// The DXGI_ADAPTER_DESC structure provides a description of an adapter.  This structure is initialized by using the <see cref="SlimDX2.DXGI.Adapter.GetDescription"/> method.	
    /// </remarks>	
    /// <unmanaged>DXGI_ADAPTER_DESC</unmanaged>
    public  partial struct AdapterDescription {	
        
        /// <summary>	
        /// A string that contains the adapter description.	
        /// </summary>	
        /// <unmanaged>wchar Description[128]</unmanaged>
        public string Description;
        
        /// <summary>	
        /// The PCI ID of the hardware vendor.	
        /// </summary>	
        /// <unmanaged>UINT VendorId</unmanaged>
        public int VendorId;
        
        /// <summary>	
        /// The PCI ID of the hardware device.	
        /// </summary>	
        /// <unmanaged>UINT DeviceId</unmanaged>
        public int DeviceId;
        
        /// <summary>	
        /// The PCI ID of the sub system.	
        /// </summary>	
        /// <unmanaged>UINT SubSysId</unmanaged>
        public int SubSysId;
        
        /// <summary>	
        /// The PCI ID of the revision number of the adapter.	
        /// </summary>	
        /// <unmanaged>UINT Revision</unmanaged>
        public int Revision;
        
        /// <summary>	
        /// The number of bytes of dedicated video memory that are not shared with the CPU.	
        /// </summary>	
        /// <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>
        public SlimDX2.Size DedicatedVideoMemory;
        
        /// <summary>	
        /// The number of bytes of dedicated system memory that are not shared with the GPU. This memory is allocated from available system memory at boot time.	
        /// </summary>	
        /// <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>
        public SlimDX2.Size DedicatedSystemMemory;
        
        /// <summary>	
        /// The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.	
        /// </summary>	
        /// <unmanaged>SIZE_T SharedSystemMemory</unmanaged>
        public SlimDX2.Size SharedSystemMemory;
        
        /// <summary>	
        /// A unique value that identifies the adapter. See <see cref="long"/> for a definition of the structure. LUID is defined in dxgi.h.	
        /// </summary>	
        /// <unmanaged>LUID AdapterLuid</unmanaged>
        public ulong AdapterLuid;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public fixed char Description[128];
            public int VendorId;
            public int DeviceId;
            public int SubSysId;
            public int Revision;
            public SlimDX2.Size DedicatedVideoMemory;
            public SlimDX2.Size DedicatedSystemMemory;
            public SlimDX2.Size SharedSystemMemory;
            public ulong AdapterLuid;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
			    fixed (char* __ptr = @ref.Description) this.Description = new string(__ptr, 0, 128);
            this.VendorId = @ref.VendorId;
            this.DeviceId = @ref.DeviceId;
            this.SubSysId = @ref.SubSysId;
            this.Revision = @ref.Revision;
            this.DedicatedVideoMemory = @ref.DedicatedVideoMemory;
            this.DedicatedSystemMemory = @ref.DedicatedSystemMemory;
            this.SharedSystemMemory = @ref.SharedSystemMemory;
            this.AdapterLuid = @ref.AdapterLuid;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (char* __psrc = this.Description) fixed (char* __ptr = @ref.Description) Utilities.CopyMemory((IntPtr)__ptr, (IntPtr)__psrc, 128);
            @ref.VendorId = this.VendorId;
            @ref.DeviceId = this.DeviceId;
            @ref.SubSysId = this.SubSysId;
            @ref.Revision = this.Revision;
            @ref.DedicatedVideoMemory = this.DedicatedVideoMemory;
            @ref.DedicatedSystemMemory = this.DedicatedSystemMemory;
            @ref.SharedSystemMemory = this.SharedSystemMemory;
            @ref.AdapterLuid = this.AdapterLuid;
		
		}
    }
    
    /// <summary>	
    /// Describes an output or physical connection between the adapter (video card) and a device.	
    /// </summary>	
    /// <remarks>	
    /// The DXGI_OUTPUT_DESC structure is initialized by the <see cref="SlimDX2.DXGI.Output.GetDescription"/> method.	
    /// </remarks>	
    /// <unmanaged>DXGI_OUTPUT_DESC</unmanaged>
    public  partial struct OutputDescription {	
        
        /// <summary>	
        /// A string that contains the name of the output device.	
        /// </summary>	
        /// <unmanaged>wchar DeviceName[32]</unmanaged>
        public string DeviceName;
        
        /// <summary>	
        /// A <see cref="SlimDX2.Rectangle"/> structure containing the bounds of the output in desktop coordinates.	
        /// </summary>	
        /// <unmanaged>RECT DesktopCoordinates</unmanaged>
        public SlimDX2.Rectangle DesktopCoordinates;
        
        /// <summary>	
        /// True if the output is attached to the desktop; otherwise, false.	
        /// </summary>	
        /// <unmanaged>BOOL AttachedToDesktop</unmanaged>
        public bool AttachedToDesktop { 
            get { 
                return (_AttachedToDesktop!=0)?true:false; 
            }
            set { 
                _AttachedToDesktop = value?1:0;
            }
        }
        internal int _AttachedToDesktop;
        
        /// <summary>	
        /// A member of the <see cref="SlimDX2.DXGI.DisplayModeRotation"/> enumerated type describing on how an image is rotated by the output.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_ROTATION Rotation</unmanaged>
        public SlimDX2.DXGI.DisplayModeRotation Rotation;
        
        /// <summary>	
        /// An <see cref="IntPtr"/> handle that represents the display monitor. For more information, see {{HMONITOR and the Device Context}}.	
        /// </summary>	
        /// <unmanaged>HMONITOR Monitor</unmanaged>
        public IntPtr Monitor;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public fixed char DeviceName[32];
            public SlimDX2.Rectangle DesktopCoordinates;
            public int _AttachedToDesktop;
            public SlimDX2.DXGI.DisplayModeRotation Rotation;
            public IntPtr Monitor;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
			    fixed (char* __ptr = @ref.DeviceName) this.DeviceName = new string(__ptr, 0, 32);
            this.DesktopCoordinates = @ref.DesktopCoordinates;
            this._AttachedToDesktop = @ref._AttachedToDesktop;
            this.Rotation = @ref.Rotation;
            this.Monitor = @ref.Monitor;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (char* __psrc = this.DeviceName) fixed (char* __ptr = @ref.DeviceName) Utilities.CopyMemory((IntPtr)__ptr, (IntPtr)__psrc, 32);
            @ref.DesktopCoordinates = this.DesktopCoordinates;
            @ref._AttachedToDesktop = this._AttachedToDesktop;
            @ref.Rotation = this.Rotation;
            @ref.Monitor = this.Monitor;
		
		}
    }
    
    /// <summary>	
    /// Represents a handle to a shared resource.	
    /// </summary>	
    /// <remarks>	
    /// To create a shared surface, pass a shared-resource handle into the <see cref="SlimDX2.DXGI.Device.CreateSurface"/> method.	
    /// </remarks>	
    /// <unmanaged>DXGI_SHARED_RESOURCE</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct SharedResource {	
        
        /// <summary>	
        /// A handle to a shared resource.	
        /// </summary>	
        /// <unmanaged>HANDLE Handle</unmanaged>
        public IntPtr Handle;
    }
    
    /// <summary>	
    /// Describes a surface.	
    /// </summary>	
    /// <unmanaged>DXGI_SURFACE_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct SurfaceDescription {	
        
        /// <summary>	
        /// A value describing the surface width.	
        /// </summary>	
        /// <unmanaged>UINT Width</unmanaged>
        public int Width;
        
        /// <summary>	
        /// A value describing the surface height.	
        /// </summary>	
        /// <unmanaged>UINT Height</unmanaged>
        public int Height;
        
        /// <summary>	
        /// A member of the <see cref="SlimDX2.DXGI.Format"/> enumerated type that describes the surface format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// A member of the <see cref="SlimDX2.DXGI.SampleDescription"/> structure that describes multi-sampling parameters for the surface.	
        /// </summary>	
        /// <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>
        public SlimDX2.DXGI.SampleDescription SampleDescription;
    }
    
    /// <summary>	
    /// Describes a swap chain.	
    /// </summary>	
    /// <remarks>	
    /// In full-screen mode, there is a dedicated front buffer; in windowed mode, the desktop is the front buffer.If you create a swap chain with one buffer, specifying DXGI_SWAP_EFFECT_SEQUENTIAL does not cause the contents of the single  buffer to be swapped with the front buffer.For performance information about flipping swap-chain buffers in full-screen application,  see {{Full-Screen Application Performance Hints}}.	
    /// </remarks>	
    /// <unmanaged>DXGI_SWAP_CHAIN_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct SwapChainDescription {	
        
        /// <summary>	
        /// A <see cref="SlimDX2.DXGI.ModeDescription"/> structure that describes the backbuffer display mode.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_DESC BufferDesc</unmanaged>
        public SlimDX2.DXGI.ModeDescription BufferDescription;
        
        /// <summary>	
        /// A <see cref="SlimDX2.DXGI.SampleDescription"/> structure that describes multi-sampling parameters.	
        /// </summary>	
        /// <unmanaged>DXGI_SAMPLE_DESC SampleDesc</unmanaged>
        public SlimDX2.DXGI.SampleDescription SampleDescription;
        
        /// <summary>	
        /// A member of the <see cref="SlimDX2.DXGI.Usage"/> enumerated type that describes the surface usage and CPU access options for the back buffer. The back buffer can  be used for shader input or render-target output.	
        /// </summary>	
        /// <unmanaged>DXGI_USAGE BufferUsage</unmanaged>
        public SlimDX2.DXGI.Usage BufferUsage;
        
        /// <summary>	
        /// A value that describes the number of buffers in the swap chain. When you call  <see cref="SlimDX2.DXGI.Factory.CreateSwapChain"/> to create a full-screen swap chain, you typically include the front buffer in this value. For more information about swap-chain buffers, see Remarks.	
        /// </summary>	
        /// <unmanaged>UINT BufferCount</unmanaged>
        public int BufferCount;
        
        /// <summary>	
        /// An <see cref="IntPtr"/> handle to the output window. This member must not be NULL.	
        /// </summary>	
        /// <unmanaged>HWND OutputWindow</unmanaged>
        public IntPtr OutputWindow;
        
        /// <summary>	
        /// True if the output is in windowed mode; otherwise, false. For more information, see <see cref="SlimDX2.DXGI.Factory.CreateSwapChain"/>.	
        /// </summary>	
        /// <unmanaged>BOOL Windowed</unmanaged>
        public bool Windowed { 
            get { 
                return (_Windowed!=0)?true:false; 
            }
            set { 
                _Windowed = value?1:0;
            }
        }
        internal int _Windowed;
        
        /// <summary>	
        /// A member of the <see cref="SlimDX2.DXGI.SwapEffect"/> enumerated type that describes options for handling the contents of the presentation buffer after  presenting a surface.	
        /// </summary>	
        /// <unmanaged>DXGI_SWAP_EFFECT SwapEffect</unmanaged>
        public SlimDX2.DXGI.SwapEffect SwapEffect;
        
        /// <summary>	
        /// A member of the <see cref="SlimDX2.DXGI.SwapChainFlags"/> enumerated type that describes options for swap-chain behavior.	
        /// </summary>	
        /// <unmanaged>UINT Flags</unmanaged>
        public SlimDX2.DXGI.SwapChainFlags Flags;
    }
    
    /// <summary>	
    /// Describes an adapter (or video card) using DXGI 1.1.	
    /// </summary>	
    /// <remarks>	
    /// The DXGI_ADAPTER_DESC1 structure provides a DXGI 1.1 description of an adapter.  This structure is initialized by using the <see cref="SlimDX2.DXGI.Adapter1.GetDescription1"/> method.	
    /// </remarks>	
    /// <unmanaged>DXGI_ADAPTER_DESC1</unmanaged>
    public  partial struct AdapterDescription1 {	
        
        /// <summary>	
        /// A string that contains the adapter description.	
        /// </summary>	
        /// <unmanaged>wchar Description[128]</unmanaged>
        public string Description;
        
        /// <summary>	
        /// The PCI ID of the hardware vendor.	
        /// </summary>	
        /// <unmanaged>UINT VendorId</unmanaged>
        public int VendorId;
        
        /// <summary>	
        /// The PCI ID of the hardware device.	
        /// </summary>	
        /// <unmanaged>UINT DeviceId</unmanaged>
        public int DeviceId;
        
        /// <summary>	
        /// The PCI ID of the sub system.	
        /// </summary>	
        /// <unmanaged>UINT SubSysId</unmanaged>
        public int SubSysId;
        
        /// <summary>	
        /// The PCI ID of the revision number of the adapter.	
        /// </summary>	
        /// <unmanaged>UINT Revision</unmanaged>
        public int Revision;
        
        /// <summary>	
        /// The number of bytes of dedicated video memory that are not shared with the CPU.	
        /// </summary>	
        /// <unmanaged>SIZE_T DedicatedVideoMemory</unmanaged>
        public SlimDX2.Size DedicatedVideoMemory;
        
        /// <summary>	
        /// The number of bytes of dedicated system memory that are not shared with the GPU. This memory is allocated from available system memory at boot time.	
        /// </summary>	
        /// <unmanaged>SIZE_T DedicatedSystemMemory</unmanaged>
        public SlimDX2.Size DedicatedSystemMemory;
        
        /// <summary>	
        /// The number of bytes of shared system memory. This is the maximum value of system memory that may be consumed by the adapter during operation. Any incidental memory consumed by the driver as it manages and uses video memory is additional.	
        /// </summary>	
        /// <unmanaged>SIZE_T SharedSystemMemory</unmanaged>
        public SlimDX2.Size SharedSystemMemory;
        
        /// <summary>	
        /// A unique value that identifies the adapter. See <see cref="long"/> for a definition of the structure. LUID is defined in dxgi.h.	
        /// </summary>	
        /// <unmanaged>LUID AdapterLuid</unmanaged>
        public ulong AdapterLuid;
        
        /// <summary>	
        /// A value of the <see cref="SlimDX2.DXGI.AdapterFlags"/> enumerated type that describes the adapter type.  The DXGI_ADAPTER_FLAG_REMOTE flag is reserved.	
        /// </summary>	
        /// <unmanaged>UINT Flags</unmanaged>
        public SlimDX2.DXGI.AdapterFlags Flags;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public fixed char Description[128];
            public int VendorId;
            public int DeviceId;
            public int SubSysId;
            public int Revision;
            public SlimDX2.Size DedicatedVideoMemory;
            public SlimDX2.Size DedicatedSystemMemory;
            public SlimDX2.Size SharedSystemMemory;
            public ulong AdapterLuid;
            public SlimDX2.DXGI.AdapterFlags Flags;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
			    fixed (char* __ptr = @ref.Description) this.Description = new string(__ptr, 0, 128);
            this.VendorId = @ref.VendorId;
            this.DeviceId = @ref.DeviceId;
            this.SubSysId = @ref.SubSysId;
            this.Revision = @ref.Revision;
            this.DedicatedVideoMemory = @ref.DedicatedVideoMemory;
            this.DedicatedSystemMemory = @ref.DedicatedSystemMemory;
            this.SharedSystemMemory = @ref.SharedSystemMemory;
            this.AdapterLuid = @ref.AdapterLuid;
            this.Flags = @ref.Flags;
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            fixed (char* __psrc = this.Description) fixed (char* __ptr = @ref.Description) Utilities.CopyMemory((IntPtr)__ptr, (IntPtr)__psrc, 128);
            @ref.VendorId = this.VendorId;
            @ref.DeviceId = this.DeviceId;
            @ref.SubSysId = this.SubSysId;
            @ref.Revision = this.Revision;
            @ref.DedicatedVideoMemory = this.DedicatedVideoMemory;
            @ref.DedicatedSystemMemory = this.DedicatedSystemMemory;
            @ref.SharedSystemMemory = this.SharedSystemMemory;
            @ref.AdapterLuid = this.AdapterLuid;
            @ref.Flags = this.Flags;
		
		}
    }
    
    /// <summary>	
    /// Controls the settings of a gamma curve.	
    /// </summary>	
    /// <remarks>	
    /// The DXGI_GAMMA_CONTROL structure is used by the <see cref="SlimDX2.DXGI.Output.SetGammaControl"/> method.	
    /// </remarks>	
    /// <unmanaged>DXGI_GAMMA_CONTROL</unmanaged>
    public  partial struct GammaControl {	
        
        /// <summary>	
        /// A <see cref="SlimDX2.Color3"/> structure with scalar values that are applied to rgb values before being sent to the gamma look up table.	
        /// </summary>	
        /// <unmanaged>DXGI_RGB Scale</unmanaged>
        public SlimDX2.Color3 Scale;
        
        /// <summary>	
        /// A <see cref="SlimDX2.Color3"/> structure with offset values that are applied to the rgb values before being sent to the gamma look up table.	
        /// </summary>	
        /// <unmanaged>DXGI_RGB Offset</unmanaged>
        public SlimDX2.Color3 Offset;
        
        /// <summary>	
        /// An array of <see cref="SlimDX2.Color3"/> structures that control the points of a gamma curve.	
        /// </summary>	
        /// <unmanaged>DXGI_RGB GammaCurve[1025]</unmanaged>
        public SlimDX2.Color3[] GammaCurve { 
            get { 
                if (_GammaCurve == null) {
                    _GammaCurve = new SlimDX2.Color3[1025];
                }
                return _GammaCurve; 
            }
        }
        internal SlimDX2.Color3[] _GammaCurve;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public SlimDX2.Color3 Scale;
            public SlimDX2.Color3 Offset;
            public SlimDX2.Color3 GammaCurve;
            SlimDX2.Color3 __GammaCurve1;
            SlimDX2.Color3 __GammaCurve2;
            SlimDX2.Color3 __GammaCurve3;
            SlimDX2.Color3 __GammaCurve4;
            SlimDX2.Color3 __GammaCurve5;
            SlimDX2.Color3 __GammaCurve6;
            SlimDX2.Color3 __GammaCurve7;
            SlimDX2.Color3 __GammaCurve8;
            SlimDX2.Color3 __GammaCurve9;
            SlimDX2.Color3 __GammaCurve10;
            SlimDX2.Color3 __GammaCurve11;
            SlimDX2.Color3 __GammaCurve12;
            SlimDX2.Color3 __GammaCurve13;
            SlimDX2.Color3 __GammaCurve14;
            SlimDX2.Color3 __GammaCurve15;
            SlimDX2.Color3 __GammaCurve16;
            SlimDX2.Color3 __GammaCurve17;
            SlimDX2.Color3 __GammaCurve18;
            SlimDX2.Color3 __GammaCurve19;
            SlimDX2.Color3 __GammaCurve20;
            SlimDX2.Color3 __GammaCurve21;
            SlimDX2.Color3 __GammaCurve22;
            SlimDX2.Color3 __GammaCurve23;
            SlimDX2.Color3 __GammaCurve24;
            SlimDX2.Color3 __GammaCurve25;
            SlimDX2.Color3 __GammaCurve26;
            SlimDX2.Color3 __GammaCurve27;
            SlimDX2.Color3 __GammaCurve28;
            SlimDX2.Color3 __GammaCurve29;
            SlimDX2.Color3 __GammaCurve30;
            SlimDX2.Color3 __GammaCurve31;
            SlimDX2.Color3 __GammaCurve32;
            SlimDX2.Color3 __GammaCurve33;
            SlimDX2.Color3 __GammaCurve34;
            SlimDX2.Color3 __GammaCurve35;
            SlimDX2.Color3 __GammaCurve36;
            SlimDX2.Color3 __GammaCurve37;
            SlimDX2.Color3 __GammaCurve38;
            SlimDX2.Color3 __GammaCurve39;
            SlimDX2.Color3 __GammaCurve40;
            SlimDX2.Color3 __GammaCurve41;
            SlimDX2.Color3 __GammaCurve42;
            SlimDX2.Color3 __GammaCurve43;
            SlimDX2.Color3 __GammaCurve44;
            SlimDX2.Color3 __GammaCurve45;
            SlimDX2.Color3 __GammaCurve46;
            SlimDX2.Color3 __GammaCurve47;
            SlimDX2.Color3 __GammaCurve48;
            SlimDX2.Color3 __GammaCurve49;
            SlimDX2.Color3 __GammaCurve50;
            SlimDX2.Color3 __GammaCurve51;
            SlimDX2.Color3 __GammaCurve52;
            SlimDX2.Color3 __GammaCurve53;
            SlimDX2.Color3 __GammaCurve54;
            SlimDX2.Color3 __GammaCurve55;
            SlimDX2.Color3 __GammaCurve56;
            SlimDX2.Color3 __GammaCurve57;
            SlimDX2.Color3 __GammaCurve58;
            SlimDX2.Color3 __GammaCurve59;
            SlimDX2.Color3 __GammaCurve60;
            SlimDX2.Color3 __GammaCurve61;
            SlimDX2.Color3 __GammaCurve62;
            SlimDX2.Color3 __GammaCurve63;
            SlimDX2.Color3 __GammaCurve64;
            SlimDX2.Color3 __GammaCurve65;
            SlimDX2.Color3 __GammaCurve66;
            SlimDX2.Color3 __GammaCurve67;
            SlimDX2.Color3 __GammaCurve68;
            SlimDX2.Color3 __GammaCurve69;
            SlimDX2.Color3 __GammaCurve70;
            SlimDX2.Color3 __GammaCurve71;
            SlimDX2.Color3 __GammaCurve72;
            SlimDX2.Color3 __GammaCurve73;
            SlimDX2.Color3 __GammaCurve74;
            SlimDX2.Color3 __GammaCurve75;
            SlimDX2.Color3 __GammaCurve76;
            SlimDX2.Color3 __GammaCurve77;
            SlimDX2.Color3 __GammaCurve78;
            SlimDX2.Color3 __GammaCurve79;
            SlimDX2.Color3 __GammaCurve80;
            SlimDX2.Color3 __GammaCurve81;
            SlimDX2.Color3 __GammaCurve82;
            SlimDX2.Color3 __GammaCurve83;
            SlimDX2.Color3 __GammaCurve84;
            SlimDX2.Color3 __GammaCurve85;
            SlimDX2.Color3 __GammaCurve86;
            SlimDX2.Color3 __GammaCurve87;
            SlimDX2.Color3 __GammaCurve88;
            SlimDX2.Color3 __GammaCurve89;
            SlimDX2.Color3 __GammaCurve90;
            SlimDX2.Color3 __GammaCurve91;
            SlimDX2.Color3 __GammaCurve92;
            SlimDX2.Color3 __GammaCurve93;
            SlimDX2.Color3 __GammaCurve94;
            SlimDX2.Color3 __GammaCurve95;
            SlimDX2.Color3 __GammaCurve96;
            SlimDX2.Color3 __GammaCurve97;
            SlimDX2.Color3 __GammaCurve98;
            SlimDX2.Color3 __GammaCurve99;
            SlimDX2.Color3 __GammaCurve100;
            SlimDX2.Color3 __GammaCurve101;
            SlimDX2.Color3 __GammaCurve102;
            SlimDX2.Color3 __GammaCurve103;
            SlimDX2.Color3 __GammaCurve104;
            SlimDX2.Color3 __GammaCurve105;
            SlimDX2.Color3 __GammaCurve106;
            SlimDX2.Color3 __GammaCurve107;
            SlimDX2.Color3 __GammaCurve108;
            SlimDX2.Color3 __GammaCurve109;
            SlimDX2.Color3 __GammaCurve110;
            SlimDX2.Color3 __GammaCurve111;
            SlimDX2.Color3 __GammaCurve112;
            SlimDX2.Color3 __GammaCurve113;
            SlimDX2.Color3 __GammaCurve114;
            SlimDX2.Color3 __GammaCurve115;
            SlimDX2.Color3 __GammaCurve116;
            SlimDX2.Color3 __GammaCurve117;
            SlimDX2.Color3 __GammaCurve118;
            SlimDX2.Color3 __GammaCurve119;
            SlimDX2.Color3 __GammaCurve120;
            SlimDX2.Color3 __GammaCurve121;
            SlimDX2.Color3 __GammaCurve122;
            SlimDX2.Color3 __GammaCurve123;
            SlimDX2.Color3 __GammaCurve124;
            SlimDX2.Color3 __GammaCurve125;
            SlimDX2.Color3 __GammaCurve126;
            SlimDX2.Color3 __GammaCurve127;
            SlimDX2.Color3 __GammaCurve128;
            SlimDX2.Color3 __GammaCurve129;
            SlimDX2.Color3 __GammaCurve130;
            SlimDX2.Color3 __GammaCurve131;
            SlimDX2.Color3 __GammaCurve132;
            SlimDX2.Color3 __GammaCurve133;
            SlimDX2.Color3 __GammaCurve134;
            SlimDX2.Color3 __GammaCurve135;
            SlimDX2.Color3 __GammaCurve136;
            SlimDX2.Color3 __GammaCurve137;
            SlimDX2.Color3 __GammaCurve138;
            SlimDX2.Color3 __GammaCurve139;
            SlimDX2.Color3 __GammaCurve140;
            SlimDX2.Color3 __GammaCurve141;
            SlimDX2.Color3 __GammaCurve142;
            SlimDX2.Color3 __GammaCurve143;
            SlimDX2.Color3 __GammaCurve144;
            SlimDX2.Color3 __GammaCurve145;
            SlimDX2.Color3 __GammaCurve146;
            SlimDX2.Color3 __GammaCurve147;
            SlimDX2.Color3 __GammaCurve148;
            SlimDX2.Color3 __GammaCurve149;
            SlimDX2.Color3 __GammaCurve150;
            SlimDX2.Color3 __GammaCurve151;
            SlimDX2.Color3 __GammaCurve152;
            SlimDX2.Color3 __GammaCurve153;
            SlimDX2.Color3 __GammaCurve154;
            SlimDX2.Color3 __GammaCurve155;
            SlimDX2.Color3 __GammaCurve156;
            SlimDX2.Color3 __GammaCurve157;
            SlimDX2.Color3 __GammaCurve158;
            SlimDX2.Color3 __GammaCurve159;
            SlimDX2.Color3 __GammaCurve160;
            SlimDX2.Color3 __GammaCurve161;
            SlimDX2.Color3 __GammaCurve162;
            SlimDX2.Color3 __GammaCurve163;
            SlimDX2.Color3 __GammaCurve164;
            SlimDX2.Color3 __GammaCurve165;
            SlimDX2.Color3 __GammaCurve166;
            SlimDX2.Color3 __GammaCurve167;
            SlimDX2.Color3 __GammaCurve168;
            SlimDX2.Color3 __GammaCurve169;
            SlimDX2.Color3 __GammaCurve170;
            SlimDX2.Color3 __GammaCurve171;
            SlimDX2.Color3 __GammaCurve172;
            SlimDX2.Color3 __GammaCurve173;
            SlimDX2.Color3 __GammaCurve174;
            SlimDX2.Color3 __GammaCurve175;
            SlimDX2.Color3 __GammaCurve176;
            SlimDX2.Color3 __GammaCurve177;
            SlimDX2.Color3 __GammaCurve178;
            SlimDX2.Color3 __GammaCurve179;
            SlimDX2.Color3 __GammaCurve180;
            SlimDX2.Color3 __GammaCurve181;
            SlimDX2.Color3 __GammaCurve182;
            SlimDX2.Color3 __GammaCurve183;
            SlimDX2.Color3 __GammaCurve184;
            SlimDX2.Color3 __GammaCurve185;
            SlimDX2.Color3 __GammaCurve186;
            SlimDX2.Color3 __GammaCurve187;
            SlimDX2.Color3 __GammaCurve188;
            SlimDX2.Color3 __GammaCurve189;
            SlimDX2.Color3 __GammaCurve190;
            SlimDX2.Color3 __GammaCurve191;
            SlimDX2.Color3 __GammaCurve192;
            SlimDX2.Color3 __GammaCurve193;
            SlimDX2.Color3 __GammaCurve194;
            SlimDX2.Color3 __GammaCurve195;
            SlimDX2.Color3 __GammaCurve196;
            SlimDX2.Color3 __GammaCurve197;
            SlimDX2.Color3 __GammaCurve198;
            SlimDX2.Color3 __GammaCurve199;
            SlimDX2.Color3 __GammaCurve200;
            SlimDX2.Color3 __GammaCurve201;
            SlimDX2.Color3 __GammaCurve202;
            SlimDX2.Color3 __GammaCurve203;
            SlimDX2.Color3 __GammaCurve204;
            SlimDX2.Color3 __GammaCurve205;
            SlimDX2.Color3 __GammaCurve206;
            SlimDX2.Color3 __GammaCurve207;
            SlimDX2.Color3 __GammaCurve208;
            SlimDX2.Color3 __GammaCurve209;
            SlimDX2.Color3 __GammaCurve210;
            SlimDX2.Color3 __GammaCurve211;
            SlimDX2.Color3 __GammaCurve212;
            SlimDX2.Color3 __GammaCurve213;
            SlimDX2.Color3 __GammaCurve214;
            SlimDX2.Color3 __GammaCurve215;
            SlimDX2.Color3 __GammaCurve216;
            SlimDX2.Color3 __GammaCurve217;
            SlimDX2.Color3 __GammaCurve218;
            SlimDX2.Color3 __GammaCurve219;
            SlimDX2.Color3 __GammaCurve220;
            SlimDX2.Color3 __GammaCurve221;
            SlimDX2.Color3 __GammaCurve222;
            SlimDX2.Color3 __GammaCurve223;
            SlimDX2.Color3 __GammaCurve224;
            SlimDX2.Color3 __GammaCurve225;
            SlimDX2.Color3 __GammaCurve226;
            SlimDX2.Color3 __GammaCurve227;
            SlimDX2.Color3 __GammaCurve228;
            SlimDX2.Color3 __GammaCurve229;
            SlimDX2.Color3 __GammaCurve230;
            SlimDX2.Color3 __GammaCurve231;
            SlimDX2.Color3 __GammaCurve232;
            SlimDX2.Color3 __GammaCurve233;
            SlimDX2.Color3 __GammaCurve234;
            SlimDX2.Color3 __GammaCurve235;
            SlimDX2.Color3 __GammaCurve236;
            SlimDX2.Color3 __GammaCurve237;
            SlimDX2.Color3 __GammaCurve238;
            SlimDX2.Color3 __GammaCurve239;
            SlimDX2.Color3 __GammaCurve240;
            SlimDX2.Color3 __GammaCurve241;
            SlimDX2.Color3 __GammaCurve242;
            SlimDX2.Color3 __GammaCurve243;
            SlimDX2.Color3 __GammaCurve244;
            SlimDX2.Color3 __GammaCurve245;
            SlimDX2.Color3 __GammaCurve246;
            SlimDX2.Color3 __GammaCurve247;
            SlimDX2.Color3 __GammaCurve248;
            SlimDX2.Color3 __GammaCurve249;
            SlimDX2.Color3 __GammaCurve250;
            SlimDX2.Color3 __GammaCurve251;
            SlimDX2.Color3 __GammaCurve252;
            SlimDX2.Color3 __GammaCurve253;
            SlimDX2.Color3 __GammaCurve254;
            SlimDX2.Color3 __GammaCurve255;
            SlimDX2.Color3 __GammaCurve256;
            SlimDX2.Color3 __GammaCurve257;
            SlimDX2.Color3 __GammaCurve258;
            SlimDX2.Color3 __GammaCurve259;
            SlimDX2.Color3 __GammaCurve260;
            SlimDX2.Color3 __GammaCurve261;
            SlimDX2.Color3 __GammaCurve262;
            SlimDX2.Color3 __GammaCurve263;
            SlimDX2.Color3 __GammaCurve264;
            SlimDX2.Color3 __GammaCurve265;
            SlimDX2.Color3 __GammaCurve266;
            SlimDX2.Color3 __GammaCurve267;
            SlimDX2.Color3 __GammaCurve268;
            SlimDX2.Color3 __GammaCurve269;
            SlimDX2.Color3 __GammaCurve270;
            SlimDX2.Color3 __GammaCurve271;
            SlimDX2.Color3 __GammaCurve272;
            SlimDX2.Color3 __GammaCurve273;
            SlimDX2.Color3 __GammaCurve274;
            SlimDX2.Color3 __GammaCurve275;
            SlimDX2.Color3 __GammaCurve276;
            SlimDX2.Color3 __GammaCurve277;
            SlimDX2.Color3 __GammaCurve278;
            SlimDX2.Color3 __GammaCurve279;
            SlimDX2.Color3 __GammaCurve280;
            SlimDX2.Color3 __GammaCurve281;
            SlimDX2.Color3 __GammaCurve282;
            SlimDX2.Color3 __GammaCurve283;
            SlimDX2.Color3 __GammaCurve284;
            SlimDX2.Color3 __GammaCurve285;
            SlimDX2.Color3 __GammaCurve286;
            SlimDX2.Color3 __GammaCurve287;
            SlimDX2.Color3 __GammaCurve288;
            SlimDX2.Color3 __GammaCurve289;
            SlimDX2.Color3 __GammaCurve290;
            SlimDX2.Color3 __GammaCurve291;
            SlimDX2.Color3 __GammaCurve292;
            SlimDX2.Color3 __GammaCurve293;
            SlimDX2.Color3 __GammaCurve294;
            SlimDX2.Color3 __GammaCurve295;
            SlimDX2.Color3 __GammaCurve296;
            SlimDX2.Color3 __GammaCurve297;
            SlimDX2.Color3 __GammaCurve298;
            SlimDX2.Color3 __GammaCurve299;
            SlimDX2.Color3 __GammaCurve300;
            SlimDX2.Color3 __GammaCurve301;
            SlimDX2.Color3 __GammaCurve302;
            SlimDX2.Color3 __GammaCurve303;
            SlimDX2.Color3 __GammaCurve304;
            SlimDX2.Color3 __GammaCurve305;
            SlimDX2.Color3 __GammaCurve306;
            SlimDX2.Color3 __GammaCurve307;
            SlimDX2.Color3 __GammaCurve308;
            SlimDX2.Color3 __GammaCurve309;
            SlimDX2.Color3 __GammaCurve310;
            SlimDX2.Color3 __GammaCurve311;
            SlimDX2.Color3 __GammaCurve312;
            SlimDX2.Color3 __GammaCurve313;
            SlimDX2.Color3 __GammaCurve314;
            SlimDX2.Color3 __GammaCurve315;
            SlimDX2.Color3 __GammaCurve316;
            SlimDX2.Color3 __GammaCurve317;
            SlimDX2.Color3 __GammaCurve318;
            SlimDX2.Color3 __GammaCurve319;
            SlimDX2.Color3 __GammaCurve320;
            SlimDX2.Color3 __GammaCurve321;
            SlimDX2.Color3 __GammaCurve322;
            SlimDX2.Color3 __GammaCurve323;
            SlimDX2.Color3 __GammaCurve324;
            SlimDX2.Color3 __GammaCurve325;
            SlimDX2.Color3 __GammaCurve326;
            SlimDX2.Color3 __GammaCurve327;
            SlimDX2.Color3 __GammaCurve328;
            SlimDX2.Color3 __GammaCurve329;
            SlimDX2.Color3 __GammaCurve330;
            SlimDX2.Color3 __GammaCurve331;
            SlimDX2.Color3 __GammaCurve332;
            SlimDX2.Color3 __GammaCurve333;
            SlimDX2.Color3 __GammaCurve334;
            SlimDX2.Color3 __GammaCurve335;
            SlimDX2.Color3 __GammaCurve336;
            SlimDX2.Color3 __GammaCurve337;
            SlimDX2.Color3 __GammaCurve338;
            SlimDX2.Color3 __GammaCurve339;
            SlimDX2.Color3 __GammaCurve340;
            SlimDX2.Color3 __GammaCurve341;
            SlimDX2.Color3 __GammaCurve342;
            SlimDX2.Color3 __GammaCurve343;
            SlimDX2.Color3 __GammaCurve344;
            SlimDX2.Color3 __GammaCurve345;
            SlimDX2.Color3 __GammaCurve346;
            SlimDX2.Color3 __GammaCurve347;
            SlimDX2.Color3 __GammaCurve348;
            SlimDX2.Color3 __GammaCurve349;
            SlimDX2.Color3 __GammaCurve350;
            SlimDX2.Color3 __GammaCurve351;
            SlimDX2.Color3 __GammaCurve352;
            SlimDX2.Color3 __GammaCurve353;
            SlimDX2.Color3 __GammaCurve354;
            SlimDX2.Color3 __GammaCurve355;
            SlimDX2.Color3 __GammaCurve356;
            SlimDX2.Color3 __GammaCurve357;
            SlimDX2.Color3 __GammaCurve358;
            SlimDX2.Color3 __GammaCurve359;
            SlimDX2.Color3 __GammaCurve360;
            SlimDX2.Color3 __GammaCurve361;
            SlimDX2.Color3 __GammaCurve362;
            SlimDX2.Color3 __GammaCurve363;
            SlimDX2.Color3 __GammaCurve364;
            SlimDX2.Color3 __GammaCurve365;
            SlimDX2.Color3 __GammaCurve366;
            SlimDX2.Color3 __GammaCurve367;
            SlimDX2.Color3 __GammaCurve368;
            SlimDX2.Color3 __GammaCurve369;
            SlimDX2.Color3 __GammaCurve370;
            SlimDX2.Color3 __GammaCurve371;
            SlimDX2.Color3 __GammaCurve372;
            SlimDX2.Color3 __GammaCurve373;
            SlimDX2.Color3 __GammaCurve374;
            SlimDX2.Color3 __GammaCurve375;
            SlimDX2.Color3 __GammaCurve376;
            SlimDX2.Color3 __GammaCurve377;
            SlimDX2.Color3 __GammaCurve378;
            SlimDX2.Color3 __GammaCurve379;
            SlimDX2.Color3 __GammaCurve380;
            SlimDX2.Color3 __GammaCurve381;
            SlimDX2.Color3 __GammaCurve382;
            SlimDX2.Color3 __GammaCurve383;
            SlimDX2.Color3 __GammaCurve384;
            SlimDX2.Color3 __GammaCurve385;
            SlimDX2.Color3 __GammaCurve386;
            SlimDX2.Color3 __GammaCurve387;
            SlimDX2.Color3 __GammaCurve388;
            SlimDX2.Color3 __GammaCurve389;
            SlimDX2.Color3 __GammaCurve390;
            SlimDX2.Color3 __GammaCurve391;
            SlimDX2.Color3 __GammaCurve392;
            SlimDX2.Color3 __GammaCurve393;
            SlimDX2.Color3 __GammaCurve394;
            SlimDX2.Color3 __GammaCurve395;
            SlimDX2.Color3 __GammaCurve396;
            SlimDX2.Color3 __GammaCurve397;
            SlimDX2.Color3 __GammaCurve398;
            SlimDX2.Color3 __GammaCurve399;
            SlimDX2.Color3 __GammaCurve400;
            SlimDX2.Color3 __GammaCurve401;
            SlimDX2.Color3 __GammaCurve402;
            SlimDX2.Color3 __GammaCurve403;
            SlimDX2.Color3 __GammaCurve404;
            SlimDX2.Color3 __GammaCurve405;
            SlimDX2.Color3 __GammaCurve406;
            SlimDX2.Color3 __GammaCurve407;
            SlimDX2.Color3 __GammaCurve408;
            SlimDX2.Color3 __GammaCurve409;
            SlimDX2.Color3 __GammaCurve410;
            SlimDX2.Color3 __GammaCurve411;
            SlimDX2.Color3 __GammaCurve412;
            SlimDX2.Color3 __GammaCurve413;
            SlimDX2.Color3 __GammaCurve414;
            SlimDX2.Color3 __GammaCurve415;
            SlimDX2.Color3 __GammaCurve416;
            SlimDX2.Color3 __GammaCurve417;
            SlimDX2.Color3 __GammaCurve418;
            SlimDX2.Color3 __GammaCurve419;
            SlimDX2.Color3 __GammaCurve420;
            SlimDX2.Color3 __GammaCurve421;
            SlimDX2.Color3 __GammaCurve422;
            SlimDX2.Color3 __GammaCurve423;
            SlimDX2.Color3 __GammaCurve424;
            SlimDX2.Color3 __GammaCurve425;
            SlimDX2.Color3 __GammaCurve426;
            SlimDX2.Color3 __GammaCurve427;
            SlimDX2.Color3 __GammaCurve428;
            SlimDX2.Color3 __GammaCurve429;
            SlimDX2.Color3 __GammaCurve430;
            SlimDX2.Color3 __GammaCurve431;
            SlimDX2.Color3 __GammaCurve432;
            SlimDX2.Color3 __GammaCurve433;
            SlimDX2.Color3 __GammaCurve434;
            SlimDX2.Color3 __GammaCurve435;
            SlimDX2.Color3 __GammaCurve436;
            SlimDX2.Color3 __GammaCurve437;
            SlimDX2.Color3 __GammaCurve438;
            SlimDX2.Color3 __GammaCurve439;
            SlimDX2.Color3 __GammaCurve440;
            SlimDX2.Color3 __GammaCurve441;
            SlimDX2.Color3 __GammaCurve442;
            SlimDX2.Color3 __GammaCurve443;
            SlimDX2.Color3 __GammaCurve444;
            SlimDX2.Color3 __GammaCurve445;
            SlimDX2.Color3 __GammaCurve446;
            SlimDX2.Color3 __GammaCurve447;
            SlimDX2.Color3 __GammaCurve448;
            SlimDX2.Color3 __GammaCurve449;
            SlimDX2.Color3 __GammaCurve450;
            SlimDX2.Color3 __GammaCurve451;
            SlimDX2.Color3 __GammaCurve452;
            SlimDX2.Color3 __GammaCurve453;
            SlimDX2.Color3 __GammaCurve454;
            SlimDX2.Color3 __GammaCurve455;
            SlimDX2.Color3 __GammaCurve456;
            SlimDX2.Color3 __GammaCurve457;
            SlimDX2.Color3 __GammaCurve458;
            SlimDX2.Color3 __GammaCurve459;
            SlimDX2.Color3 __GammaCurve460;
            SlimDX2.Color3 __GammaCurve461;
            SlimDX2.Color3 __GammaCurve462;
            SlimDX2.Color3 __GammaCurve463;
            SlimDX2.Color3 __GammaCurve464;
            SlimDX2.Color3 __GammaCurve465;
            SlimDX2.Color3 __GammaCurve466;
            SlimDX2.Color3 __GammaCurve467;
            SlimDX2.Color3 __GammaCurve468;
            SlimDX2.Color3 __GammaCurve469;
            SlimDX2.Color3 __GammaCurve470;
            SlimDX2.Color3 __GammaCurve471;
            SlimDX2.Color3 __GammaCurve472;
            SlimDX2.Color3 __GammaCurve473;
            SlimDX2.Color3 __GammaCurve474;
            SlimDX2.Color3 __GammaCurve475;
            SlimDX2.Color3 __GammaCurve476;
            SlimDX2.Color3 __GammaCurve477;
            SlimDX2.Color3 __GammaCurve478;
            SlimDX2.Color3 __GammaCurve479;
            SlimDX2.Color3 __GammaCurve480;
            SlimDX2.Color3 __GammaCurve481;
            SlimDX2.Color3 __GammaCurve482;
            SlimDX2.Color3 __GammaCurve483;
            SlimDX2.Color3 __GammaCurve484;
            SlimDX2.Color3 __GammaCurve485;
            SlimDX2.Color3 __GammaCurve486;
            SlimDX2.Color3 __GammaCurve487;
            SlimDX2.Color3 __GammaCurve488;
            SlimDX2.Color3 __GammaCurve489;
            SlimDX2.Color3 __GammaCurve490;
            SlimDX2.Color3 __GammaCurve491;
            SlimDX2.Color3 __GammaCurve492;
            SlimDX2.Color3 __GammaCurve493;
            SlimDX2.Color3 __GammaCurve494;
            SlimDX2.Color3 __GammaCurve495;
            SlimDX2.Color3 __GammaCurve496;
            SlimDX2.Color3 __GammaCurve497;
            SlimDX2.Color3 __GammaCurve498;
            SlimDX2.Color3 __GammaCurve499;
            SlimDX2.Color3 __GammaCurve500;
            SlimDX2.Color3 __GammaCurve501;
            SlimDX2.Color3 __GammaCurve502;
            SlimDX2.Color3 __GammaCurve503;
            SlimDX2.Color3 __GammaCurve504;
            SlimDX2.Color3 __GammaCurve505;
            SlimDX2.Color3 __GammaCurve506;
            SlimDX2.Color3 __GammaCurve507;
            SlimDX2.Color3 __GammaCurve508;
            SlimDX2.Color3 __GammaCurve509;
            SlimDX2.Color3 __GammaCurve510;
            SlimDX2.Color3 __GammaCurve511;
            SlimDX2.Color3 __GammaCurve512;
            SlimDX2.Color3 __GammaCurve513;
            SlimDX2.Color3 __GammaCurve514;
            SlimDX2.Color3 __GammaCurve515;
            SlimDX2.Color3 __GammaCurve516;
            SlimDX2.Color3 __GammaCurve517;
            SlimDX2.Color3 __GammaCurve518;
            SlimDX2.Color3 __GammaCurve519;
            SlimDX2.Color3 __GammaCurve520;
            SlimDX2.Color3 __GammaCurve521;
            SlimDX2.Color3 __GammaCurve522;
            SlimDX2.Color3 __GammaCurve523;
            SlimDX2.Color3 __GammaCurve524;
            SlimDX2.Color3 __GammaCurve525;
            SlimDX2.Color3 __GammaCurve526;
            SlimDX2.Color3 __GammaCurve527;
            SlimDX2.Color3 __GammaCurve528;
            SlimDX2.Color3 __GammaCurve529;
            SlimDX2.Color3 __GammaCurve530;
            SlimDX2.Color3 __GammaCurve531;
            SlimDX2.Color3 __GammaCurve532;
            SlimDX2.Color3 __GammaCurve533;
            SlimDX2.Color3 __GammaCurve534;
            SlimDX2.Color3 __GammaCurve535;
            SlimDX2.Color3 __GammaCurve536;
            SlimDX2.Color3 __GammaCurve537;
            SlimDX2.Color3 __GammaCurve538;
            SlimDX2.Color3 __GammaCurve539;
            SlimDX2.Color3 __GammaCurve540;
            SlimDX2.Color3 __GammaCurve541;
            SlimDX2.Color3 __GammaCurve542;
            SlimDX2.Color3 __GammaCurve543;
            SlimDX2.Color3 __GammaCurve544;
            SlimDX2.Color3 __GammaCurve545;
            SlimDX2.Color3 __GammaCurve546;
            SlimDX2.Color3 __GammaCurve547;
            SlimDX2.Color3 __GammaCurve548;
            SlimDX2.Color3 __GammaCurve549;
            SlimDX2.Color3 __GammaCurve550;
            SlimDX2.Color3 __GammaCurve551;
            SlimDX2.Color3 __GammaCurve552;
            SlimDX2.Color3 __GammaCurve553;
            SlimDX2.Color3 __GammaCurve554;
            SlimDX2.Color3 __GammaCurve555;
            SlimDX2.Color3 __GammaCurve556;
            SlimDX2.Color3 __GammaCurve557;
            SlimDX2.Color3 __GammaCurve558;
            SlimDX2.Color3 __GammaCurve559;
            SlimDX2.Color3 __GammaCurve560;
            SlimDX2.Color3 __GammaCurve561;
            SlimDX2.Color3 __GammaCurve562;
            SlimDX2.Color3 __GammaCurve563;
            SlimDX2.Color3 __GammaCurve564;
            SlimDX2.Color3 __GammaCurve565;
            SlimDX2.Color3 __GammaCurve566;
            SlimDX2.Color3 __GammaCurve567;
            SlimDX2.Color3 __GammaCurve568;
            SlimDX2.Color3 __GammaCurve569;
            SlimDX2.Color3 __GammaCurve570;
            SlimDX2.Color3 __GammaCurve571;
            SlimDX2.Color3 __GammaCurve572;
            SlimDX2.Color3 __GammaCurve573;
            SlimDX2.Color3 __GammaCurve574;
            SlimDX2.Color3 __GammaCurve575;
            SlimDX2.Color3 __GammaCurve576;
            SlimDX2.Color3 __GammaCurve577;
            SlimDX2.Color3 __GammaCurve578;
            SlimDX2.Color3 __GammaCurve579;
            SlimDX2.Color3 __GammaCurve580;
            SlimDX2.Color3 __GammaCurve581;
            SlimDX2.Color3 __GammaCurve582;
            SlimDX2.Color3 __GammaCurve583;
            SlimDX2.Color3 __GammaCurve584;
            SlimDX2.Color3 __GammaCurve585;
            SlimDX2.Color3 __GammaCurve586;
            SlimDX2.Color3 __GammaCurve587;
            SlimDX2.Color3 __GammaCurve588;
            SlimDX2.Color3 __GammaCurve589;
            SlimDX2.Color3 __GammaCurve590;
            SlimDX2.Color3 __GammaCurve591;
            SlimDX2.Color3 __GammaCurve592;
            SlimDX2.Color3 __GammaCurve593;
            SlimDX2.Color3 __GammaCurve594;
            SlimDX2.Color3 __GammaCurve595;
            SlimDX2.Color3 __GammaCurve596;
            SlimDX2.Color3 __GammaCurve597;
            SlimDX2.Color3 __GammaCurve598;
            SlimDX2.Color3 __GammaCurve599;
            SlimDX2.Color3 __GammaCurve600;
            SlimDX2.Color3 __GammaCurve601;
            SlimDX2.Color3 __GammaCurve602;
            SlimDX2.Color3 __GammaCurve603;
            SlimDX2.Color3 __GammaCurve604;
            SlimDX2.Color3 __GammaCurve605;
            SlimDX2.Color3 __GammaCurve606;
            SlimDX2.Color3 __GammaCurve607;
            SlimDX2.Color3 __GammaCurve608;
            SlimDX2.Color3 __GammaCurve609;
            SlimDX2.Color3 __GammaCurve610;
            SlimDX2.Color3 __GammaCurve611;
            SlimDX2.Color3 __GammaCurve612;
            SlimDX2.Color3 __GammaCurve613;
            SlimDX2.Color3 __GammaCurve614;
            SlimDX2.Color3 __GammaCurve615;
            SlimDX2.Color3 __GammaCurve616;
            SlimDX2.Color3 __GammaCurve617;
            SlimDX2.Color3 __GammaCurve618;
            SlimDX2.Color3 __GammaCurve619;
            SlimDX2.Color3 __GammaCurve620;
            SlimDX2.Color3 __GammaCurve621;
            SlimDX2.Color3 __GammaCurve622;
            SlimDX2.Color3 __GammaCurve623;
            SlimDX2.Color3 __GammaCurve624;
            SlimDX2.Color3 __GammaCurve625;
            SlimDX2.Color3 __GammaCurve626;
            SlimDX2.Color3 __GammaCurve627;
            SlimDX2.Color3 __GammaCurve628;
            SlimDX2.Color3 __GammaCurve629;
            SlimDX2.Color3 __GammaCurve630;
            SlimDX2.Color3 __GammaCurve631;
            SlimDX2.Color3 __GammaCurve632;
            SlimDX2.Color3 __GammaCurve633;
            SlimDX2.Color3 __GammaCurve634;
            SlimDX2.Color3 __GammaCurve635;
            SlimDX2.Color3 __GammaCurve636;
            SlimDX2.Color3 __GammaCurve637;
            SlimDX2.Color3 __GammaCurve638;
            SlimDX2.Color3 __GammaCurve639;
            SlimDX2.Color3 __GammaCurve640;
            SlimDX2.Color3 __GammaCurve641;
            SlimDX2.Color3 __GammaCurve642;
            SlimDX2.Color3 __GammaCurve643;
            SlimDX2.Color3 __GammaCurve644;
            SlimDX2.Color3 __GammaCurve645;
            SlimDX2.Color3 __GammaCurve646;
            SlimDX2.Color3 __GammaCurve647;
            SlimDX2.Color3 __GammaCurve648;
            SlimDX2.Color3 __GammaCurve649;
            SlimDX2.Color3 __GammaCurve650;
            SlimDX2.Color3 __GammaCurve651;
            SlimDX2.Color3 __GammaCurve652;
            SlimDX2.Color3 __GammaCurve653;
            SlimDX2.Color3 __GammaCurve654;
            SlimDX2.Color3 __GammaCurve655;
            SlimDX2.Color3 __GammaCurve656;
            SlimDX2.Color3 __GammaCurve657;
            SlimDX2.Color3 __GammaCurve658;
            SlimDX2.Color3 __GammaCurve659;
            SlimDX2.Color3 __GammaCurve660;
            SlimDX2.Color3 __GammaCurve661;
            SlimDX2.Color3 __GammaCurve662;
            SlimDX2.Color3 __GammaCurve663;
            SlimDX2.Color3 __GammaCurve664;
            SlimDX2.Color3 __GammaCurve665;
            SlimDX2.Color3 __GammaCurve666;
            SlimDX2.Color3 __GammaCurve667;
            SlimDX2.Color3 __GammaCurve668;
            SlimDX2.Color3 __GammaCurve669;
            SlimDX2.Color3 __GammaCurve670;
            SlimDX2.Color3 __GammaCurve671;
            SlimDX2.Color3 __GammaCurve672;
            SlimDX2.Color3 __GammaCurve673;
            SlimDX2.Color3 __GammaCurve674;
            SlimDX2.Color3 __GammaCurve675;
            SlimDX2.Color3 __GammaCurve676;
            SlimDX2.Color3 __GammaCurve677;
            SlimDX2.Color3 __GammaCurve678;
            SlimDX2.Color3 __GammaCurve679;
            SlimDX2.Color3 __GammaCurve680;
            SlimDX2.Color3 __GammaCurve681;
            SlimDX2.Color3 __GammaCurve682;
            SlimDX2.Color3 __GammaCurve683;
            SlimDX2.Color3 __GammaCurve684;
            SlimDX2.Color3 __GammaCurve685;
            SlimDX2.Color3 __GammaCurve686;
            SlimDX2.Color3 __GammaCurve687;
            SlimDX2.Color3 __GammaCurve688;
            SlimDX2.Color3 __GammaCurve689;
            SlimDX2.Color3 __GammaCurve690;
            SlimDX2.Color3 __GammaCurve691;
            SlimDX2.Color3 __GammaCurve692;
            SlimDX2.Color3 __GammaCurve693;
            SlimDX2.Color3 __GammaCurve694;
            SlimDX2.Color3 __GammaCurve695;
            SlimDX2.Color3 __GammaCurve696;
            SlimDX2.Color3 __GammaCurve697;
            SlimDX2.Color3 __GammaCurve698;
            SlimDX2.Color3 __GammaCurve699;
            SlimDX2.Color3 __GammaCurve700;
            SlimDX2.Color3 __GammaCurve701;
            SlimDX2.Color3 __GammaCurve702;
            SlimDX2.Color3 __GammaCurve703;
            SlimDX2.Color3 __GammaCurve704;
            SlimDX2.Color3 __GammaCurve705;
            SlimDX2.Color3 __GammaCurve706;
            SlimDX2.Color3 __GammaCurve707;
            SlimDX2.Color3 __GammaCurve708;
            SlimDX2.Color3 __GammaCurve709;
            SlimDX2.Color3 __GammaCurve710;
            SlimDX2.Color3 __GammaCurve711;
            SlimDX2.Color3 __GammaCurve712;
            SlimDX2.Color3 __GammaCurve713;
            SlimDX2.Color3 __GammaCurve714;
            SlimDX2.Color3 __GammaCurve715;
            SlimDX2.Color3 __GammaCurve716;
            SlimDX2.Color3 __GammaCurve717;
            SlimDX2.Color3 __GammaCurve718;
            SlimDX2.Color3 __GammaCurve719;
            SlimDX2.Color3 __GammaCurve720;
            SlimDX2.Color3 __GammaCurve721;
            SlimDX2.Color3 __GammaCurve722;
            SlimDX2.Color3 __GammaCurve723;
            SlimDX2.Color3 __GammaCurve724;
            SlimDX2.Color3 __GammaCurve725;
            SlimDX2.Color3 __GammaCurve726;
            SlimDX2.Color3 __GammaCurve727;
            SlimDX2.Color3 __GammaCurve728;
            SlimDX2.Color3 __GammaCurve729;
            SlimDX2.Color3 __GammaCurve730;
            SlimDX2.Color3 __GammaCurve731;
            SlimDX2.Color3 __GammaCurve732;
            SlimDX2.Color3 __GammaCurve733;
            SlimDX2.Color3 __GammaCurve734;
            SlimDX2.Color3 __GammaCurve735;
            SlimDX2.Color3 __GammaCurve736;
            SlimDX2.Color3 __GammaCurve737;
            SlimDX2.Color3 __GammaCurve738;
            SlimDX2.Color3 __GammaCurve739;
            SlimDX2.Color3 __GammaCurve740;
            SlimDX2.Color3 __GammaCurve741;
            SlimDX2.Color3 __GammaCurve742;
            SlimDX2.Color3 __GammaCurve743;
            SlimDX2.Color3 __GammaCurve744;
            SlimDX2.Color3 __GammaCurve745;
            SlimDX2.Color3 __GammaCurve746;
            SlimDX2.Color3 __GammaCurve747;
            SlimDX2.Color3 __GammaCurve748;
            SlimDX2.Color3 __GammaCurve749;
            SlimDX2.Color3 __GammaCurve750;
            SlimDX2.Color3 __GammaCurve751;
            SlimDX2.Color3 __GammaCurve752;
            SlimDX2.Color3 __GammaCurve753;
            SlimDX2.Color3 __GammaCurve754;
            SlimDX2.Color3 __GammaCurve755;
            SlimDX2.Color3 __GammaCurve756;
            SlimDX2.Color3 __GammaCurve757;
            SlimDX2.Color3 __GammaCurve758;
            SlimDX2.Color3 __GammaCurve759;
            SlimDX2.Color3 __GammaCurve760;
            SlimDX2.Color3 __GammaCurve761;
            SlimDX2.Color3 __GammaCurve762;
            SlimDX2.Color3 __GammaCurve763;
            SlimDX2.Color3 __GammaCurve764;
            SlimDX2.Color3 __GammaCurve765;
            SlimDX2.Color3 __GammaCurve766;
            SlimDX2.Color3 __GammaCurve767;
            SlimDX2.Color3 __GammaCurve768;
            SlimDX2.Color3 __GammaCurve769;
            SlimDX2.Color3 __GammaCurve770;
            SlimDX2.Color3 __GammaCurve771;
            SlimDX2.Color3 __GammaCurve772;
            SlimDX2.Color3 __GammaCurve773;
            SlimDX2.Color3 __GammaCurve774;
            SlimDX2.Color3 __GammaCurve775;
            SlimDX2.Color3 __GammaCurve776;
            SlimDX2.Color3 __GammaCurve777;
            SlimDX2.Color3 __GammaCurve778;
            SlimDX2.Color3 __GammaCurve779;
            SlimDX2.Color3 __GammaCurve780;
            SlimDX2.Color3 __GammaCurve781;
            SlimDX2.Color3 __GammaCurve782;
            SlimDX2.Color3 __GammaCurve783;
            SlimDX2.Color3 __GammaCurve784;
            SlimDX2.Color3 __GammaCurve785;
            SlimDX2.Color3 __GammaCurve786;
            SlimDX2.Color3 __GammaCurve787;
            SlimDX2.Color3 __GammaCurve788;
            SlimDX2.Color3 __GammaCurve789;
            SlimDX2.Color3 __GammaCurve790;
            SlimDX2.Color3 __GammaCurve791;
            SlimDX2.Color3 __GammaCurve792;
            SlimDX2.Color3 __GammaCurve793;
            SlimDX2.Color3 __GammaCurve794;
            SlimDX2.Color3 __GammaCurve795;
            SlimDX2.Color3 __GammaCurve796;
            SlimDX2.Color3 __GammaCurve797;
            SlimDX2.Color3 __GammaCurve798;
            SlimDX2.Color3 __GammaCurve799;
            SlimDX2.Color3 __GammaCurve800;
            SlimDX2.Color3 __GammaCurve801;
            SlimDX2.Color3 __GammaCurve802;
            SlimDX2.Color3 __GammaCurve803;
            SlimDX2.Color3 __GammaCurve804;
            SlimDX2.Color3 __GammaCurve805;
            SlimDX2.Color3 __GammaCurve806;
            SlimDX2.Color3 __GammaCurve807;
            SlimDX2.Color3 __GammaCurve808;
            SlimDX2.Color3 __GammaCurve809;
            SlimDX2.Color3 __GammaCurve810;
            SlimDX2.Color3 __GammaCurve811;
            SlimDX2.Color3 __GammaCurve812;
            SlimDX2.Color3 __GammaCurve813;
            SlimDX2.Color3 __GammaCurve814;
            SlimDX2.Color3 __GammaCurve815;
            SlimDX2.Color3 __GammaCurve816;
            SlimDX2.Color3 __GammaCurve817;
            SlimDX2.Color3 __GammaCurve818;
            SlimDX2.Color3 __GammaCurve819;
            SlimDX2.Color3 __GammaCurve820;
            SlimDX2.Color3 __GammaCurve821;
            SlimDX2.Color3 __GammaCurve822;
            SlimDX2.Color3 __GammaCurve823;
            SlimDX2.Color3 __GammaCurve824;
            SlimDX2.Color3 __GammaCurve825;
            SlimDX2.Color3 __GammaCurve826;
            SlimDX2.Color3 __GammaCurve827;
            SlimDX2.Color3 __GammaCurve828;
            SlimDX2.Color3 __GammaCurve829;
            SlimDX2.Color3 __GammaCurve830;
            SlimDX2.Color3 __GammaCurve831;
            SlimDX2.Color3 __GammaCurve832;
            SlimDX2.Color3 __GammaCurve833;
            SlimDX2.Color3 __GammaCurve834;
            SlimDX2.Color3 __GammaCurve835;
            SlimDX2.Color3 __GammaCurve836;
            SlimDX2.Color3 __GammaCurve837;
            SlimDX2.Color3 __GammaCurve838;
            SlimDX2.Color3 __GammaCurve839;
            SlimDX2.Color3 __GammaCurve840;
            SlimDX2.Color3 __GammaCurve841;
            SlimDX2.Color3 __GammaCurve842;
            SlimDX2.Color3 __GammaCurve843;
            SlimDX2.Color3 __GammaCurve844;
            SlimDX2.Color3 __GammaCurve845;
            SlimDX2.Color3 __GammaCurve846;
            SlimDX2.Color3 __GammaCurve847;
            SlimDX2.Color3 __GammaCurve848;
            SlimDX2.Color3 __GammaCurve849;
            SlimDX2.Color3 __GammaCurve850;
            SlimDX2.Color3 __GammaCurve851;
            SlimDX2.Color3 __GammaCurve852;
            SlimDX2.Color3 __GammaCurve853;
            SlimDX2.Color3 __GammaCurve854;
            SlimDX2.Color3 __GammaCurve855;
            SlimDX2.Color3 __GammaCurve856;
            SlimDX2.Color3 __GammaCurve857;
            SlimDX2.Color3 __GammaCurve858;
            SlimDX2.Color3 __GammaCurve859;
            SlimDX2.Color3 __GammaCurve860;
            SlimDX2.Color3 __GammaCurve861;
            SlimDX2.Color3 __GammaCurve862;
            SlimDX2.Color3 __GammaCurve863;
            SlimDX2.Color3 __GammaCurve864;
            SlimDX2.Color3 __GammaCurve865;
            SlimDX2.Color3 __GammaCurve866;
            SlimDX2.Color3 __GammaCurve867;
            SlimDX2.Color3 __GammaCurve868;
            SlimDX2.Color3 __GammaCurve869;
            SlimDX2.Color3 __GammaCurve870;
            SlimDX2.Color3 __GammaCurve871;
            SlimDX2.Color3 __GammaCurve872;
            SlimDX2.Color3 __GammaCurve873;
            SlimDX2.Color3 __GammaCurve874;
            SlimDX2.Color3 __GammaCurve875;
            SlimDX2.Color3 __GammaCurve876;
            SlimDX2.Color3 __GammaCurve877;
            SlimDX2.Color3 __GammaCurve878;
            SlimDX2.Color3 __GammaCurve879;
            SlimDX2.Color3 __GammaCurve880;
            SlimDX2.Color3 __GammaCurve881;
            SlimDX2.Color3 __GammaCurve882;
            SlimDX2.Color3 __GammaCurve883;
            SlimDX2.Color3 __GammaCurve884;
            SlimDX2.Color3 __GammaCurve885;
            SlimDX2.Color3 __GammaCurve886;
            SlimDX2.Color3 __GammaCurve887;
            SlimDX2.Color3 __GammaCurve888;
            SlimDX2.Color3 __GammaCurve889;
            SlimDX2.Color3 __GammaCurve890;
            SlimDX2.Color3 __GammaCurve891;
            SlimDX2.Color3 __GammaCurve892;
            SlimDX2.Color3 __GammaCurve893;
            SlimDX2.Color3 __GammaCurve894;
            SlimDX2.Color3 __GammaCurve895;
            SlimDX2.Color3 __GammaCurve896;
            SlimDX2.Color3 __GammaCurve897;
            SlimDX2.Color3 __GammaCurve898;
            SlimDX2.Color3 __GammaCurve899;
            SlimDX2.Color3 __GammaCurve900;
            SlimDX2.Color3 __GammaCurve901;
            SlimDX2.Color3 __GammaCurve902;
            SlimDX2.Color3 __GammaCurve903;
            SlimDX2.Color3 __GammaCurve904;
            SlimDX2.Color3 __GammaCurve905;
            SlimDX2.Color3 __GammaCurve906;
            SlimDX2.Color3 __GammaCurve907;
            SlimDX2.Color3 __GammaCurve908;
            SlimDX2.Color3 __GammaCurve909;
            SlimDX2.Color3 __GammaCurve910;
            SlimDX2.Color3 __GammaCurve911;
            SlimDX2.Color3 __GammaCurve912;
            SlimDX2.Color3 __GammaCurve913;
            SlimDX2.Color3 __GammaCurve914;
            SlimDX2.Color3 __GammaCurve915;
            SlimDX2.Color3 __GammaCurve916;
            SlimDX2.Color3 __GammaCurve917;
            SlimDX2.Color3 __GammaCurve918;
            SlimDX2.Color3 __GammaCurve919;
            SlimDX2.Color3 __GammaCurve920;
            SlimDX2.Color3 __GammaCurve921;
            SlimDX2.Color3 __GammaCurve922;
            SlimDX2.Color3 __GammaCurve923;
            SlimDX2.Color3 __GammaCurve924;
            SlimDX2.Color3 __GammaCurve925;
            SlimDX2.Color3 __GammaCurve926;
            SlimDX2.Color3 __GammaCurve927;
            SlimDX2.Color3 __GammaCurve928;
            SlimDX2.Color3 __GammaCurve929;
            SlimDX2.Color3 __GammaCurve930;
            SlimDX2.Color3 __GammaCurve931;
            SlimDX2.Color3 __GammaCurve932;
            SlimDX2.Color3 __GammaCurve933;
            SlimDX2.Color3 __GammaCurve934;
            SlimDX2.Color3 __GammaCurve935;
            SlimDX2.Color3 __GammaCurve936;
            SlimDX2.Color3 __GammaCurve937;
            SlimDX2.Color3 __GammaCurve938;
            SlimDX2.Color3 __GammaCurve939;
            SlimDX2.Color3 __GammaCurve940;
            SlimDX2.Color3 __GammaCurve941;
            SlimDX2.Color3 __GammaCurve942;
            SlimDX2.Color3 __GammaCurve943;
            SlimDX2.Color3 __GammaCurve944;
            SlimDX2.Color3 __GammaCurve945;
            SlimDX2.Color3 __GammaCurve946;
            SlimDX2.Color3 __GammaCurve947;
            SlimDX2.Color3 __GammaCurve948;
            SlimDX2.Color3 __GammaCurve949;
            SlimDX2.Color3 __GammaCurve950;
            SlimDX2.Color3 __GammaCurve951;
            SlimDX2.Color3 __GammaCurve952;
            SlimDX2.Color3 __GammaCurve953;
            SlimDX2.Color3 __GammaCurve954;
            SlimDX2.Color3 __GammaCurve955;
            SlimDX2.Color3 __GammaCurve956;
            SlimDX2.Color3 __GammaCurve957;
            SlimDX2.Color3 __GammaCurve958;
            SlimDX2.Color3 __GammaCurve959;
            SlimDX2.Color3 __GammaCurve960;
            SlimDX2.Color3 __GammaCurve961;
            SlimDX2.Color3 __GammaCurve962;
            SlimDX2.Color3 __GammaCurve963;
            SlimDX2.Color3 __GammaCurve964;
            SlimDX2.Color3 __GammaCurve965;
            SlimDX2.Color3 __GammaCurve966;
            SlimDX2.Color3 __GammaCurve967;
            SlimDX2.Color3 __GammaCurve968;
            SlimDX2.Color3 __GammaCurve969;
            SlimDX2.Color3 __GammaCurve970;
            SlimDX2.Color3 __GammaCurve971;
            SlimDX2.Color3 __GammaCurve972;
            SlimDX2.Color3 __GammaCurve973;
            SlimDX2.Color3 __GammaCurve974;
            SlimDX2.Color3 __GammaCurve975;
            SlimDX2.Color3 __GammaCurve976;
            SlimDX2.Color3 __GammaCurve977;
            SlimDX2.Color3 __GammaCurve978;
            SlimDX2.Color3 __GammaCurve979;
            SlimDX2.Color3 __GammaCurve980;
            SlimDX2.Color3 __GammaCurve981;
            SlimDX2.Color3 __GammaCurve982;
            SlimDX2.Color3 __GammaCurve983;
            SlimDX2.Color3 __GammaCurve984;
            SlimDX2.Color3 __GammaCurve985;
            SlimDX2.Color3 __GammaCurve986;
            SlimDX2.Color3 __GammaCurve987;
            SlimDX2.Color3 __GammaCurve988;
            SlimDX2.Color3 __GammaCurve989;
            SlimDX2.Color3 __GammaCurve990;
            SlimDX2.Color3 __GammaCurve991;
            SlimDX2.Color3 __GammaCurve992;
            SlimDX2.Color3 __GammaCurve993;
            SlimDX2.Color3 __GammaCurve994;
            SlimDX2.Color3 __GammaCurve995;
            SlimDX2.Color3 __GammaCurve996;
            SlimDX2.Color3 __GammaCurve997;
            SlimDX2.Color3 __GammaCurve998;
            SlimDX2.Color3 __GammaCurve999;
            SlimDX2.Color3 __GammaCurve1000;
            SlimDX2.Color3 __GammaCurve1001;
            SlimDX2.Color3 __GammaCurve1002;
            SlimDX2.Color3 __GammaCurve1003;
            SlimDX2.Color3 __GammaCurve1004;
            SlimDX2.Color3 __GammaCurve1005;
            SlimDX2.Color3 __GammaCurve1006;
            SlimDX2.Color3 __GammaCurve1007;
            SlimDX2.Color3 __GammaCurve1008;
            SlimDX2.Color3 __GammaCurve1009;
            SlimDX2.Color3 __GammaCurve1010;
            SlimDX2.Color3 __GammaCurve1011;
            SlimDX2.Color3 __GammaCurve1012;
            SlimDX2.Color3 __GammaCurve1013;
            SlimDX2.Color3 __GammaCurve1014;
            SlimDX2.Color3 __GammaCurve1015;
            SlimDX2.Color3 __GammaCurve1016;
            SlimDX2.Color3 __GammaCurve1017;
            SlimDX2.Color3 __GammaCurve1018;
            SlimDX2.Color3 __GammaCurve1019;
            SlimDX2.Color3 __GammaCurve1020;
            SlimDX2.Color3 __GammaCurve1021;
            SlimDX2.Color3 __GammaCurve1022;
            SlimDX2.Color3 __GammaCurve1023;
            SlimDX2.Color3 __GammaCurve1024;
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this.Scale = @ref.Scale;
            this.Offset = @ref.Offset;
            fixed (void* __to = &this.GammaCurve[0]) fixed (void* __from = &@ref.GammaCurve) SlimDX2.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 1025*sizeof ( SlimDX2.Color3));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref.Scale = this.Scale;
            @ref.Offset = this.Offset;
            fixed (void* __to = &@ref.GammaCurve) fixed (void* __from = &this.GammaCurve[0]) SlimDX2.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 1025*sizeof ( SlimDX2.Color3));
		
		}
    }
    
    /// <summary>	
    /// The DXGI_GAMMA_CONTROL_CAPABILIITES structure describes gamma capabilities. 	
    /// </summary>	
    /// <unmanaged>DXGI_GAMMA_CONTROL_CAPABILITIES</unmanaged>
    public  partial struct GammaControlCapabilities {	
        
        /// <summary>	
        /// [out] A BOOL value that indicates whether the device supports scale and offset. TRUE indicates that the device supports scale and offset; FALSE indicates that the device does not support scale and offset. 	
        /// </summary>	
        /// <unmanaged>BOOL ScaleAndOffsetSupported</unmanaged>
        public bool ScaleAndOffsetSupported { 
            get { 
                return (_ScaleAndOffsetSupported!=0)?true:false; 
            }
            set { 
                _ScaleAndOffsetSupported = value?1:0;
            }
        }
        internal int _ScaleAndOffsetSupported;
        
        /// <summary>	
        /// [out] A single-precision float vector for the maximum converted value for the gamma control. 	
        /// </summary>	
        /// <unmanaged>float MaxConvertedValue</unmanaged>
        public float MaxConvertedValue;
        
        /// <summary>	
        /// [out] A single-precision float vector for the minimum converted value for the gamma control. 	
        /// </summary>	
        /// <unmanaged>float MinConvertedValue</unmanaged>
        public float MinConvertedValue;
        
        /// <summary>	
        /// [out] The number of elements in the array that the ControlPointPositions member specifies. 	
        /// </summary>	
        /// <unmanaged>UINT NumGammaControlPoints</unmanaged>
        public int NumGammaControlPoints;
        
        /// <summary>	
        /// [out] An array of single-precision float vectors that describe the gamma control point positions. 	
        /// </summary>	
        /// <unmanaged>float ControlPointPositions[1025]</unmanaged>
        public float[] ControlPointPositions { 
            get { 
                if (_ControlPointPositions == null) {
                    _ControlPointPositions = new float[1025];
                }
                return _ControlPointPositions; 
            }
        }
        internal float[] _ControlPointPositions;

        // Internal native struct used for marshalling
        [StructLayout(LayoutKind.Sequential, Pack = 0 )]
        internal unsafe partial struct __Native {	
            public int _ScaleAndOffsetSupported;
            public float MaxConvertedValue;
            public float MinConvertedValue;
            public int NumGammaControlPoints;
            public fixed float ControlPointPositions[1025];
		    // Method to free native struct
            internal unsafe void __MarshalFree()
            {
            }
        }

        // Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
            this._ScaleAndOffsetSupported = @ref._ScaleAndOffsetSupported;
            this.MaxConvertedValue = @ref.MaxConvertedValue;
            this.MinConvertedValue = @ref.MinConvertedValue;
            this.NumGammaControlPoints = @ref.NumGammaControlPoints;
                fixed (void* __to = &this.ControlPointPositions[0]) fixed (void* __from = @ref.ControlPointPositions) SlimDX2.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 1025*sizeof ( float));
        }
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
            @ref._ScaleAndOffsetSupported = this._ScaleAndOffsetSupported;
            @ref.MaxConvertedValue = this.MaxConvertedValue;
            @ref.MinConvertedValue = this.MinConvertedValue;
            @ref.NumGammaControlPoints = this.NumGammaControlPoints;
            fixed (void* __to = @ref.ControlPointPositions) fixed (void* __from = &this.ControlPointPositions[0]) SlimDX2.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, 1025*sizeof ( float));
		
		}
    }
    
    /// <summary>	
    /// Represents a rational number.	
    /// </summary>	
    /// <remarks>	
    /// The DXGI_RATIONAL structure operates under the following rules:0/0 is legal and will be interpreted as 0/1.0/anything is interpreted as zero.If you are representing a whole number, the denominator should be 1.	
    /// </remarks>	
    /// <unmanaged>DXGI_RATIONAL</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct Rational {	
        
        /// <summary>	
        /// An unsigned integer value representing the top of the rational number.	
        /// </summary>	
        /// <unmanaged>UINT Numerator</unmanaged>
        public int Numerator;
        
        /// <summary>	
        /// An unsigned integer value representing the bottom of the rational number.	
        /// </summary>	
        /// <unmanaged>UINT Denominator</unmanaged>
        public int Denominator;
    }
    
    /// <summary>	
    /// Describes a display mode.	
    /// </summary>	
    /// <unmanaged>DXGI_MODE_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct ModeDescription {	
        
        /// <summary>	
        /// A value describing the resolution width.	
        /// </summary>	
        /// <unmanaged>UINT Width</unmanaged>
        public int Width;
        
        /// <summary>	
        /// A value describing the resolution height.	
        /// </summary>	
        /// <unmanaged>UINT Height</unmanaged>
        public int Height;
        
        /// <summary>	
        /// A <see cref="SlimDX2.DXGI.Rational"/> structure describing the refresh rate in hertz	
        /// </summary>	
        /// <unmanaged>DXGI_RATIONAL RefreshRate</unmanaged>
        public SlimDX2.DXGI.Rational RefreshRate;
        
        /// <summary>	
        /// A <see cref="SlimDX2.DXGI.Format"/> structure describing the display format.	
        /// </summary>	
        /// <unmanaged>DXGI_FORMAT Format</unmanaged>
        public SlimDX2.DXGI.Format Format;
        
        /// <summary>	
        /// A member of the <see cref="SlimDX2.DXGI.DisplayModeScanlineOrder"/> enumerated type describing the scanline drawing mode.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_SCANLINE_ORDER ScanlineOrdering</unmanaged>
        public SlimDX2.DXGI.DisplayModeScanlineOrder ScanlineOrdering;
        
        /// <summary>	
        /// A member of the <see cref="SlimDX2.DXGI.DisplayModeScaling"/> enumerated type describing the scaling mode.	
        /// </summary>	
        /// <unmanaged>DXGI_MODE_SCALING Scaling</unmanaged>
        public SlimDX2.DXGI.DisplayModeScaling Scaling;
    }
    
    /// <summary>	
    /// Describes multi-sampling parameters for a resource.	
    /// </summary>	
    /// <remarks>	
    /// The default sampler mode, with no anti-aliasing, has a count of 1 and a quality level of 0.If multi-sample antialiasing is being used, all bound render targets and depth buffers must have the same sample counts and quality levels.Differences between Direct3D 10.0 and Direct3D 10.1 and between Direct3D 10.0 and Direct3D 11:Direct3D 10.1 has defined two standard quality levels:   D3D10_STANDARD_MULTISAMPLE_PATTERN and D3D10_CENTER_MULTISAMPLE_PATTERN in the D3D10_STANDARD_MULTISAMPLE_QUALITY_LEVELS enumeration in D3D10_1.h.Direct3D 11 has defined two standard quality levels:   D3D11_STANDARD_MULTISAMPLE_PATTERN and D3D11_CENTER_MULTISAMPLE_PATTERN in the <see cref="SlimDX2.Direct3D11.StandardMultisampleQualityLevels"/> enumeration in D3D11.h. 	
    /// </remarks>	
    /// <unmanaged>DXGI_SAMPLE_DESC</unmanaged>
    [StructLayout(LayoutKind.Sequential, Pack = 0 )]
    public  partial struct SampleDescription {	
        
        /// <summary>	
        /// The number of multisamples per pixel.	
        /// </summary>	
        /// <unmanaged>UINT Count</unmanaged>
        public int Count;
        
        /// <summary>	
        /// The image quality level. The higher the quality, the lower the performance. The valid range is between zero and one less than the level returned  by {{ID3D10Device::CheckMultisampleQualityLevels}} for Direct3D 10 or <see cref="SlimDX2.Direct3D11.Device.CheckMultisampleQualityLevels"/> for Direct3D 11.For Direct3D 10.1 and Direct3D 11, you can use two special quality level values. For more information about these quality level values, see Remarks.	
        /// </summary>	
        /// <unmanaged>UINT Quality</unmanaged>
        public int Quality;
    }
}
