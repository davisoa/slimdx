<#@ template debug="true" language="C#" hostspecific="True"  #>
<#@ output encoding="ASCII" extension=".cs" #>
<#@ assembly name="XIDLToCSharp.exe" #>
<#@ assembly name="SlimDX2.Tools.XIDL.dll" #>
<#@ import namespace="SlimDX2.Tools.XIDLToCSharp" #>
<#@ import namespace="SlimDX2.Tools.XIDL" #>
<#@ parameter name="Generator" type="SlimDX2.Tools.XIDLToCSharp.CSharpGenerator" #>
<#@ parameter name="Assembly" type="SlimDX2.Tools.XIDLToCSharp.CSharpAssembly" #>
// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     SlimDX2 Dynamic Interop registration.
//     This code was generated by a tool.
//     Date : <#=  DateTime.Now #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
<#
if ( Assembly.FullName == Global.Name ) {
#>
namespace <#= Global.Name #>
{
    public partial class CppObject
    {
        private static DynamicInterop.CalliSignature[] _interopCalliSignatures = new DynamicInterop.CalliSignature[]
                                                                                     {
<#
foreach (var method in Generator.Interop.Methods) {
#>
            new DynamicInterop.CalliSignature("<#= method.Name #>", <#= method.ReturnType.ParamTypeOfName #><#
	if ( method.ParameterTypes.Count > 0 ) {
#>, <#
		for(int i = 0; i < method.ParameterTypes.Count; i++) {
#><#= method.ParameterTypes[i].ParamTypeOfName #><#
			if ( (i+1) < method.ParameterTypes.Count) {#>,<#}
		}
	}
#>),
<#	
}
#>
        };
    }
	
	internal partial class LocalInterop : <#= Global.Name #>.Interop
    {	
	}	
}
<#
} else {#>	
namespace <#= Assembly.FullName #>
{
    public partial class LocalInterop : <#= Global.Name #>.Interop
    {
        static unsafe LocalInterop()
        {
            <#= Global.Name #>.DynamicInterop.InitDelegates(typeof(LocalInterop));
        }	
<#
foreach (var method in Assembly.Interop.Methods) {
#>
        public unsafe delegate <#= method.ReturnType.TypeName #> <#= method.Name #>Delegate(void* ptr, int index, <#
		for(int i = 0; i < method.ParameterTypes.Count; i++) {
#><#= method.ParameterTypes[i].TypeName #> arg<#= i #><#
			if ( (i+1) < method.ParameterTypes.Count) {#>,<#}
		}
#>);
        public static <#= method.Name #>Delegate <#= method.Name #>;
<#	
}
#>
    }
}
<#
}
#>