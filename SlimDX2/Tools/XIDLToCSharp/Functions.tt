<#@ template debug="true" language="C#" hostspecific="True"  #>
<#@ output encoding="ASCII" extension=".cs" #>
<#@ assembly name="XIDLToCSharp.exe" #>
<#@ assembly name="SlimDX2.Tools.XIDL.dll" #>
<#@ import namespace="SlimDX2.Tools.XIDLToCSharp" #>
<#@ import namespace="SlimDX2.Tools.XIDL" #>
<#@ parameter name="Namespace" type="SlimDX2.Tools.XIDLToCSharp.CSharpNamespace" #>
// Copyright (c) 2007-2010 SlimDX Group
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

//------------------------------------------------------------------------------
// <auto-generated>
//     Functions for <#= Namespace.Name #> namespace.
//     This code was generated by a tool.
//     Date : <#=  DateTime.Now #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace <#= Namespace.Name #> {

<#
foreach (var sharpFunctionGroup in Namespace.FunctionGroups)
{

#>

	/// <summary>
    /// <#= sharpFunctionGroup.Name #> Functions.
    /// </summary>
    <#= sharpFunctionGroup.VisibilityName #>static partial class <#= sharpFunctionGroup.Name #> {   
<#

	foreach (var sharpConstant in sharpFunctionGroup.Constants) {		
#>        
        /// <summary>Constant <#= sharpConstant.CppElementName #>.</summary>
        <#= sharpConstant.VisibilityName #>const <#= sharpConstant.TypeName #> <#= sharpConstant.Name #> = <#= sharpConstant.Value #>;
<#
	}
	
	foreach (var sharpFunction in sharpFunctionGroup.Functions) {		
#>
        
<#	
		foreach (var docItem in sharpFunction.DocItems) {
#>
        /// <#= docItem #>	
<#			
		}
		foreach (var param in sharpFunction.Parameters) {
#>
        /// <param name="<#= param.Name #>"><#= param.SingleDoc #></param>
<#			
		}
		if (sharpFunction.HasReturnType) {
#>
        /// <returns><#= sharpFunction.ReturnType.SingleDoc #></returns>
<#			
		}
#>
        /// <unmanaged><#= sharpFunction.CppSignature #></unmanaged>
		<#= sharpFunction.VisibilityName #>static <#= sharpFunction.ReturnType.PublicType.FullName #> <#= sharpFunction.Name #>(<#
 
		int i = 0;
		int maxParam = sharpFunction.ParameterCount;
		foreach (var param in sharpFunction.Parameters) {
			#><#= param.ParamName #><#				
			if ((i+1)<maxParam) {#>, <#}
			i++;
		}
#>) {
            unsafe {
<#		
				// ---------------------------------------------------------------------------------------------------
				// Start Initializing Parameters out
				// ---------------------------------------------------------------------------------------------------
				foreach (var param in sharpFunction.Parameters) {
					if (param.IsOut) {
						if (param.PublicType is CSharpInterface) {
							if (param.IsArray) {
#>                IntPtr[] <#= param.TempName #> = new IntPtr[<#= param.Name #>.Length];
<#							
							} else {
#>                IntPtr <#= param.TempName #> = IntPtr.Zero;
<#
							}
						}
					} else if (param.IsIn || param.IsRefIn) {
						if (param.HasNativeValueType ) {
							if (param.IsArray) {
#>                <#= param.PublicType.FullName #>.__Native[] <#= param.TempName #> = ( <#= param.Name #> == null)? null : new <#= param.PublicType.FullName #>.__Native[<#= param.Name #>.Length];
                if ( <#= param.Name #> != null) 
                    for(int i = 0; i < <#= param.Name #>.Length; i++) {
                   	    <#= param.TempName #>[i] = new <#= param.PublicType.FullName #>.__Native();
                   	    <#= param.Name #>[i].__MarshalTo(ref <#= param.TempName #>[i]);					
                    }
<#
							} else {
#>                <#= param.PublicType.FullName #>.__Native <#= param.TempName #> = new <#= param.PublicType.FullName #>.__Native();
                <#= param.Name #>.__MarshalTo(ref <#= param.TempName #>);
<#							}
						} else if (param.IsRefIn && param.IsOptionnal && !param.IsArray) {#>							
                <#= param.PublicType.FullName #> <#= param.TempName #> = new <#= param.PublicType.FullName #>();
                if (<#= param.Name #>.HasValue)
                    <#= param.TempName #> = <#= param.Name #>.Value;								
<#							
						}
					}
				}

				// ---------------------------------------------------------------------------------------------------
				// Pre-Declare Return Type
				// ---------------------------------------------------------------------------------------------------
				if (sharpFunction.HasReturnType) {#>
                <#= sharpFunction.ReturnType.PublicType.FullName #> __result__;
<#				}
				
				// ---------------------------------------------------------------------------------------------------
				// Perform method call to Interop.Calli*
				// ---------------------------------------------------------------------------------------------------
				if (sharpFunction.HasReturnType) {#>
                __result__= (<#= sharpFunction.ReturnType.PublicType.FullName #>)<#
				} else {
#>                <#
				}
#><#= sharpFunction.CppElementName #>_(<#
				i = 0;
				maxParam = sharpFunction.ParameterCount;
				foreach (var param in sharpFunction.Parameters) {
					#><#= param.CallNameForFunction #><#				
					if ((i+1)<maxParam) {#>, <#}
					i++;
				}
				#>);
<#

				// ---------------------------------------------------------------------------------------------------
				// End Parameters out
				// ---------------------------------------------------------------------------------------------------
				foreach (var param in sharpFunction.Parameters) {
					if (param.IsOut) {
						if (param.PublicType is CSharpInterface) {
							if (param.IsArray) {
#>              for(int i = 0; i < <#= param.Name #>.Length; i++)
                    <#= param.Name #>[i] = new <#= param.PublicType.FullName #>(<#= param.TempName #>[i]);
<#							
							} else {
#>                <#= param.Name #> = (<#= param.TempName #> == IntPtr.Zero)?null:new <#= param.PublicType.FullName #>(<#= param.TempName #>);
<#							}
						}
					} else if (param.IsIn || param.IsRefIn) {
						if (param.HasNativeValueType && param.IsArray) {
#>                    if ( <#= param.Name #> != null)
                    for(int i = 0; i < <#= param.Name #>.Length; i++) {
                       	<#= param.TempName #>[i].__MarshalFree();
                    }
<#
						}
					}
				}			
				
				// ---------------------------------------------------------------------------------------------------
				// Return value if any
				// ---------------------------------------------------------------------------------------------------
				if (sharpFunction.HasReturnType) {
					if (sharpFunction.ReturnType.PublicType.Name == Global.Name +".Result") {#>
                __result__.CheckError();
                return __result__;
<#					} else {#>
                return __result__;
<#					}
				}
#>            }
        }
		
		/// <summary>Native Interop Function</summary>
        /// <unmanaged><#= sharpFunction.CppSignature #></unmanaged>
		[DllImport("<#= sharpFunction.DllName #>", EntryPoint = "<#= sharpFunction.CppElementName #>", CallingConvention = CallingConvention.StdCall, PreserveSig = true), SuppressUnmanagedCodeSecurityAttribute]
		private extern static <#= sharpFunction.ReturnType.PublicType.FullName #> <#= sharpFunction.CppElementName #>_(<#
 
		i = 0;
		maxParam = sharpFunction.ParameterCount;
		foreach (var param in sharpFunction.Parameters) {
			#><#= param.ParamNameForNativeFunction #><#				
			if ((i+1)<maxParam) {#>, <#}
			i++;
		}
#>);		
<#
   }
#>
    }
<#
}#>
}